[
  {
    "title": "What is Baleada Composition?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Baleada Composition is a collection of composition functions (a.k.a. hooks) that accomplish two things:\n1. Retrieve **state and methods** from one or more of the [Baleada Logic](/docs/logic) tools\n2. Make all of the state **reactive**, using tools from the JavaScript framework of your choice\n\n::: type=\"info\"\nBaleada's docs, which were built using [Nuxt.js](https://nuxtjs.org), use composition functions for touch detection, animation, navigating arrays, searching docs content, and more 🚀\n:::\n\nComposition functions are supported for the following frameworks:\n- [Vue](https://vuejs.org)\n- [React](https://react.org) [WIP]\n- [Svelte](https://svelte.dev) [WIP]\n\n::: type=\"info\"\nDidn't see your favorite framework in the list? Feel free to [raise an issue](https://gitlab.com/baleada/composition/issues) and ask for support.\n:::\n\n\n:::\n## Install\n:::\n\n:::\n```bash\nnpm i @baleada/composition\n```\n:::\n\n\n:::\n## Available composition functions\n:::\n\n`@baleada/composition` includes a composition function for each individual class in Baleada Logic.\n\nAll composition functions follow a simple naming convention: they start with `use` and end with the name of the class.\n\n:::\n| Library | Composition function |\n| --- | --- |\n| Animatable | `useAnimatable` |\n| Fetchable | `useFetchable` |\n| Syncable | `useSyncable` |\n:::\n",
    "updatedAt": "2019-12-17T19:01:33.987Z",
    "path": "./assets/md/composition/index.md",
    "fileName": "index",
    "href": "/docs/composition"
  },
  {
    "title": "Using Baleada Composition with React",
    "framework": "React",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-22T06:51:25.227Z",
    "path": "./assets/md/composition/using-with-react.md",
    "fileName": "using-with-react",
    "href": "/docs/composition/using-with-react"
  },
  {
    "title": "Using Baleada Composition with Svelte",
    "framework": "Svelte",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-22T06:51:37.752Z",
    "path": "./assets/md/composition/using-with-svelte.md",
    "fileName": "using-with-svelte",
    "href": "/docs/composition/using-with-svelte"
  },
  {
    "title": "Using Baleada Composition with Vue",
    "framework": "Vue",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-22T06:51:32.922Z",
    "path": "./assets/md/composition/using-with-vue.md",
    "fileName": "using-with-vue",
    "href": "/docs/composition/using-with-vue"
  },
  {
    "title": "Handler API",
    "framework": "agnostic",
    "publish": false,
    "order": 1,
    "body": "Each time the gesture API's `handle` method is called, passing a DOM event, the gesture API will call the appropriate function defined in the `handlers` option, passing two arguments:\n1. The DOM event that just happened\n2. The \"handler API\"\n\nThe \"handler API\" is an object whose properties store things that are useful when writing gesture recognition logic. At the moment, it only has one property: `toPolarCoordinates`, a Function that converts [Cartesian coordinates](https://en.wikipedia.org/wiki/Cartesian_coordinate_system) to [polar coordinates](https://en.wikipedia.org/wiki/Polar_coordinate_system).\n\n`toPolarCoordinates` requires that you pass one parameter: an object of Cartesian coordinates for the starting and ending points of a line. The table below summarizes the required properties of that object.\n\n::: ariaLabel=\"toPolarCoordinates parameter schema\"\n| Property | Type | Description |\n| --- | --- | --- |\n| `xA` | Number | The starting x-coordinate |\n| `xB` | Number | The ending x-coordinate |\n| `yA` | Number | The starting y-coordinate |\n| `yB` | Number | The ending y-coordinate |\n:::\n\nGiven that parameter, `toPolarCoordinates` will return an object whose structure is summarized in the table below.\n\n::: ariaLabel=\"toPolarCoordinates return value schema\"\n| Property | Type | Description |\n| --- | --- | --- |\n| `distance` | Number | The length of the line, in pixels. |\n| `angle` | Object | Has two properties: `radians` and `degrees`, both of which are Numbers that indicate the angle of the line. |\n:::\n",
    "updatedAt": "2019-12-26T10:06:32.087Z",
    "path": "./assets/md/gesture/handler-api.md",
    "fileName": "handler-api",
    "href": "/docs/gesture/handler-api"
  },
  {
    "title": "What is Baleada Gesture?",
    "framework": "agnostic",
    "publish": false,
    "order": 0,
    "body": "Baleada Gesture is a tiny [factory function](https://www.youtube.com/watch?v=ImwrezYhw4w) that helps you define custom [gestures](#what-is-a-gesture).\n\nThe function returns an API—more specifically, a JavaScript object with useful properties and methods that will help you handle DOM events and recognize gestures.\n\n\n:::\n## A note, before you dive in\n:::\n\nBaleada Gesture was designed and written during the development of the [`Listenable`](/docs/logic/classes/listenable) class in Baleada Logic, and [Baleada Listenable Gestures](/docs/listenable-gestures) is built on top of Baleada Gesture to help you listen for the following gestures in your project:\n- clicks (for recognizing single clicks, double clicks, or any other number of clicks)\n- drag\n- dragdrop\n- pan\n- pinch\n- press\n- rotate\n- swipe\n- taps (for recognizing single taps, double taps, or any other number of taps)\n\nBefore you use Baleada Gesture to define your own custom gestures, it's recommended that you check out the `Listenable` docs and the Baleada Listenable Gestures docs, and see how those tools work together. If you're satisfied with that workflow, and agree with the way the gestures are defined and recognized, you may not need to use Baleada Gesture at all.\n\nBut, if you don't agree with the way Baleada Listenable Gestures defines certain gestures, or if you want to add a new custom gesture, Baleada Gesture lays a great foundation that you can build upon!\n\n\n:::\n## What is a \"gesture\"?\n:::\n\nIn the context of Baleada Gesture, a \"gesture\" is defined as a sequence of DOM events that can be recognized as something more abstract. For example, a \"swipe\" gesture is:\n- A single touch,\n- that starts at a given point,\n- travels a distance greater than 0px (or a minimum distance of your choice),\n- travels at a velocity of greater than 0px/ms (or a minimum velocity of your choice),\n- does not cancel,\n- and finally, ends.\n\nThis sequence involves the [`touchstart`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event), [`touchmove`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event), [`touchcancel`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event), and [`touchend`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event) events. If those events happen in a particular order, and if their combined event data meets the conditions listed above, then the entire sequence of events can be considered one \"swipe\".\n\n\n:::\n## Installation\n:::\n\n:::\n```bash\nnpm i @baleada/gesture\n```\n:::\n\n\n:::\n## Usage\n:::\n\n:::\n### Import the factory function\n:::\n\nTo get started, import the `gesture` factory function from Baleada Gesture's entry file:\n\n:::\n```js\nimport gesture from '@baleada/gesture'\n```\n:::\n\n\n:::\n### Create your factory function\n:::\n\nAfter you import `gesture`, define your own factory function for your custom gesture:\n\n:::\n```js\nimport gesture from '@baleada/gesture'\n\nexport default function pan () {\n  ...\n}\n```\n:::\n\n\n:::\n### Build your objects\n:::\n\nAt the bottom of your factory function, use the `gesture` function to create a gesture API with useful properties and methods ([more on this later](#gesture-object-properties-and-methods)), and create the object you'll be returning from your function. You'll be passing an options object to the `gesture` function, but we'll handle that part later.\n\n:::\n```js\nimport gesture from '@baleada/gesture'\n\nexport default function pan () {\n  // We'll be putting other code here\n\n  const api = gesture({ ... }),\n        object = {\n          // Add properties, methods, getters, setters, etc.\n        }\n\n  return object\n}\n```\n:::\n\n\n:::\n### Define your event handlers\n:::\n\nWith your objects defined at the bottom, start defining functions at the top. These functions will handle incoming DOM events, extract any metadata you need, and determine whether or not the full sequence of events matches the definition of your custom recognizer.\n\nYou can name these functions anything, but the best practice is to name them after the type of event they will be handling:\n\n:::\n```js\nimport gesture from '@baleada/gesture'\n\nexport default function pan () {\n  function touchstart () {\n    ...\n  }\n  function touchmove () {\n    ...\n  }\n  function touchcancel () {\n    ...\n  }\n  function touchend () {\n    ...\n  }\n\n  const api = gesture({ ... }),\n        object = { ... }\n  return object\n}\n```\n:::\n\nFrom inside your functions, you can freely access your gesture API:\n\n:::\n```js\nimport gesture from '@baleada/gesture'\n\nexport default function pan () {\n  function touchstart () {\n     console.log(api.events) // This works, because in practice, the function won't run until after the gesture API has been defined\n  }\n\n  ...\n\n  const api = gesture({ ... }),\n        object = { ... }\n  return object\n}\n```\n:::\n\nBelow is a full breakdown of the properties and methods included with the gesture API.\n\n:::\n### Gesture API properties and methods\n:::\n\n::: ariaLabel=\"Gesture API properties and methods\" canFilterByQuery\n\n| Property | Type | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- |\n| `status` | Getter | See return value | N/A | The current status (String) of the instance. `status` is always `'ready'`, `'recognizing'`, or `'recognized'`. |\n| `handle(event)` | Function | <p>Interprets the type of its `event` parameter and calls the matching method on your subclass.</p> <p>`handle` also calls the `reset` method (details below) IF `status` is `'recognized'` AND the `gesture` constructor's `recognizesConsecutive` option is `false`.</p> <p>`handle` also adds its `event` parameter to the `events` array (details below) and will remove events from that array IF the `gesture` constructor's `maxSequenceLength` option is a number AND the events array's length is greater than that number.</p> | N/A | `status` |\n| `events` | Getter | See return value | N/A | The events (Array) that have been passed to the `handle` method |\n| `lastEvent` | Getter | See return value | N/A | The last event (Event) in the `events` array |\n| `recognized()` | Function | Sets `status` to `'recognized'` | none | none |\n| `reset()` | Function | Sets `events` to an empty array, `lastEvent` to `undefined`, `status` to `'ready'`, and calls the optional `onReset` function, if available ([see below](#gesture-factory-options) for more info on the optional `onReset` function). | none | none |\n:::\n\n\n:::\n### Pass your event handlers to the gesture factory\n:::\n\nWhen you're satisfied with the functions you've defined, return to the `gesture` function's optional parameter, which is an object. Add a `handlers` property to the object. The value of the `handlers` property should be an object. The keys of the object should be the names of the DOM events you'll be listening to, and the values should be the functions you wrote previously to handle the events.\n\nIf you named your functions after the DOM events they handle, you can easily destructure them into your `handlers` object:\n\n:::\n```js\nimport gesture from '@baleada/gesture'\n\nexport default function pan () {\n  function touchstart () { ... }\n  function touchmove () { ... }\n  function touchcancel () { ... }\n  function touchend () { ... }\n\n  const api = gesture({\n          handlers: { touchstart, touchmove, touchcancel, touchend }\n        }),\n        object = { ... }\n  return object\n}\n```\n:::\n\nInternally, your gesture API uses the `handlers` option to make sure all events are routed to the correct handler, so that your gesture-identifying logic runs properly.\n\n\n:::\n### Connect your object to the gesture API\n:::\n\nEach time a DOM event comes through, your gesture API will call the appropriate function defined in your `handlers` object, passing two arguments:\n1. The DOM event that just happened\n2. The \"handler API\". For more info on the handler API, [check out the full guide](/docs/gesture/handler-api).\n\nFor all of this to work, however, you need to make sure that events are being passed to your gesture API's `handle` method when they come through. You can connect these two objects however you like, but usually, the easiest way is to define a simple `handle` method on the object you'll be returning:\n\n:::\n```js\nimport gesture from '@baleada/gesture'\n\nexport default function pan () {\n  ...\n  const api = gesture({ ... }),\n        object = {\n          handle: event => api.handle(event)\n        }\n  return object\n}\n```\n:::\n\nThe last thing you need to know is what other options the `gesture` function accepts so that you can customize the object you receive back. Here's a full breakdown:\n\n:::\n### Gesture factory options\n:::\n\n::: ariaLabel=\"Gesture factory options\" canFilterByQuery\n| Option | Type | Default | Description |\n| --- | --- | --- | --- |\n| `handlers` | Object | none | Passes key/value pairs, where each key is the name of a DOM event you want to listen to, and each value is the appropriate handler function you defined for that event. |\n| `recognizesConsecutive` | Boolean | `false` | <p>Indicates whether or not `gesture` should be able to recognize the same gesture multiple times in a row without calling its `reset` method.</p> <p>Keep it as `false` for gestures like \"swipe\" and \"drag-and-drop\", which have precise starting and ending points. Set it to `true` for gestures like \"pan\" or \"click-and-drag\", which can continue to occur after they are first recognized.</p> |\n| `maxSequenceLength` | Number | `false` | <p>Defines the maximum number of events that the `gesture` class will keep track of.</p> <p>If `maxSequenceLength` is a number greater than 0, `gesture` will remove the first event in the array each time the `maxSequenceLength` is exceeded. If `maxSequenceLength` is `false`, `gesture` will never remove events from the array.</p> |\n| `onReset` | Function | none | Passes a function that your gesture API will call each time its own `reset()` method is called. Your gesture API calls its own `reset()` method when its `status` is `'recognized'` and the `recognizesConsecutive` options is `false`. You can use the `onReset` option to hook into that function call and properly reset any variables you're using to store metadata about events. |\n:::\n\n\n:::\n## Inspiration for your custom gestures\n:::\n\nFor inspiration and some examples of how Baleada Gesture is used in practice, check out the [Baleada Listenable Gesture source code](https://gitlab.com/baleada/listenable-gestures/tree/master/src/factories).\n\n\n:::\n## Language, compilation, browser support, and dependencies\n:::\n\nBaleada Gesture is written in modern JavaScript and compiled by [Babel](https://babeljs.io) to work in browsers that are used by more than 0.5% of global web visitors AND have had official support or updates in the past 24 months.\n\nTo allow for [tree-shaking](https://webpack.js.org/guides/tree-shaking/), Baleada Gesture's compiled code has no side effects and uses [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) instead of [`require()`](https://nodejs.org/api/modules.html#modules_require_id) and [`module.exports`](https://nodejs.org/api/modules.html#modules_module_exports).\n\nBaleada Gesture has no dependencies.\n",
    "updatedAt": "2019-12-26T10:06:36.787Z",
    "path": "./assets/md/gesture/index.md",
    "fileName": "index",
    "href": "/docs/gesture"
  },
  {
    "title": "What is Baleada Icons?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Baleada Icons is a collection of components that render SVG icons.\n\n::: type=\"info\"\nAll icons used in the Baleada docs are sourced from Baleada Icons 😎\n:::\n\nIcons are sourced from the following icon sets:\n- [Simple Icons](https://simpleicons.org/)\n- [Eva Icons](https://akveo.github.io/eva-icons/)\n\nEach icon in those sets has a corresponding component for the following frameworks:\n- [Vue](https://vuejs.org/)\n- [React](https://reactjs.org/)\n- [Svelte](https://svelte.dev) [WIP]\n\n::: type=\"info\"\nDidn't see your favorite icon set or framework in the list? Feel free to [raise an issue](https://gitlab.com/baleada/icons/issues) and ask for support.\n:::\n\n\n:::\n## Install\n:::\n\n:::\n```bash\nnpm i @baleada/icons\n```\n:::\n\n:::\n## Available components\n:::\n\n`@baleada/icons` includes a component for each individual icon in the Eva Icons and Simple Icons icon sets.\n\nAll components follow a simple naming convention: they start with `Eva` or `Simple` depending on which set they are from, and end with the name of the icon.\n\nEva icons' names are created by removing all hyphens and capitalizing the first letter of each word.\n\nEva icon component examples:\n\n::: ariaLabel=\"Table of examples showing how Baleada transforms Eva icon names into component names\"\n| Original icon name | Component name |\n| --- | --- |\n| bulb | `EvaBulb` |\n| hard-drive-outline | `EvaHardDriveOutline` |\n| globe-2 | `EvaGlobe2` |\n:::\n\nSimple icons' names are created by:\n1. Removing all spaces, exclamation points, and apostrophes\n2. Replacing special characters as indicated in the table below\n3. Capitalizing the first letter of each word and **preserving** the original case of other letters in the word\n\n::: ariaLabel=\"Table showing how Baleada replaces special characters in Simple icon names\"\n| Special character | Replacement |\n| --- | --- |\n| `.` | Dot |\n| `&` | And |\n| `+` | Plus |\n| `à`, `á`, `â`, `ã`, `ä` | a |\n| `ç` | c |\n| `è`, `é`, `ê`, `ë` | e |\n| `ì`, `í`, `î`, `ï` | i |\n| `ñ` | n |\n| `ò`, `ó`, `ô`, `õ`, `ö` | o |\n| `ù`, `ú`, `û`, `ü` | u |\n| `ý`, `ÿ` | y |\n:::\n\nSimple icon component examples:\n\n::: ariaLabel=\"Table of examples showing how Baleada transforms Simple icon names into component names\"\n| Original icon name | Component name | Notice: |\n| --- | --- | --- |\n| Geocaching | `SimpleGeocaching` | Nothing special here! |\n| Khan Academy | `SimpleKhanAcademy` | Space removed |\n| PHP | `SimplePHP` | Original case of PHP is preserved |\n| Vue.js | `SimpleVueDotJs` | `.` replaced with `Dot`, `js` capitalized to `Js` |\n| C++ | `SimpleCPlusPlus` | `++` replaced with `PlusPlus` |\n| AT&T | `SimpleATAndT` | `&` replaced with `And`, original cases of `AT` and `T` are preserved |\n| AlloCiné | `SimpleAlloCine` | `é` replaced with `e`, original case of the `C` is preserved |\n:::\n\nFor a full list of available components, [jump to the last section of this article](#full-component-list).\n\n\n:::\n## Import and use the components\n:::\n\nFor more guidance on how to import and use the components, see one of the following framework-specific guides:\n- [Using icons with Vue](/docs/icons/using-with-vue)\n- [Use icons with React](/docs/icons/using-with-react)\n\n\n:::\n## Full component list\n:::\n\n<!-- ::: canFilterByQuery ariaLabel=\"Full list of Baleada Icons components\"\n| Component name |\n| --- |\n| EvaActivity |\n| EvaActivityOutline |\n| EvaAlertCircle |\n| EvaAlertCircleOutline |\n| EvaAlertTriangle |\n| EvaAlertTriangleOutline |\n| EvaArchive |\n| EvaArchiveOutline |\n| EvaArrowBack |\n| EvaArrowBackOutline |\n| EvaArrowCircleDown |\n| EvaArrowCircleDownOutline |\n| EvaArrowCircleLeft |\n| EvaArrowCircleLeftOutline |\n| EvaArrowCircleRight |\n| EvaArrowCircleRightOutline |\n| EvaArrowCircleUp |\n| EvaArrowCircleUpOutline |\n| EvaArrowDown |\n| EvaArrowDownOutline |\n| EvaArrowDownward |\n| EvaArrowDownwardOutline |\n| EvaArrowForward |\n| EvaArrowForwardOutline |\n| EvaArrowIosBack |\n| EvaArrowIosBackOutline |\n| EvaArrowIosDownward |\n| EvaArrowIosDownwardOutline |\n| EvaArrowIosForward |\n| EvaArrowIosForwardOutline |\n| EvaArrowIosUpward |\n| EvaArrowIosUpwardOutline |\n| EvaArrowLeft |\n| EvaArrowLeftOutline |\n| EvaArrowRight |\n| EvaArrowRightOutline |\n| EvaArrowUp |\n| EvaArrowUpOutline |\n| EvaArrowUpward |\n| EvaArrowUpwardOutline |\n| EvaArrowheadDown |\n| EvaArrowheadDownOutline |\n| EvaArrowheadLeft |\n| EvaArrowheadLeftOutline |\n| EvaArrowheadRight |\n| EvaArrowheadRightOutline |\n| EvaArrowheadUp |\n| EvaArrowheadUpOutline |\n| EvaAt |\n| EvaAtOutline |\n| EvaAttach |\n| EvaAttach2 |\n| EvaAttach2Outline |\n| EvaAttachOutline |\n| EvaAward |\n| EvaAwardOutline |\n| EvaBackspace |\n| EvaBackspaceOutline |\n| EvaBarChart |\n| EvaBarChart2 |\n| EvaBarChart2Outline |\n| EvaBarChartOutline |\n| EvaBattery |\n| EvaBatteryOutline |\n| EvaBehance |\n| EvaBehanceOutline |\n| EvaBell |\n| EvaBellOff |\n| EvaBellOffOutline |\n| EvaBellOutline |\n| EvaBluetooth |\n| EvaBluetoothOutline |\n| EvaBook |\n| EvaBookOpen |\n| EvaBookOpenOutline |\n| EvaBookOutline |\n| EvaBookmark |\n| EvaBookmarkOutline |\n| EvaBriefcase |\n| EvaBriefcaseOutline |\n| EvaBrowser |\n| EvaBrowserOutline |\n| EvaBrush |\n| EvaBrushOutline |\n| EvaBulb |\n| EvaBulbOutline |\n| EvaCalendar |\n| EvaCalendarOutline |\n| EvaCamera |\n| EvaCameraOutline |\n| EvaCar |\n| EvaCarOutline |\n| EvaCast |\n| EvaCastOutline |\n| EvaCharging |\n| EvaChargingOutline |\n| EvaCheckmark |\n| EvaCheckmarkCircle |\n| EvaCheckmarkCircle2 |\n| EvaCheckmarkCircle2Outline |\n| EvaCheckmarkCircleOutline |\n| EvaCheckmarkOutline |\n| EvaCheckmarkSquare |\n| EvaCheckmarkSquare2 |\n| EvaCheckmarkSquare2Outline |\n| EvaCheckmarkSquareOutline |\n| EvaChevronDown |\n| EvaChevronDownOutline |\n| EvaChevronLeft |\n| EvaChevronLeftOutline |\n| EvaChevronRight |\n| EvaChevronRightOutline |\n| EvaChevronUp |\n| EvaChevronUpOutline |\n| EvaClipboard |\n| EvaClipboardOutline |\n| EvaClock |\n| EvaClockOutline |\n| EvaClose |\n| EvaCloseCircle |\n| EvaCloseCircleOutline |\n| EvaCloseOutline |\n| EvaCloseSquare |\n| EvaCloseSquareOutline |\n| EvaCloudDownload |\n| EvaCloudDownloadOutline |\n| EvaCloudUpload |\n| EvaCloudUploadOutline |\n| EvaCode |\n| EvaCodeDownload |\n| EvaCodeDownloadOutline |\n| EvaCodeOutline |\n| EvaCollapse |\n| EvaCollapseOutline |\n| EvaColorPalette |\n| EvaColorPaletteOutline |\n| EvaColorPicker |\n| EvaColorPickerOutline |\n| EvaCompass |\n| EvaCompassOutline |\n| EvaCopy |\n| EvaCopyOutline |\n| EvaCornerDownLeft |\n| EvaCornerDownLeftOutline |\n| EvaCornerDownRight |\n| EvaCornerDownRightOutline |\n| EvaCornerLeftDown |\n| EvaCornerLeftDownOutline |\n| EvaCornerLeftUp |\n| EvaCornerLeftUpOutline |\n| EvaCornerRightDown |\n| EvaCornerRightDownOutline |\n| EvaCornerRightUp |\n| EvaCornerRightUpOutline |\n| EvaCornerUpLeft |\n| EvaCornerUpLeftOutline |\n| EvaCornerUpRight |\n| EvaCornerUpRightOutline |\n| EvaCreditCard |\n| EvaCreditCardOutline |\n| EvaCrop |\n| EvaCropOutline |\n| EvaCube |\n| EvaCubeOutline |\n| EvaDiagonalArrowLeftDown |\n| EvaDiagonalArrowLeftDownOutline |\n| EvaDiagonalArrowLeftUp |\n| EvaDiagonalArrowLeftUpOutline |\n| EvaDiagonalArrowRightDown |\n| EvaDiagonalArrowRightDownOutline |\n| EvaDiagonalArrowRightUp |\n| EvaDiagonalArrowRightUpOutline |\n| EvaDoneAll |\n| EvaDoneAllOutline |\n| EvaDownload |\n| EvaDownloadOutline |\n| EvaDroplet |\n| EvaDropletOff |\n| EvaDropletOffOutline |\n| EvaDropletOutline |\n| EvaEdit |\n| EvaEdit2 |\n| EvaEdit2Outline |\n| EvaEditOutline |\n| EvaEmail |\n| EvaEmailOutline |\n| EvaExpand |\n| EvaExpandOutline |\n| EvaExternalLink |\n| EvaExternalLinkOutline |\n| EvaEye |\n| EvaEyeOff |\n| EvaEyeOff2 |\n| EvaEyeOff2Outline |\n| EvaEyeOffOutline |\n| EvaEyeOutline |\n| EvaFacebook |\n| EvaFacebookOutline |\n| EvaFile |\n| EvaFileAdd |\n| EvaFileAddOutline |\n| EvaFileOutline |\n| EvaFileRemove |\n| EvaFileRemoveOutline |\n| EvaFileText |\n| EvaFileTextOutline |\n| EvaFilm |\n| EvaFilmOutline |\n| EvaFlag |\n| EvaFlagOutline |\n| EvaFlash |\n| EvaFlashOff |\n| EvaFlashOffOutline |\n| EvaFlashOutline |\n| EvaFlip |\n| EvaFlip2 |\n| EvaFlip2Outline |\n| EvaFlipOutline |\n| EvaFolder |\n| EvaFolderAdd |\n| EvaFolderAddOutline |\n| EvaFolderOutline |\n| EvaFolderRemove |\n| EvaFolderRemoveOutline |\n| EvaFunnel |\n| EvaFunnelOutline |\n| EvaGift |\n| EvaGiftOutline |\n| EvaGithub |\n| EvaGithubOutline |\n| EvaGlobe |\n| EvaGlobe2 |\n| EvaGlobe2Outline |\n| EvaGlobe3 |\n| EvaGlobeOutline |\n| EvaGoogle |\n| EvaGoogleOutline |\n| EvaGrid |\n| EvaGridOutline |\n| EvaHardDrive |\n| EvaHardDriveOutline |\n| EvaHash |\n| EvaHashOutline |\n| EvaHeadphones |\n| EvaHeadphonesOutline |\n| EvaHeart |\n| EvaHeartOutline |\n| EvaHome |\n| EvaHomeOutline |\n| EvaImage |\n| EvaImage2 |\n| EvaImageOutline |\n| EvaInbox |\n| EvaInboxOutline |\n| EvaInfo |\n| EvaInfoOutline |\n| EvaKeypad |\n| EvaKeypadOutline |\n| EvaLayers |\n| EvaLayersOutline |\n| EvaLayout |\n| EvaLayoutOutline |\n| EvaLink |\n| EvaLink2 |\n| EvaLink2Outline |\n| EvaLinkOutline |\n| EvaLinkedin |\n| EvaLinkedinOutline |\n| EvaList |\n| EvaListOutline |\n| EvaLoaderOutline |\n| EvaLock |\n| EvaLockOutline |\n| EvaLogIn |\n| EvaLogInOutline |\n| EvaLogOut |\n| EvaLogOutOutline |\n| EvaMap |\n| EvaMapOutline |\n| EvaMaximize |\n| EvaMaximizeOutline |\n| EvaMenu |\n| EvaMenu2 |\n| EvaMenu2Outline |\n| EvaMenuArrow |\n| EvaMenuArrowOutline |\n| EvaMenuOutline |\n| EvaMessageCircle |\n| EvaMessageCircleOutline |\n| EvaMessageSquare |\n| EvaMessageSquareOutline |\n| EvaMic |\n| EvaMicOff |\n| EvaMicOffOutline |\n| EvaMicOutline |\n| EvaMinimize |\n| EvaMinimizeOutline |\n| EvaMinus |\n| EvaMinusCircle |\n| EvaMinusCircleOutline |\n| EvaMinusOutline |\n| EvaMinusSquare |\n| EvaMinusSquareOutline |\n| EvaMonitor |\n| EvaMonitorOutline |\n| EvaMoon |\n| EvaMoonOutline |\n| EvaMoreHorizontal |\n| EvaMoreHorizontalOutline |\n| EvaMoreVertical |\n| EvaMoreVerticalOutline |\n| EvaMove |\n| EvaMoveOutline |\n| EvaMusic |\n| EvaMusicOutline |\n| EvaNavigation |\n| EvaNavigation2 |\n| EvaNavigation2Outline |\n| EvaNavigationOutline |\n| EvaNpm |\n| EvaNpmOutline |\n| EvaOptions |\n| EvaOptions2 |\n| EvaOptions2Outline |\n| EvaOptionsOutline |\n| EvaPantone |\n| EvaPantoneOutline |\n| EvaPaperPlane |\n| EvaPaperPlaneOutline |\n| EvaPauseCircle |\n| EvaPauseCircleOutline |\n| EvaPeople |\n| EvaPeopleOutline |\n| EvaPercent |\n| EvaPercentOutline |\n| EvaPerson |\n| EvaPersonAdd |\n| EvaPersonAddOutline |\n| EvaPersonDelete |\n| EvaPersonDeleteOutline |\n| EvaPersonDone |\n| EvaPersonDoneOutline |\n| EvaPersonOutline |\n| EvaPersonRemove |\n| EvaPersonRemoveOutline |\n| EvaPhone |\n| EvaPhoneCall |\n| EvaPhoneCallOutline |\n| EvaPhoneMissed |\n| EvaPhoneMissedOutline |\n| EvaPhoneOff |\n| EvaPhoneOffOutline |\n| EvaPhoneOutline |\n| EvaPieChart |\n| EvaPieChart2 |\n| EvaPieChartOutline |\n| EvaPin |\n| EvaPinOutline |\n| EvaPlayCircle |\n| EvaPlayCircleOutline |\n| EvaPlus |\n| EvaPlusCircle |\n| EvaPlusCircleOutline |\n| EvaPlusOutline |\n| EvaPlusSquare |\n| EvaPlusSquareOutline |\n| EvaPower |\n| EvaPowerOutline |\n| EvaPricetags |\n| EvaPricetagsOutline |\n| EvaPrinter |\n| EvaPrinterOutline |\n| EvaQuestionMark |\n| EvaQuestionMarkCircle |\n| EvaQuestionMarkCircleOutline |\n| EvaQuestionMarkOutline |\n| EvaRadio |\n| EvaRadioButtonOff |\n| EvaRadioButtonOffOutline |\n| EvaRadioButtonOn |\n| EvaRadioButtonOnOutline |\n| EvaRadioOutline |\n| EvaRecording |\n| EvaRecordingOutline |\n| EvaRefresh |\n| EvaRefreshOutline |\n| EvaRepeat |\n| EvaRepeatOutline |\n| EvaRewindLeft |\n| EvaRewindLeftOutline |\n| EvaRewindRight |\n| EvaRewindRightOutline |\n| EvaSave |\n| EvaSaveOutline |\n| EvaScissors |\n| EvaScissorsOutline |\n| EvaSearch |\n| EvaSearchOutline |\n| EvaSettings |\n| EvaSettings2 |\n| EvaSettings2Outline |\n| EvaSettingsOutline |\n| EvaShake |\n| EvaShakeOutline |\n| EvaShare |\n| EvaShareOutline |\n| EvaShield |\n| EvaShieldOff |\n| EvaShieldOffOutline |\n| EvaShieldOutline |\n| EvaShoppingBag |\n| EvaShoppingBagOutline |\n| EvaShoppingCart |\n| EvaShoppingCartOutline |\n| EvaShuffle |\n| EvaShuffle2 |\n| EvaShuffle2Outline |\n| EvaShuffleOutline |\n| EvaSkipBack |\n| EvaSkipBackOutline |\n| EvaSkipForward |\n| EvaSkipForwardOutline |\n| EvaSlash |\n| EvaSlashOutline |\n| EvaSmartphone |\n| EvaSmartphoneOutline |\n| EvaSpeaker |\n| EvaSpeakerOutline |\n| EvaSquare |\n| EvaSquareOutline |\n| EvaStar |\n| EvaStarOutline |\n| EvaStopCircle |\n| EvaStopCircleOutline |\n| EvaSun |\n| EvaSunOutline |\n| EvaSwap |\n| EvaSwapOutline |\n| EvaSync |\n| EvaSyncOutline |\n| EvaText |\n| EvaTextOutline |\n| EvaThermometer |\n| EvaThermometerMinus |\n| EvaThermometerMinusOutline |\n| EvaThermometerOutline |\n| EvaThermometerPlus |\n| EvaThermometerPlusOutline |\n| EvaToggleLeft |\n| EvaToggleLeftOutline |\n| EvaToggleRight |\n| EvaToggleRightOutline |\n| EvaTrash |\n| EvaTrash2 |\n| EvaTrash2Outline |\n| EvaTrashOutline |\n| EvaTrendingDown |\n| EvaTrendingDownOutline |\n| EvaTrendingUp |\n| EvaTrendingUpOutline |\n| EvaTv |\n| EvaTvOutline |\n| EvaTwitter |\n| EvaTwitterOutline |\n| EvaUmbrella |\n| EvaUmbrellaOutline |\n| EvaUndo |\n| EvaUndoOutline |\n| EvaUnlock |\n| EvaUnlockOutline |\n| EvaUpload |\n| EvaUploadOutline |\n| EvaVideo |\n| EvaVideoOff |\n| EvaVideoOffOutline |\n| EvaVideoOutline |\n| EvaVolumeDown |\n| EvaVolumeDownOutline |\n| EvaVolumeMute |\n| EvaVolumeMuteOutline |\n| EvaVolumeOff |\n| EvaVolumeOffOutline |\n| EvaVolumeUp |\n| EvaVolumeUpOutline |\n| EvaWifi |\n| EvaWifiOff |\n| EvaWifiOffOutline |\n| EvaWifiOutline |\n| Simple500px |\n| SimpleACM |\n| SimpleAMD |\n| SimpleARAL |\n| SimpleATAndT |\n| SimpleAboutDotMe |\n| SimpleAddThis |\n| SimpleAdobe |\n| SimpleAdobeAcrobatReader |\n| SimpleAdobeAfterEffects |\n| SimpleAdobeAudition |\n| SimpleAdobeCreativeCloud |\n| SimpleAdobeDreamweaver |\n| SimpleAdobeIllustrator |\n| SimpleAdobeInDesign |\n| SimpleAdobeLightroomCC |\n| SimpleAdobeLightroomClassic |\n| SimpleAdobePhotoshop |\n| SimpleAdobePremiere |\n| SimpleAdobeTypekit |\n| SimpleAdobeXD |\n| SimpleAirbnb |\n| SimpleAlloCine |\n| SimpleAmazon |\n| SimpleAmazonAWS |\n| SimpleAmericanExpress |\n| SimpleAndroid |\n| SimpleAngelList |\n| SimpleAngular |\n| SimpleAngularUniversal |\n| SimpleAnsible |\n| SimpleApache |\n| SimpleApacheFlink |\n| SimpleAppVeyor |\n| SimpleApple |\n| SimpleAppleMusic |\n| SimpleApplePay |\n| SimpleArchLinux |\n| SimpleArchiveOfOurOwn |\n| SimpleArduino |\n| SimpleArtStation |\n| SimpleAsana |\n| SimpleAtlassian |\n| SimpleAtom |\n| SimpleAudible |\n| SimpleAurelia |\n| SimpleAuth0 |\n| SimpleAutomatic |\n| SimpleAutotask |\n| SimpleAventrix |\n| SimpleAzureDevOps |\n| SimpleAzurePipelines |\n| SimpleBabel |\n| SimpleBaidu |\n| SimpleBamboo |\n| SimpleBandcamp |\n| SimpleBasecamp |\n| SimpleBathASU |\n| SimpleBeats |\n| SimpleBehance |\n| SimpleBigCartel |\n| SimpleBing |\n| SimpleBit |\n| SimpleBitbucket |\n| SimpleBitcoin |\n| SimpleBitdefender |\n| SimpleBitly |\n| SimpleBlender |\n| SimpleBlogger |\n| SimpleBoeing |\n| SimpleBoost |\n| SimpleBootstrap |\n| SimpleBower |\n| SimpleBrandDotAi |\n| SimpleBrave |\n| SimpleBuddy |\n| SimpleBuffer |\n| SimpleBuyMeACoffee |\n| SimpleBuzzFeed |\n| SimpleCEVO |\n| SimpleCMake |\n| SimpleCPlusPlus |\n| SimpleCSS3 |\n| SimpleCSSWizardry |\n| SimpleCakePHP |\n| SimpleCampaignMonitor |\n| SimpleCanva |\n| SimpleCashApp |\n| SimpleCassandra |\n| SimpleCastorama |\n| SimpleCastro |\n| SimpleChase |\n| SimpleChef |\n| SimpleCircle |\n| SimpleCircleCI |\n| SimpleCirrusCI |\n| SimpleCiviCRM |\n| SimpleClockify |\n| SimpleClojure |\n| SimpleCloudBees |\n| SimpleCloudflare |\n| SimpleCoOp |\n| SimpleCodacy |\n| SimpleCodeClimate |\n| SimpleCodeIgniter |\n| SimpleCodePen |\n| SimpleCodeSandbox |\n| SimpleCodecademy |\n| SimpleCodecov |\n| SimpleCodeforces |\n| SimpleCoderwall |\n| SimpleCodeship |\n| SimpleCodewars |\n| SimpleCodio |\n| SimpleCoffeeScript |\n| SimpleCommonWorkflowLanguage |\n| SimpleComposer |\n| SimpleComproPago |\n| SimpleCondaForge |\n| SimpleConekta |\n| SimpleConfluence |\n| SimpleCoursera |\n| SimpleCreativeCommons |\n| SimpleCrunchbase |\n| SimpleCrunchyroll |\n| SimpleD3DotJs |\n| SimpleDAZN |\n| SimpleDTube |\n| SimpleDailymotion |\n| SimpleDashlane |\n| SimpleDassaultSystemes |\n| SimpleDblp |\n| SimpleDebian |\n| SimpleDeepin |\n| SimpleDeezer |\n| SimpleDelicious |\n| SimpleDell |\n| SimpleDeno |\n| SimpleDependabot |\n| SimpleDesignerNews |\n| SimpleDevDotTo |\n| SimpleDevRant |\n| SimpleDeviantArt |\n| SimpleDiaspora |\n| SimpleDigg |\n| SimpleDigitalOcean |\n| SimpleDiscord |\n| SimpleDiscourse |\n| SimpleDiscover |\n| SimpleDisqus |\n| SimpleDisroot |\n| SimpleDjango |\n| SimpleDocker |\n| SimpleDocuSign |\n| SimpleDotNET |\n| SimpleDraugiemDotLv |\n| SimpleDribbble |\n| SimpleDrone |\n| SimpleDropbox |\n| SimpleDrupal |\n| SimpleDuckDuckGo |\n| SimpleDynatrace |\n| SimpleEBay |\n| SimpleESEA |\n| SimpleESLint |\n| SimpleEVRY |\n| SimpleEclipseIDE |\n| SimpleElastic |\n| SimpleElasticCloud |\n| SimpleElasticStack |\n| SimpleElasticsearch |\n| SimpleElectron |\n| SimpleElementary |\n| SimpleEllo |\n| SimpleElsevier |\n| SimpleEmpireKred |\n| SimpleEnvato |\n| SimpleEpicGames |\n| SimpleEthereum |\n| SimpleEtsy |\n| SimpleEventStore |\n| SimpleEventbrite |\n| SimpleEvernote |\n| SimpleEverplaces |\n| SimpleExercism |\n| SimpleExpertsExchange |\n| SimpleFACEIT |\n| SimpleFSecure |\n| SimpleFacebook |\n| SimpleFandango |\n| SimpleFavro |\n| SimpleFeatHub |\n| SimpleFedora |\n| SimpleFeedly |\n| SimpleFidoAlliance |\n| SimpleFigma |\n| SimpleFileZilla |\n| SimpleFirebase |\n| SimpleFitbit |\n| SimpleFlask |\n| SimpleFlattr |\n| SimpleFlickr |\n| SimpleFlipboard |\n| SimpleFlutter |\n| SimpleFnac |\n| SimpleFoursquare |\n| SimpleFramer |\n| SimpleFreeBSD |\n| SimpleFreeCodeCamp |\n| SimpleFurAffinity |\n| SimpleFurryNetwork |\n| SimpleGNU |\n| SimpleGNUSocial |\n| SimpleGOGDotCom |\n| SimpleGOVDotUK |\n| SimpleGarmin |\n| SimpleGatsby |\n| SimpleGauges |\n| SimpleGeocaching |\n| SimpleGerrit |\n| SimpleGhost |\n| SimpleGit |\n| SimpleGitHub |\n| SimpleGitLab |\n| SimpleGitpod |\n| SimpleGitter |\n| SimpleGlassdoor |\n| SimpleGmail |\n| SimpleGo |\n| SimpleGodotEngine |\n| SimpleGoldenLine |\n| SimpleGoodreads |\n| SimpleGoogle |\n| SimpleGoogleAllo |\n| SimpleGoogleAnalytics |\n| SimpleGoogleChrome |\n| SimpleGoogleCloud |\n| SimpleGoogleDrive |\n| SimpleGoogleHangouts |\n| SimpleGoogleHangoutsChat |\n| SimpleGoogleKeep |\n| SimpleGooglePay |\n| SimpleGooglePlay |\n| SimpleGooglePodcasts |\n| SimpleGrafana |\n| SimpleGraphQL |\n| SimpleGraphcool |\n| SimpleGrav |\n| SimpleGravatar |\n| SimpleGreenkeeper |\n| SimpleGroupon |\n| SimpleGulp |\n| SimpleGumroad |\n| SimpleGumtree |\n| SimpleHERE |\n| SimpleHTML5 |\n| SimpleHackHands |\n| SimpleHackaday |\n| SimpleHackerEarth |\n| SimpleHackerRank |\n| SimpleHackster |\n| SimpleHashnode |\n| SimpleHaskell |\n| SimpleHatenaBookmark |\n| SimpleHaxe |\n| SimpleHelm |\n| SimpleHeroku |\n| SimpleHexo |\n| SimpleHighly |\n| SimpleHipChat |\n| SimpleHockeyApp |\n| SimpleHomify |\n| SimpleHootsuite |\n| SimpleHouzz |\n| SimpleHuawei |\n| SimpleHubSpot |\n| SimpleHulu |\n| SimpleHumbleBundle |\n| SimpleICQ |\n| SimpleICloud |\n| SimpleIFixit |\n| SimpleIMDb |\n| SimpleIata |\n| SimpleIconJar |\n| SimpleInVision |\n| SimpleInkscape |\n| SimpleInstacart |\n| SimpleInstagram |\n| SimpleInstapaper |\n| SimpleIntel |\n| SimpleIntelliJIDEA |\n| SimpleIntercom |\n| SimpleInternetExplorer |\n| SimpleIonic |\n| SimpleItchDotIo |\n| SimpleJET |\n| SimpleJQuery |\n| SimpleJSFiddle |\n| SimpleJSON |\n| SimpleJabber |\n| SimpleJava |\n| SimpleJavaScript |\n| SimpleJekyll |\n| SimpleJenkins |\n| SimpleJest |\n| SimpleJira |\n| SimpleJoomla |\n| SimpleJsDelivr |\n| SimpleJupyter |\n| SimpleJustGiving |\n| SimpleKaggle |\n| SimpleKaiOS |\n| SimpleKentico |\n| SimpleKeyCDN |\n| SimpleKeybase |\n| SimpleKhanAcademy |\n| SimpleKibana |\n| SimpleKickstarter |\n| SimpleKik |\n| SimpleKirby |\n| SimpleKlout |\n| SimpleKnown |\n| SimpleKoFi |\n| SimpleKodi |\n| SimpleKoding |\n| SimpleKotlin |\n| SimpleKubernetes |\n| SimpleLGTM |\n| SimpleLINEWEBTOON |\n| SimpleLanyrd |\n| SimpleLaravel |\n| SimpleLaravelHorizon |\n| SimpleLaravelNova |\n| SimpleLastDotFm |\n| SimpleLaunchpad |\n| SimpleLeetCode |\n| SimpleLetsEncrypt |\n| SimpleLetterboxd |\n| SimpleLiberapay |\n| SimpleLibraryThing |\n| SimpleLine |\n| SimpleLinkedIn |\n| SimpleLinux |\n| SimpleLinuxFoundation |\n| SimpleLinuxMint |\n| SimpleLiveJournal |\n| SimpleLivestream |\n| SimpleLogstash |\n| SimpleLua |\n| SimpleLyft |\n| SimpleMEGA |\n| SimpleMXLinux |\n| SimpleMacys |\n| SimpleMagento |\n| SimpleMagisk |\n| SimpleMailChimp |\n| SimpleMailDotRu |\n| SimpleMakerBot |\n| SimpleManjaro |\n| SimpleMarkdown |\n| SimpleMarketo |\n| SimpleMasterCard |\n| SimpleMastodon |\n| SimpleMaterialDesign |\n| SimpleMathworks |\n| SimpleMatrix |\n| SimpleMatternet |\n| SimpleMediaFire |\n| SimpleMediaTemple |\n| SimpleMedium |\n| SimpleMeetup |\n| SimpleMessenger |\n| SimpleMeteor |\n| SimpleMicroDotBlog |\n| SimpleMicrogenetics |\n| SimpleMicrosoft |\n| SimpleMicrosoftAccess |\n| SimpleMicrosoftAzure |\n| SimpleMicrosoftEdge |\n| SimpleMicrosoftExcel |\n| SimpleMicrosoftOneDrive |\n| SimpleMicrosoftOneNote |\n| SimpleMicrosoftOutlook |\n| SimpleMicrosoftPowerPoint |\n| SimpleMicrosoftWord |\n| SimpleMinutemailer |\n| SimpleMix |\n| SimpleMixcloud |\n| SimpleMixer |\n| SimpleMonero |\n| SimpleMongoDB |\n| SimpleMonkeyTie |\n| SimpleMonogram |\n| SimpleMonzo |\n| SimpleMoo |\n| SimpleMozilla |\n| SimpleMozillaFirefox |\n| SimpleMySQL |\n| SimpleMyspace |\n| SimpleNGINX |\n| SimpleNPM |\n| SimpleNVIDIA |\n| SimpleNativeScript |\n| SimpleNeo4j |\n| SimpleNetflix |\n| SimpleNetlify |\n| SimpleNextDotJs |\n| SimpleNextcloud |\n| SimpleNextdoor |\n| SimpleNintendo |\n| SimpleNintendoGameCube |\n| SimpleNintendoSwitch |\n| SimpleNodeDotJs |\n| SimpleNodemon |\n| SimpleNuGet |\n| SimpleNucleo |\n| SimpleNuxtDotJs |\n| SimpleOCaml |\n| SimpleORCID |\n| SimpleOSMC |\n| SimpleOVH |\n| SimpleOctopusDeploy |\n| SimpleOculus |\n| SimpleOdnoklassniki |\n| SimpleOpenAccess |\n| SimpleOpenCollective |\n| SimpleOpenSUSE |\n| SimpleOpenSourceInitiative |\n| SimpleOpenStreetMap |\n| SimpleOpenVPN |\n| SimpleOpera |\n| SimpleOpsgenie |\n| SimpleOracle |\n| SimpleOrigin |\n| SimpleOvercast |\n| SimplePHP |\n| SimplePagekit |\n| SimplePandora |\n| SimplePantheon |\n| SimplePatreon |\n| SimplePayPal |\n| SimplePeriscope |\n| SimplePicartoDotTV |\n| SimplePinboard |\n| SimplePingdom |\n| SimplePingup |\n| SimplePinterest |\n| SimplePivotalTracker |\n| SimplePlanGrid |\n| SimplePlayStation |\n| SimplePlayStation3 |\n| SimplePlayStation4 |\n| SimplePlayerDotMe |\n| SimplePlex |\n| SimplePluralsight |\n| SimplePlurk |\n| SimplePocket |\n| SimplePodcasts |\n| SimplePostgreSQL |\n| SimplePostman |\n| SimplePowerShell |\n| SimplePrettier |\n| SimplePrismic |\n| SimpleProbot |\n| SimpleProcessWire |\n| SimpleProductHunt |\n| SimpleProtoDotIo |\n| SimpleProtonMail |\n| SimpleProxmox |\n| SimplePyPI |\n| SimplePython |\n| SimpleQiita |\n| SimpleQualcomm |\n| SimpleQuantcast |\n| SimpleQuantopian |\n| SimpleQuora |\n| SimpleQwiklabs |\n| SimpleQzone |\n| SimpleR |\n| SimpleRSS |\n| SimpleRStudio |\n| SimpleRails |\n| SimpleRaspberryPi |\n| SimpleReact |\n| SimpleReadTheDocs |\n| SimpleRealm |\n| SimpleReason |\n| SimpleRedHat |\n| SimpleRedbubble |\n| SimpleReddit |\n| SimpleRedis |\n| SimpleRedux |\n| SimpleRenren |\n| SimpleReverbNation |\n| SimpleRiot |\n| SimpleRiseup |\n| SimpleRollupDotJs |\n| SimpleRoots |\n| SimpleRuby |\n| SimpleRubyGems |\n| SimpleRunkeeper |\n| SimpleRust |\n| SimpleSAP |\n| SimpleSPDX |\n| SimpleSafari |\n| SimpleSalesforce |\n| SimpleSamsung |\n| SimpleSamsungPay |\n| SimpleSass |\n| SimpleSauceLabs |\n| SimpleScala |\n| SimpleScaleway |\n| SimpleScribd |\n| SimpleScrutinizerCI |\n| SimpleSega |\n| SimpleSellfy |\n| SimpleSensu |\n| SimpleSentry |\n| SimpleServerFault |\n| SimpleShazam |\n| SimpleShell |\n| SimpleShopify |\n| SimpleSignal |\n- Simple| SimpleIcons |\n| SimpleSinaWeibo |\n| SimpleSitePoint |\n| SimpleSkyliner |\n| SimpleSkype |\n| SimpleSlack |\n| SimpleSlashdot |\n| SimpleSlickPic |\n| SimpleSlides |\n| SimpleSmashingMagazine |\n| SimpleSnapchat |\n| SimpleSnapcraft |\n| SimpleSnyk |\n| SimpleSociety6 |\n| SimpleSocketDotIo |\n| SimpleSogou |\n| SimpleSolus |\n| SimpleSongkick |\n| SimpleSoundCloud |\n| SimpleSourceForge |\n| SimpleSourcegraph |\n| SimpleSpaceX |\n| SimpleSpacemacs |\n| SimpleSparkFun |\n| SimpleSparkPost |\n| SimpleSpeakerDeck |\n| SimpleSpotify |\n| SimpleSpotlight |\n| SimpleSpreaker |\n| SimpleSprint |\n| SimpleSquarespace |\n| SimpleStackExchange |\n| SimpleStackOverflow |\n| SimpleStackShare |\n| SimpleStadia |\n| SimpleStatamic |\n| SimpleStaticman |\n| SimpleStatuspage |\n| SimpleSteam |\n| SimpleSteem |\n| SimpleSteemit |\n| SimpleStitcher |\n| SimpleStorify |\n| SimpleStorybook |\n| SimpleStrava |\n| SimpleStripe |\n| SimpleStubHub |\n| SimpleStyleShare |\n| SimpleStylus |\n| SimpleSublimeText |\n| SimpleSubversion |\n| SimpleSuperUser |\n| SimpleSwarm |\n| SimpleSwift |\n| SimpleSymfony |\n| SimpleSynology |\n| SimpleTED |\n| SimpleTMobile |\n| SimpleTYPO3 |\n| SimpleTails |\n| SimpleTapas |\n| SimpleTeamViewer |\n| SimpleTeespring |\n| SimpleTelegram |\n| SimpleTencentQQ |\n| SimpleTencentWeibo |\n| SimpleTesla |\n| SimpleTheMighty |\n| SimpleTheMovieDatabase |\n| SimpleTidal |\n| SimpleTikTok |\n| SimpleTinder |\n| SimpleTodoist |\n| SimpleToggl |\n| SimpleTopcoder |\n| SimpleToptal |\n| SimpleTor |\n| SimpleTrainerRoad |\n| SimpleTrakt |\n| SimpleTravisCI |\n| SimpleTreehouse |\n| SimpleTrello |\n| SimpleTripAdvisor |\n| SimpleTrulia |\n| SimpleTumblr |\n| SimpleTurkishAirlines |\n| SimpleTwilio |\n| SimpleTwitch |\n| SimpleTwitter |\n| SimpleTwoo |\n| SimpleTypeScript |\n| SimpleUIkit |\n| SimpleUber |\n| SimpleUbisoft |\n| SimpleUbuntu |\n| SimpleUdacity |\n| SimpleUdemy |\n| SimpleUmbraco |\n| SimpleUnity |\n| SimpleUnrealEngine |\n| SimpleUnsplash |\n| SimpleUntappd |\n| SimpleUpwork |\n| SimpleV8 |\n| SimpleVK |\n| SimpleVLCMediaPlayer |\n| SimpleVSCO |\n| SimpleEvagrant |\n| SimpleVenmo |\n| SimpleVerizon |\n| SimpleViadeo |\n| SimpleViber |\n| SimpleVim |\n| SimpleVimeo |\n| SimpleVine |\n| SimpleVirb |\n| SimpleVisa |\n| SimpleVisualStudioCode |\n| SimpleVueDotJs |\n| SimpleWPEngine |\n| SimpleWattpad |\n| SimpleWeChat |\n| SimpleWeasyl |\n| SimpleWebStorm |\n| SimpleWebcomponentsDotOrg |\n| SimpleWebpack |\n| SimpleWhatsApp |\n| SimpleWhenIWork |\n| SimpleWii |\n| SimpleWiiU |\n| SimpleWikipedia |\n| SimpleWindows |\n| SimpleWire |\n| SimpleWireGuard |\n| SimpleWix |\n| SimpleWolfram |\n| SimpleWolframLanguage |\n| SimpleWolframMathematica |\n| SimpleWordPress |\n| SimpleXPack |\n| SimpleXSplit |\n| SimpleXbox |\n| SimpleXcode |\n| SimpleXero |\n| SimpleXing |\n| SimpleYCombinator |\n| SimpleYahoo |\n| SimpleYammer |\n| SimpleYandex |\n| SimpleYarn |\n| SimpleYelp |\n| SimpleYouTube |\n| SimpleZapier |\n| SimpleZeit |\n| SimpleZendesk |\n| SimpleZerply |\n| SimpleZillow |\n| SimpleZorin |\n::: -->\n",
    "updatedAt": "2019-12-17T19:01:33.987Z",
    "path": "./assets/md/icons/index.md",
    "fileName": "index",
    "href": "/docs/icons"
  },
  {
    "title": "Using with React",
    "framework": "React",
    "publish": true,
    "body": ":::\n## Import a component (allows for tree-shaking)\n:::\n\nReact `@baleada/icons` components can be imported from `@baleada/icons/react`.\n\n:::\n```js\nimport { EvaGlobe2 } from '@baleada/icons/react'\n```\n:::\n\n\n:::\n## Use a component\n:::\n\n\nAll components will render an SVG of their icon. The SVG has 4 default attributes:\n\n:::\n```html\n<svg\n  role=\"img\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 24 24\"\n  preserveAspectRatio=\"xMinYMin meet\"\n>\n  ...\n</svg>\n```\n:::\n\nThese 4 attributes are easy to override or expand—simply pass an object to the component's `attrs` prop. All of the `attrs` (including event listeners) are passed directly to the SVG.\n\n:::\n```js\nexport default function MyComponent() {\n  ...\n\n  return (\n    <SimpleGeocaching\n      attrs={{\n        preserveAspectRatio: \"none\",\n        className: \"h-4 w-4 fill-current inline-block text-blue-600\"\n      }}\n    />\n    <EvaGlobe2\n      attrs={{\n        'aria-label': \"A nifty globe icon\",\n        onClick: () => console.log('Eva icon was clicked')\n      }}\n    />\n  )\n}\n```\n:::\n",
    "updatedAt": "2019-12-17T19:01:33.988Z",
    "path": "./assets/md/icons/using-with-react.md",
    "fileName": "using-with-react",
    "href": "/docs/icons/using-with-react"
  },
  {
    "title": "Using with Svelte",
    "framework": "Svelte",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-25T20:36:04.448Z",
    "path": "./assets/md/icons/using-with-svelte.md",
    "fileName": "using-with-svelte",
    "href": "/docs/icons/using-with-svelte"
  },
  {
    "title": "Using with Vue",
    "framework": "Vue",
    "publish": true,
    "body": ":::\n## Import a component (allows for tree-shaking)\n:::\n\nAll `@baleada/icons` Vue components are [functional components](https://vuejs.org/v2/guide/render-function.html#Functional-Components). They can be imported from `@baleada/icons/vue` for local or global registration.\n\n:::\n```js\nimport { EvaGlobe2 } from '@baleada/icons/vue'\n\nexport default {\n  components: {\n    EvaGlobe2,\n  },\n  ...\n}\n```\n:::\n\n\n:::\n## Use a component\n:::\n\nAll components will render an SVG of their icon. The SVG has 4 default attributes:\n\n:::\n```html\n<svg\n  role=\"img\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 24 24\"\n  preserveAspectRatio=\"xMinYMin meet\"\n>\n  ...\n</svg>\n```\n:::\n\nThese 4 attributes are easy to override or expand—all of the component's attributes, event listeners, and class & style bindings are passed directly to the SVG.\n\n:::\n```html\n<template lang=\"html\">\n  <SimpleGeocaching\n    preserveAspectRatio=\"none\"\n    :class=\"'h-4 w-4 fill-current inline-block text-blue-600'\"\n  />\n  <EvaGlobe2\n    aria-label=\"A nifty globe icon\"\n    @click.native=\"() => console.log('Eva icon was clicked')\"\n  />\n</template>\n\n<script>...</script>\n```\n:::\n",
    "updatedAt": "2019-12-17T19:01:33.989Z",
    "path": "./assets/md/icons/using-with-vue.md",
    "fileName": "using-with-vue",
    "href": "/docs/icons/using-with-vue"
  },
  {
    "title": "What is Baleada?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Honduras's favorite food is the **baleada**—a fresh flour tortilla, spread with refried beans, then decorated with scrambled eggs, mantequilla, queso seco, avocado, or meat, and finally folded in half.\n\nYou can't have a baleada without its core ingredients and presentation (tortilla spread with refried beans and folded in half), but once those requirements are met, you can be creative and combine ingredients that suit your tastebuds.\n\nAnyway, the Baleada you're here for is **a toolkit for building web apps** (and websites). Getting down to brass tacks, Baleada offers the following types of tools:\n- UI logic\n- Composition functions (a.k.a. hooks)\n- SVG icon components\n- More to come ([see roadmap](/docs/roadmap))\n\n::: type=\"info\"\nFeeling a little fuzzy on what these terms mean? Check out the guide on [types of tools](/docs/types-of-tools) for definitions.\n:::\n\nThink of these tools as the ingredients in a savory, delectable baleada. You're encouraged to take what you want and sprinkle it into the stack you're already using to build your apps and websites. You're free to take just a few things, but if you're so inclined, you can really pile on the extras!\n\n\n:::\n## Who is Baleada designed for?\n:::\n\nBaleada is designed for developers who:\n- **Do** want to add common UI features and behaviors to their app, but **don't** want to think about implementation details.\n- **Do** value consistency and predictability in JavaScript library APIs.\n- **Do** care about performance, best practices, internationalization, accessibility, and security, but **haven't** had time to fine-tune this stuff in the past, because they've always been too busy hacking together a custom autocomplete component or another 🤬 carousel for the who-knows-how-many-th time.\n- **Do** appreciate the role React hooks and Vue composition functions play in making web dev easier and more inclusive.\n- **Do** appreciate [the benefits of using SVG over icon fonts](http://www.fullstackradio.com/47).\n- **Do** appreciate documentation that makes them hungry.\n<!-- - **Do** want a design system to govern their styles, but **don't** want their apps and sites to look like everyone else's. -->\n\nAll of Baleada's tools are copyrighted from 2019-present and licensed under the MIT license.\n",
    "updatedAt": "2019-12-17T19:01:33.990Z",
    "path": "./assets/md/index.md",
    "fileName": "index",
    "href": "/docs"
  },
  {
    "title": "What is Baleada Listenable Gestures?",
    "framework": "agnostic",
    "publish": false,
    "order": 0,
    "body": "Baleada Listenable Gestures is a collection of [factory functions](https://www.youtube.com/watch?v=ImwrezYhw4w) that return \"gesture recognizers\".\n\nThese recognizers are simply JavaScript objects with properties and methods that handle sequences of DOM events and recognize whether or not the events form a [gesture](/docs/gesture#what-is-a-gesture).\n\nUnder the hood, each function in Baleada Listenable Gestures is composed using [Baleada Gesture](/docs/gesture)'s `gesture` function and can\nEach Baleada Listenable Gestures are designed to be passed to Baleada Logic's [`Listenable`](/docs/logic/classes/Listenable) class.\n\n:::\n## A note, before you dive in\n:::\n\nBaleada Listenable Gestures was designed and written during the development of the [`Listenable`](/docs/logic/classes/listenable) class in Baleada Logic\n\n\n\n\n:::\n## Installation\n:::\n\n:::\n```bash\nnpm i @baleada/listenable-gestures\n```\n:::\n\n\n:::\n## Usage\n:::\n\nTo get started, you'll import one of the Baleada Listenable Gestures from the entry file:\n\n:::\n```js\nimport { swipe } from '@baleada/listenable-gestures'\n```\n:::\n\nThe asset you import is actually not the gesture recognizer iteself, but is actually an object that you should pass directly to the `gesture` option of the `Listenable` constructor:\n\n:::\n```js\nimport { swipe } from '@baleada/listenable-gestures'\nimport { Listenable } from '@baleada/logic'\n\nconst instance = new Listenable ('swipe', { gesture: swipe })\n\nObject.keys(swipe) // -> ['factory', 'events', 'recognized']\n```\n:::\n\nIf there's ever a scenario where you want to import one of the factory functions directly, you can access them as named exports from the `factories.js` file at the root of `@baleada/listenable-gestures`:\n\n:::\n```js\nimport { swipe } from '@baleada/listenable-gestures/factories'\n```\n:::\n\nEach factory function accepts one optional parameter: an object whose key/value pairs customize the behavior of the recognizer that the function returns.\n\n:::\n```js\nimport { taps } from '@baleada/listenable-gestures/factories'\n\nconst recognizer = taps({ minTaps: 2 }) // Recognizes a double tap\n```\n:::\n\nWhen you're using `Listenable`, pass your options object to the `gesture` property of the `listen` method's second argument.\n\n:::\n```js\nimport { taps as gesture } from '@baleada/listenable-gestures'\nimport { Listenable } from '@baleada/logic'\n\nconst taps = new Listenable ('taps', { gesture })\n\ntaps.listen(myListener, {\n  gesture: { minTaps: 2 },\n})\n```\n:::\n\n<!-- A good way to increase code clarity is to name the `Listenable` instance after the event type you're listening for. If you want to do that, simply use your import statement to change the name of the import.\n\nThis example changes `swipe` to `gesture` and uses destructuring to pass it to the `Listenable` constructor:\n\n:::\n```js\nimport { swipe as gesture } from '@baleada/listenable-gestures'\nimport { Listenable } from '@baleada/logic'\n\nconst swipe = new Listenable ('swipe', { gesture })\n\n// Your other code will be more explicit:\nswipe.listen(...)\n```\n::: -->\n\n\n\n\n\n\n:::\n## Language, compilation, browser support, and dependencies\n:::\n\nBaleada Listenable Gestures are written in modern JavaScript and compiled by [Babel](https://babeljs.io) to work in browsers that are used by more than 0.5% of global web visitors AND have had official support or updates in the past 24 months.\n\nTo allow for [tree-shaking](https://webpack.js.org/guides/tree-shaking/), Baleada Listenable Gesture's compiled code has no side effects and uses [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) instead of [`require()`](https://nodejs.org/api/modules.html#modules_require_id) and [`module.exports`](https://nodejs.org/api/modules.html#modules_module_exports).\n\nBaleada Listenable Gesture's only dependency is Baleada Gesture.\n",
    "updatedAt": "2019-12-28T07:56:31.670Z",
    "path": "./assets/md/listenable-gestures/index.md",
    "fileName": "index",
    "href": "/docs/listenable-gestures"
  },
  {
    "title": "Loader",
    "framework": "agnostic",
    "publish": false,
    "order": 0,
    "body": "Baleada Loader is an absurdly flexible tool for loading files during your site or app's build step. It was originally designed to load Markdown files using [Webpack](https://webpack.js.org/), but evolved into a package that just handles the most basic implementation details of Webpack loaders and [Rollup](https://rollupjs.org/) plugins, then lets you transform the content (String) of any source file in any way you see fit.\n\n::: type=\"info\"\nDidn't see your favorite build tool in the list? Feel free to [raise an issue](https://gitlab.com/baleada/loader/issues) and ask for support.\n:::\n\n<!-- To see a practical application of Baleada Loader, [check out how Baleada Prose uses it to load Markdown files](/docs/prose/using-with-markdown), replacing standard HTML elements with feature-rich components. -->\n\n:::\n## Installation\n:::\n\nInstall from npm:\n\n```bash\nnpm i @baleada/loader\n```\n\n:::\n## Using with Webpack\n:::\n\nBaleada Loader's Webpack loader can be imported from `@baleada/loader/webpack`, but you won't often need to import it yourself. Usually you'll just specify it as the `loader` property of a Webpack rule, like so:\n\n:::\n```js\n//webpack.config.js\nconst myTransformFunction = require('path/to/myTransformFunction')\n\nmodule.exports = {\n  //...\n  module: {\n    rules: [\n      //...\n      {\n        test: /\\.js$/, // Replace `js` with any file extension, depending on what files you're trying to load\n        loader: '@baleada/loader/webpack',\n        options: { transform: myTransformFunction }\n      }\n    ]\n  }\n}\n```\n:::\n\nAs shown above, the loader takes one option: a `transform` function. The function must return a String, and it accepts two parameters:\n\n:::\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `source` | String | The source of the file you are loading, or the output of any Webpack loaders that have already transformed your file. |\n| `context` | Object | The loader context. [See the Webpack docs](https://webpack.js.org/api/loaders/#the-loader-context) for more info. |\n:::\n\n:::\n## Using with Rollup\n:::\n\nWIP\n",
    "updatedAt": "2019-12-17T19:01:33.991Z",
    "path": "./assets/md/loader/index.md",
    "fileName": "index",
    "href": "/docs/loader"
  },
  {
    "title": "API design",
    "framework": "agnostic",
    "publish": true,
    "order": 3,
    "body": "For any individual piece of UI logic, there are plenty of ways to implement it, and plenty of packages already published that can `npm install` your troubles away.\n\nBut implementing these things yourself, or learning the APIs of disparate packages, adds **complexity and mental overhead** to engineering tasks that are usually several steps removed from the actual business logic of the app or site you're building.\n\nBaleada Logic implements all kinds of UI logic for you, which is nice! But arguably more important is the fact that Baleada Logic's classes and factories all have **predictable, intuitive APIs**. In other words, you can construct all classes and factories in the same way, you can customize their behavior in the same way, and you can access their state and methods in the same way.\n\n:::\n> Baleada Logic implements all kinds of UI logic for you, which is nice! But arguably more important is the fact that Baleada Logic's classes and factories all have **predictable, intuitive APIs**.\n:::\n\nTo accomplish that, Baleada Logic's classes and factories all follow strict rules in these specific areas:\n1. How they are **constructed**\n2. How **state and methods** are made available to you\n3. How classes & factories, their constructor options, their state, and their methods are **named**\n4. Why classes and factories provide certain state and methods\n5. Why constructors accept certain state and options\n\nThis guide explains all the core concepts, rules, and patterns that classes and factories follow. The words \"all\", \"always\", and \"never\" are displayed in bold, to emphasize the rules that apply to every single class and subclass in Baleada Logic.\n\n\n:::\n## How to construct classes and factories\n:::\n\nYou can access the functionality of **all** classes and factories by **constructing new instances** of them.\n\n:::\n```js\nconst instance = new Example(...)\n```\n:::\n\nThat `...` represents the arguments you'll pass to constructor functions. The basic arguments for class constructors differ slightly from those of subclass constructors. Details are explained below.\n\n\n:::\n### Class constructors\n:::\n\n\n**All** class constructors accept two parameters:\n1. A piece of state (i.e. data—strings, arrays, objects, DOM elements, etc.),\n2. An `options` object.\n\nThe `state` parameter is **always** required, and the `options` parameter is **always** optional. Given these parameters, the constructor **always** returns an instance of itself, which **always** takes the form of an Object with state and methods.\n\n:::\n```js\nconst instance = new Example(state[, options])\n\ntypeof instance // -> 'object'\n```\n:::\n\nThe `state` parameter is **always** used to pass a piece of state whose core functionality will be enhanced by the class. The `options` parameter is **always** an Object that serves as a catch-all for **all** optional parameters that affect how a class behaves.\n\n:::\n```js\nconst instance = new Example(state, {\n  optionalBooleanParam: true,\n  optionalStringParam: 'baleada',\n  optionalFunctionParam: thing => doThe(thing)\n})\n```\n:::\n\n\n:::\n### Factory functions\n:::\n\nFactory functions accept two parameters:\n1. The piece of state that will be augmented with a new method prototype will be extended by the subclass.\n2. An `options` object.\n\nThe `state` parameter is **always** required, and the `options` parameter is **always** optional. Given these parameters, the constructor **always** returns the original `state` in Object form, with one new method added.\n\nFor example, if you pass a String, the factory will return a String object, just like you would get if you passed your string to `new String()`.\n\n:::\n```js\n// This example factory accepts a string\nconst instance = example('baleada')\n\ninstance instanceof String // -> true\ntypeof instance === 'string' // -> false\n\ninstance // -> { 0: \"b\", 1: \"a\", 2: \"l\", 3: \"e\", 4: \"a\", 5: \"d\", 6: \"a\", length: 7}\n`${instance}` // -> 'baleada'\ninstance.toString() // -> 'baleada'\n```\n:::\n\n\n:::\n## How state and methods are made available to you\n:::\n\n:::\n### Class state and methods\n:::\n\nClasses take the form of JavaScript Objects, and **all** state and methods are accessible through the properties of those objects.\n\n:::\n```js\nconst instance = new Example(state)\n\ninstance.exampleState // Access state through properties\ninstance.exampleMethod() // Access methods through properties\n```\n:::\n\nClasses methods **always** return the instance through which they were called. The benefit of this is that you can use method chaining if needed.\n\n:::\n```js\nconst instance = new Example(state)\n\ninstance.exampleMethod() // -> returns instance\ninstance\n  .exampleMethod()\n  .anotherMethod()\n  .yetAnotherMethod() // -> Works 👍 and returns instance\n```\n:::\n\n\n\n\nClasses **always** store a shallow copy of their constructors' state in a public property named after the state's type (e.g. `string`, `array`, etc.).\n\nClasses also **always** have a public method you can use to assign a new value to that public property. The method follows a naming convention of `set<PropertyName>` (e.g. `setString`, `setArray`, etc.).\n\n:::\n```js\n// The Searchable class's constructor accepts an Array\nconst instance = new Searchable(['Baleada', 'Logic', 'Composition', 'Icons'])\n\ninstance.array // -> ['Baleada', 'Logic', 'Composition', 'Icons']\ninstance.setArray(['tortilla', 'beans', 'egg', 'avocado']) // -> returns instance\ninstance.array  // -> ['tortilla', 'beans', 'egg', 'avocado']\n```\n:::\n\nSome classes, particularly those that were designed to capture input from your end users, have additional public properties. Those classes also **always** have public methods you can use to assign a new value to the additional public properties, and those methods follow the same  `set<PropertyName>` naming convention.\n\n:::\n```js\n// The Completeable class's constructor accepts a String\nconst instance = new Completeable('Baleada')\n\ninstance.string // -> 'Baleada'\ninstance.location // -> 0\n\ninstance.setString('tortilla') // -> returns instance\ninstance.setLocation('3') // -> returns instance\n```\n:::\n\n\nNote that public properties are writeable—it's possible to assign values to them directly. But, in some classes, certain side effects need to be performed after writing to public properties, to make sure everything keeps working properly. When this is the case, the classes' `set<PropertyName>` methods will perform **all** necessary side effects, and you won't have to think about them. Because of that, it's **always** recommended that you use the `set<PropertyName>` methods instead of writing to public properties directly.\n\n\n:::\n```js\n// The Searchable class's constructor accepts an array of search candidates\nconst instance = new Searchable(['Baleada', 'toolkit'])\n\ninstance.candidates // -> ['Baleada', 'toolkit']\ninstance.trie // -> an object representing the search trie\n\n/*\n * It's possible to write to instance.candidates directly.\n * However, if you pass a new array of candidates this way, Searchable\n * will be stuck using the old trie:\n */\ninstance.candidates = ['tortilla', 'beans'] // -> It won't throw any errors\ninstance.trie // -> The old trie representing ['Baleada', 'toolkit']\n\n/*\n * If you use instance.setCandidates instead, the appropriate side effect\n * (updating instance.trie) is taken care of by Searchable.\n */\ninstance.setCandidates(['tortilla', 'beans'])\ninstance.candidates // -> ['tortilla', 'beans']\ninstance.trie // -> a new trie representing ['tortilla', 'beans']\n```\n:::\n\n\nOutside of `set<PropertyName>` methods, classes **never** write to their own public properties.\n\nHowever, some classes do have public methods that create mutated versions of one or more public properties' values. These classes **always** accept an `on<Method>` option, where `<Method>` is the name of the public method that mutates the values. The `on<Method>` option is **always** a function gets called after you call `instance.<Method>`, and `on<Method>` **always** accepts two parameters: the mutated value, and the instance itself (i.e. `this`).\n\nInstead of writing the mutated value to its own public property after you call `instance.<Method>`, the class will pass the mutated value as the first argument of your `on<Method>` function.\n\n\n:::\n```js\nlet totalStringCompletions = 0\n\nconst instance = new Completeable('Baleada', {\n  onComplete: (completedString, instance) {\n    instance.setString(completedString)\n    totalStringCompletions++\n  }\n})\n\ninstance.string // -> 'Baleada'\ntotalStringCompletions // -> 0\n\n/*\n * When you call instance.complete, the Completeable instance will create\n * a mutated version of instance.string. Then, it will call your\n * onComplete function, passing the mutated version of instance.string\n * AND itself as the two arguments.\n *\n * In this example, your onComplete function will set instance.string\n * to the new value and will mutate the external variable,\n * totalStringCompletions.\n */\ninstance.complete('Baleada: a toolkit for building web apps')\ninstance.string // -> 'Baleada: a toolkit for building web apps'\ntotalStringCompletions // -> 1\n```\n:::\n\nThese `on<Method>` functions are a great way to hook into state changes and run code just before or just after the state change actually happens. However, for ease of use, **all** classes that accept `on<Method>` functions already have sensible default functions that set state for you.\n\n:::\n```js\nconst instance = new Completeable('Baleada') // Completeable has a default onComplete function defined for you\n\ninstance.string // -> 'Baleada'\n\n/*\n * When you call instance.complete, the Completeable instance will create\n * a mutated version of instance.string. Then, it will call its default\n * onComplete function, passing the mutated version of instance.string\n * AND itself as the two arguments.\n *\n * Completeable's default onComplete function will set instance.string\n * to the new value.\n */\ninstance.complete('Baleada: a toolkit for building web apps')\ninstance.string // -> 'Baleada: a toolkit for building web apps'\n```\n:::\n\n\nAll classes also have one or more public [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get). When you access these getters, they compute and return state that is useful for building certain UI features, but is not part of the core functionality or benefit of the class.\n\n:::\n```js\nconst instance = new Completeable(\n  'Baleada: a toolkit',\n  { segmentsFromDivider: true } // An option customizing how the getter works\n)\n\ninstance.segment // -> 'toolkit'\ninstance.segment = 'Baleada' // Doesn't work, since instance.segment is a getter\n```\n:::\n\nSome classes don't have any methods that create mutated versions of the values in their public properties. These classes **always** have one or more other public methods that expose their core functionality. These methods **never** have `on<Method>` functions associated with them, because they aren't creating any mutated state, so there is nothing valuable to pass to the functions.\n\n:::\n```js\n// The Animateable class's constructor accepts an array of keyframes\nconst instance = new Animateable(myKeyframes, myAnimationOptions)\n\ninstance.play() // -> Plays an animation and returns the instance, but does nothing else\n```\n:::\n\nSome classes have side effects that need to be cleaned up in order to avoid memory leaks. **All** of these classes have a public `stop` method that you can use to clean up.\n\n:::\n```js\n// Listenable can be used to listen to DOM events, media queries, Observer entries, and window idle periods.\nconst instance = new Listenable(myEventType)\n\ninstance.listen(myCallback) // -> Adds event listeners, connects observers, etc.\n\ninstance.stop() // -> Removes all listeners, disconnects all observers, etc.\n```\n:::\n\n::: type=\"info\"\nIf you use [Baleada Composition](/docs/composition) to bring Balaeda Logic into a React, Vue, or Svelte component, all side effects will be cleaned up for you automatically at the end of the component's lifecycle.\n\nSo, when you're using Baleada Composition, you never need to call the `stop` method unless you want to clean up side effects somewhere in the middle of a component's lifecycle.\n:::\n\n\n\n\n:::\n### Factory state and methods\n:::\n\nBaleada Logic's factories **never** have public state; they **always** have one method.\n\nFactories' public methods **never** mutate the original state passed to their constructors. They **always** follow three main steps:\n1. Create a mutated version of the original state\n2. Pass it to their own constructor along with any options you originally passed\n3. Return the new instance\n\nThus, factories always return a new instance of themselves, respecting any original options you passed.\n\n:::\n```js\n// Renamable is a subclass of Map that allows the map to easily rename one of its keys\nconst originalMap = [['one', 'value'], ['two', 'value']],\n      instance = new Renamable(originalMap),\n      renamedMap = instance.invoke('one', 'uno')\n\noriginalMap // -> [['one', 'value'], ['two', 'value']]\nrenamedMap // -> [['uno', 'value'], ['two', 'value']]\nrenamedMap instanceof Renamable // -> true\n```\n:::\n\n\n:::\n## Why classes & factories provide certain state and methods\n:::\n\nBaleada Logic follows a consistent process for determing which state and methods are provided by classes:\n1. Identify one action or several related actions that would be useful in a user interface. These actions become methods on the class.\n1. Identify the piece(s) of state that the action will be performed on. In other words, answer the question, \"If this method were a standalone function, what would be a required argument?\" Each answer to that question becomes a public, writeable property on the class.\n2. Identify the piece(s) of state that would be useful for building certain UI features with the class' methods and public properties, but shouldn't be considered part of the core functionality or benefit of the class. Each identified piece of state becomes a getter on the class.\n\n\n\n:::\n## Why constructors accept certain state types and options\n:::\n\n:::\n## Constructors' state types\n:::\n\nBaleada Logic uses a sentence template to decide what state type (e.g. String, Array, HTMLElement, etc.) should be accepted by a constructor:\n\n:::\n```\nA `<state type>` can be `<action>`ed (by `<action arguments>`).\n```\n:::\n\nFor example, the `Searchable` class' core action is to search/fuzzy search an array of search candidates. The `Searchable` constructor's `state` parameter is the array of candidates, and the class has a `search` method that accepts a search query as its only argument. This fits into the sentence template nicely:\n\n:::\n```\n**Search candidates** can be **searched** by a **query**.\n```\n:::\n\nSome classes and factories have core actions that don't take arguments—in those cases, the last part of the sentence template is omitted. Take the `markupable` factory for example:\n\n:::\n```text\n**Markdown** (String) can be **marked up**.\n```\n:::\n\nAnd some classes have core actions that are actually private methods on the class, with more specific public methods that call the core private method under the hood. The `Animateable` class is a great example—it's constructor accepts an array of keyframes, and in order to animate those keyframes, it internally calls a private `animate` method when you call one of its more specific public methods: `play`, `reverse`, `seek`, or `restart`.\n\nThese types of classes still use that core action in their sentence template, even though it's accessed via a private method that you'll never use:\n\n:::\n```text\n**Keyframes** (Array) can be **animated**.\n```\n:::\n\n\n\nThis sentence template ensures that **all** classes' and factories' methods are affordances. In other words, methods tell you what you can do with a given type of state, rather than what that type of state can do to itself or other things.\n\nIn the documentation for each individual library and subclass, you can find the filled-out sentence template, explaining why each class and subclass accepts its specific state type.\n\n\n::: type=\"info\"\nThe inspiration and motivation for this sentence template came from [Adam Wathan's \"Resisting Complexity\" talk](https://www.youtube.com/watch?v=dfgtKb-VpRk).\n:::\n\n:::\n## Constructors' options\n:::\n\nConstructors only accept options that:\n- Initialize public properties\n- Customize the behavior of getter functions\n- Pass the `on<Method>` callback functions described earlier in this article\n\nConstructors **never** accept options that customize the behavior of public methods, they **always** allow those options to be passed to the method itself as a parameter.\n\n\n:::\n## Naming conventions\n:::\n\nClasses and factories are named after their core action, followed by `able`. Class names have an uppercased first letter, and factory names are all lowercase.\n\nHere are a few examples:\n\n::: ariaLabel=\"Comparison of classes' and factories' core actions and names\"\n| Core action | Type | Name |\n| --- | --- | --- |\n| search | class | `Searchable` |\n| listen | class | `Listenable` |\n| navigate | class | `Navigateable` |\n| copy | class | `Copyable` |\n| reorder | factory | `reorderable` |\n| delete | factory | `deleteable` |\n:::\n\nNote that in correct English grammar, the `-able` form of a word is not always this simple. There are a number of ways the grammar can be more complex:\n- Often (but not always), when a word ends in `e`, the `e` is ommitted before adding `able`\n- Words that end in `y` usually change the `y` to an `i` before adding `able`\n- Some words omit several letters from the end of the word before adding `able`\n\nInstead of relying on you to know all these rules of English grammar, Baleada Logic simply breaks them in favor of consistency and predictability. In Baleada Logic classes and factories, the name is **always** just the core action followed by `able`—no strange word modification, no guessing about whether or not the `e` is excluded before `able`, no replacing `y` with `i`, etc.\n\nIn the table below, you can explore some examples of core actions, class/factory names, and their proper English counterparts:\n\n::: ariaLabel=\"Comparison of classes' and factories' core actions, names, and proper English counterparts\" classes=\"wide-4\"\n| Core action | Class/factory name | Proper English name | Notes |\n| --- | --- | --- | --- |\n| search | `Searchable` | Searchable | Easy one! The proper English version is the same. |\n| copy | `Copyable` | Copiable | Proper English changes `y` to `i` before `able` 🤢 |\n| delete | `deleteable` | deletable | Proper English removes the `e` before `able` 😠 |\n| rename | `renameable` | renameable | Oh, this one ends in `e` too? Proper English says \"f*ck it, leave it in\" 🤬 |\n| navigate | `Navigateable` | Navigable | Proper English removes `ate` and just uses the stem `Navig` before adding `able` 🤮 |\n| reorder | `reorderable` | reorderable | Phew, another easy one! Proper English plays nice here. |\n:::\n\nIn conclusion, English grammar is annoying, so Baleada Logic ignores it and names everything using the `<core action>able` convention.\n\n:::\n> Proper English grammar is annoying. Baleada Logic's naming convention breaks its rules in favor of simplicity, consistency, and predictability.\n:::\n",
    "updatedAt": "2020-03-01T04:14:26.677Z",
    "path": "./assets/md/logic/api-design.md",
    "fileName": "api-design",
    "href": "/docs/logic/api-design"
  },
  {
    "title": "Animateable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "`Animateable` is a class that enriches an array of keyframes, allowing it to:\n- Compute intermediate frames between keyframes at a rate of 60 frames per second, passing frame data to a callback function specified by you\n- Customize the animation by giving it a duration, a timing function, and a number of iterations it should repeat, and indicating whether it should alternate or just progress in one direction\n- Store the number of completed iterations\n- Play, pause, or reverse the animation\n- Seek to a specific frame\n- Restart the animation while it's playing or reversing\n- Store the status of the animation (e.g. `'playing'`, `'reversing'`, `'paused'`, etc.)\n- Store the elapsed time, remaining time, and time progress of the animation\n\nIn other words, `Animateable` implements all the main features of [CSS `@keyframes` animations](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) in JavaScript, then adds lots of methods to help you control the animation itself.\n\n`Animateable` depends on:\n- [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) and [`cancelAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame)\n- [BezierEasing](https://github.com/gre/bezier-easing)\n- [The chroma.js `mix` method](https://vis4.net/chromajs/#chroma-mix) (imported from the light version of chroma.js, so it has a lower impact on bundle size.)\n\n\n:::\n## Construct an `Animateable` instance\n:::\n\nTo construct an `Animateable` instance (Object), use the `Animateable` constructor, which takes two parameters:\n\n::: ariaLabel=\"Animateable constructor parameters\" classes=\"wide-4\"\n| Parameter | Type | Required | Description |\n| --- | --- | --- | --- |\n| `keyframes` | Array | yes | Passes the keyframes that will be made animatable. See the [How to format keyframes](#how-to-format-keyframes) section for more guidance on formatting the array. |\n| `options` | Object | no | Passes options for the `Animateable` instance. See the [`Animateable` constructor options](#Animateable-constructor-options) section for more guidance. |\n:::\n\n\n:::\n```js\nconst instance = new Animateable(keyframes[, options])\n```\n:::\n\n\n:::\n### How to format keyframes\n:::\n\n`keyframes` is an Array, and each individual keyframe in the array is an Object. Keyframe objects can have the following properties:\n\n::: ariaLabel=\"Animateable keyframe format\" classes=\"wide-4\"\n| Property | Type | Required | Description |\n| --- | --- | --- | --- |\n| `progress` | Number | yes | <p>A number between `0` and `1` indicating the time through the animation sequence at which the keyframe occurs.</p><p>The `progress` property is exactly like percentage progress in CSS `@keyframe` animations, except that it's between `0` and `1` instead of `0` and `100`.</p> |\n| `data` | Object | yes | <p>Specifies properties and values for the keyframe, which `Animateable` will reference when computing frames between keyframes.</p><p>Each property can be any valid Object property. Properties are **not** required to be valid CSS properties.</p><p>Values can be Numbers, Strings, or Arrays. See the [How data types are animated](#How-data-types-are-animated) section for more guidance on how to format your values so that they get animated properly.</p> |\n| `timing` | Array | no | <p>Customizes the timing function used to compute frame data as progress is made toward the next keyframe.</p><p>See the [How to format timing](#how-to-format-timing) section for more guidance on formatting the `timing` array.</p><p>Just like the [`animation-timing-function` CSS property](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function), any `timing` specified on the last keyframe will have no effect.</p><p>If `timing` is not specified on the keyframe itself, `Animateable` will use the default timing function, which can be customized using the `timing` option in the constructor. See the [`Animateable` constructor options](#Animateable-constructor-options) section for more info about the global timing function.</p> |\n:::\n\n::: type=\"info\"\nYou don't have to order `keyframes` by `progress`. For example, you can list all the keyframes that animate a specific property, all the way from `progress: 0` to `progress: 1`. Then, in the same `keyframes` array, just list out the next set of keyframes that animate a different property from `progress: 0` to `progress: 1`.\n\nIt's also perfectly fine if the same `progress` value appears in multiple different keyframes in the array.\n\nInternally, `Animateable` sorts and analyze all keyframes to extract individual keyframe-to-keyframe property transitions, so feel free to organize keyframes in a way that makes sense to you!\n:::\n\n\n:::\n#### How data types are animated\n:::\n\nValues inside the `data` object of each keyframe can be Numbers, Strings, or Arrays. See the table below for more guidance on how each data type is handled when `Animateable` computes animation frames.\n\n::: ariaLabel=\"How data values are animated\"\n| When the value is a... | `Animateable`... |\n| --- | --- |\n| Number | Computes a number between the numbers of two consecutive keyframes, proportional to the time progress of the animation. |\n| String | <p>Strings are assumed to be colors in [hex](https://en.wikipedia.org/wiki/Web_colors#Hex_triplet), [hsl](https://en.wikipedia.org/wiki/HSL_and_HSV), [rgb](https://en.wikipedia.org/wiki/RGB_color_model), or [lab](https://en.wikipedia.org/wiki/CIELAB_color_space) format (you can use different formats across keyframes, even if it's the same property on your `data` object).</p><p>`Animateable` uses [the chroma.js `mix` method](https://vis4.net/chromajs/#chroma-mix) with `lrgb` color interpolation to compute a color between the colors of two consecutive keyframes. Just like with numbers, the computed color is proportional to the time progress of the animation.</p> |\n| Array | <p>Determines the lengths of the arrays in two consecutive keyframes, then computes a new length between those two lengths (exactly like it would compute any other number). Finally, `Animateable` [slices](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) the array, starting from the `0` index and stopping at the computed index.</p><p>Just like with numbers and colors, the new length of the array is proportional to the time progress of the animation.</p> |\n:::\n\nTo ensure that all of these computations are proportional to the time progress of the animation, `Animateable` uses [BezierEasing](https://github.com/gre/bezier-easing) to compute the actual animation progress for any given time progress.\n\n\n::: type=\"warning\"\nEach individual property in your keyframes' `data` objects **must** contain the same data type across all keyframes.\n\nIt's not possible, for example, to set `myProperty` to a String in the first keyframe and a Number in the next keyframe. All values for `myProperty` must be the same data type.\n:::\n\n\n::: type=\"info\"\n**Why would I want to animate an array?**\n\nArray animations are designed to be an easy way to achieve the \"typewriter\" effect in your animation.\n\nSimply pass an empty array to the first keyframe (usually at progress `0`), and in subsequent keyframes, pass a string [split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) by empty quotes.\n\n`Animateable` will progressively lengthen your array throughout the animation, adding more characters onto the end of it. In each frame of the animation, you can [join](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join) the array to rebuild the string, and set it as the `textContent` of a DOM element, and it will look like your string is being typed out across the screen.\n\nAdd custom timing functions as you see fit to make the \"typewriter\" feel more natural. \n:::\n\n\n\n:::\n#### How to format timing\n:::\n\nIn individual keyframes and in the `Animateable` constructor's `options` object, the `timing` property's value should be an Array of two Objects.\n\nBoth objects must have an `x` and a `y` property whose value must be a number greater than or equal to `0` and less than or equal to `1`.\n\nFor example:\n\n:::\n```js\n// This timing array produces the easeInOutQuad curve \n// from easings.net\n[\n  { x: 0.455, y: 0.03 },\n  { x: 0.515, y: 0.955 },\n]\n\n```\n:::\n\nThose two objects specify the x and y coordinates for the two control points on an easing curve. \n\n\n::: type=\"info\"\nYou can use [easings.net by Andrey Sitnik and Ivan Solovev](https://easings.net/en) to find control point coordinates for popular easing curves, or use [cubic-bezier by Lea Verou](https://cubic-bezier.com/) to design control points for your own custom easing curve.\n:::\n\n\n\n:::\n### `Animateable` constructor options\n:::\n\n::: ariaLabel=\"Animateable constructor options\" classes=\"wide-4 wide-6\"\n| Option | Type | Default | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- | --- |\n| `duration` | Number | `0` | Indicates the duration in milliseconds of the animation. | N/A | N/A |\n| `timing` | Array | `[{x:0,y:0},{x:1,y:1}]` | <p>Customizes the global timing function used by `Animateable` to compute values between frames. The default timing function is linear.</p><p>See the [How to format timing](#how-to-format-timing) section for more guidance on formatting the `timing` array.</p> | N/A | N/A |\n| `iterations` | Number, Boolean | `1` | <p>Indicates the number of iterations the animation will repeat when playing or reversing.</p><p>The minimum is `1`, and you can pass `true` to make the animation iterate infinitely.</p> | N/A | N/A |\n| `alternates` | Boolean | `false` | <p>Indicates whether or not the animation will alternate back and forth, or only proceed in one direction.</p><p>When `alternates` is `true`, each full back-and-forth cycle is considered 1 iteration.</p> | N/A | N/A |\n:::\n\n\n:::\n## Access state and methods\n:::\n\nThe constructed `Animateable` instance is an Object, and state and methods can be accessed via its properties:\n\n\n::: ariaLabel=\"Animateable state and methods\" classes=\"wide-3 wide-5\"\n| Property | Type | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- |\n| `keyframes` | Array | A shallow copy of the `keyframes` array passed to the constructor | N/A | N/A |\n| `status` | Getter | See return value | N/A | Indicates the current status (String) of the `Animateable` instance. See the [How methods affect status, and vice-versa](#how-methods-affect-status-and-vice-versa) section for more information. |\n| `iterations` | Getter | See return value | N/A | The number of iterations (Number) that the animation has completed. |\n| `request` | Getter | See return value | N/A | The request ID (`long` integer) returned by [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame). |\n| `time` | Getter | See return value | N/A | An Object with two keys: `elapsed` and `remaining`. Both keys' values are numbers indicating the time elapsed and time remaining in milliseconds. |\n| `progress` | Getter | See return value | N/A | <p>An Object with two keys: `time` and `animation`. Both keys' values are numbers between `0` and `1` indicating the time progress and animation progress of the animation.</p><p>In other words, `progress.time` and `progress.animation` are the x and y coordinates of the current point on the global timing function's easing curve.</p> |\n| `setKeyframes(keyframes)` | Function | Sets the `Animateable` instance's `keyframes` | The new `keyframes` (Array) | The `Animateable` instance |\n| `play(callback)` | Function | Starts the animation, progressing forward. | <p>`play` accepts a callback function to handle individual frames. Your callback will be called 60 times per second and will receive the current frame as its only argument.</p><p>See the [How to handle frames](#how-to-handle-frames) section for more guidance.</p> | The `Animateable` instance. |\n| `reverse(callback)` | Function | Starts the animation, progressing backward. | <p>`reverse` accepts a callback function to handle individual frames. Your callback will be called 60 times per second and will receive the current frame as its only argument.</p><p>See the [How to handle frames](#how-to-handle-frames) section for more guidance.</p> | The `Animateable` instance. |\n| `pause()` | Function | Pauses the animation. | None | The `Animateable` instance. |\n| `seek(progress, callback)` | Function | Starts the animation, progressing forward. | <p>`seek` Accepts two parameters: a time progress to seek to, and a callback function to handle the frame(s) that will be computed.</p><p>The `progress` parameter is always required, but the `callback` is only required if the animation is not currently playing or reversing.</p> | The `Animateable` instance. |\n| `restart()` | Function | <p>Restarts the animation, using the same `callback` that was previously passed to `play` or `reverse` to handle frames.</p><p>`restart` only has an effect if the animation is currently playing or reversing.</p> | Callback function. | The `Animateable` instance. |\n| `stop()` | Function | Cancels the animation, stopping it in its tracks. | None | The `Animateable` instance. |\n:::\n\n\n:::\n### How methods affect status, and vice-versa\n:::\n\nEach `Animateable` instance maintains a `status` property that allows it to take appropriate action based on the methods you call, in what order you call them, and when you call them.\n\nAt any given time, `status` will always be one (and only one) of the following values:\n- `'ready'`\n- `'playing'`\n- `'played'`\n- `'reversing'`\n- `'reversed'`\n- `'paused'`\n- `'sought'`\n- `'stopped'`\n\nThere's a lot of complexity involved in the way each `status` is achieved (it's affected by which methods you call,in what order you call them, and exactly when you call them), but you likely will never need to worry about that. `status` is available to you if you feel you need it, but for all intended use cases, it's an implementation detail, and you can ignore it.\n\nThe only thing you may want to be aware of is how `status` affects your ability to call certain methods—some methods can be called at any time, and some can only be called when `status` has a specific value.\n\nThe table below has a full breakdown:\n\n::: ariaLabel=\"How status affects methods\"\n| Method | Can be called when `status` is... |\n| --- | --- |\n| `setKeyframes` | Anything |\n| `play` | Anything except `playing` |\n| `reverse` | Anything except `reversing` |\n| `pause` | `playing` or `reversing` |\n| `seek` | Anything |\n| `restart` | `playing` or `reversing` |\n| `stop` | Anything |\n:::\n\nOr, just remember:\n- You can't `play` while the animation is already playing, and likewise, you can't `reverse` while the animation is already reversing.\n- You can only `pause` and `restart` while the animation is playing or reversing\n- You can `setKeyframes`, `seek`, and `stop` at any time. Just remember that `setKeyframes` will always `stop` the animation, and if you call `seek` while an animation is progressing, the animation will continue progressing after it seeks to the timestamp you specified.\n\n::: type=\"info\"\nIf you call a method when it's not supposed to be called, it won't cause any errors, it will simply have no effect on the animation.\n:::\n\n::: type=\"info\"\nAll methods always return the `Animateable` instance (i.e. `this`), regardless of `status`.\n:::\n\n\n:::\n### How to handle frames\n:::\n\nFinally, the good stuff!\n\nThe first step to handling frames is to pass a callback function to the `play`, `reverse` or `seek` methods when you call them. `Animateable` will call that function at a rate of 60 frames per second, passing the current frame as the first argument.\n\nEach frame is simply an Object with a `data` property. The `data` property's value is also an Object, containing all the properties from your `keyframes` alongside their current value in the animation.\n\nFor a simple example, imagine you passed these keyframes:\n\n:::\n```js\n[\n  {\n    progress: 0,\n    data: { myProperty: 0 }\n  },\n  {\n    progress: 1,\n    data: { myProperty: 100 }\n  }\n]\n```\n:::\n\nAfter you call the `play` method, the first frame for your callback function would look like this:\n\n:::\n```js\n{\n  data: { myProperty: 0 }\n}\n```\n:::\n\nAssuming you're using the default linear timing function, this is the frame your callback function would receive exactly halfway through the animation:\n\n:::\n```js\n{\n  data: { myProperty: 50 }\n}\n```\n:::\n\nAnd this is the last frame your callback would receive:\n\n:::\n```js\n{\n  data: { myProperty: 100 }\n}\n```\n:::\n\nSo what should you do with that frame inside your callback function? The intention is that you'll assign styles to an element, given the frame data.\n\nTake this callback function for example:\n\n:::\n```js\nconst el = document.querySelector('#el')\n\nfunction handleFrame (frame) {\n  el.style.transform = `translateX(${frame.data.myProperty}%)`\n}\n```\n:::\n\nThat callback function translates an element to the right by a percentage value determined by your frame data. As the animation progresses, the element will move from `0%` to `100%`.\n\nIn the same callback function, you could set additional styles with the exact same frame data, if you wanted:\n\n:::\n```js\nconst el = document.querySelector('#el')\n\nfunction handleFrame (frame) {\n  el.style.transform = `translateX(${frame.data.myProperty}%)`\n  el.style.backgroundColor = `rgb(255, 255, ${frame.data.myProperty})`\n}\n```\n:::\n\nThat callback function would move the element to the right and steadily change its background color at the same time.\n\nNote that if you have multiple unique properties in your `keyframes`, every property will be included in every frame's data.\n\nTake these keyframes for example:\n\n:::\n```js\n[\n  // translateX\n  {\n    progress: 0,\n    data: { translateX: 0 }\n  },\n  {\n    progress: 1,\n    data: { translateX: 100 }\n  },\n\n  // blueChannel (of rgb color)\n  {\n    progress: 0.5,\n    data: { blueChannel: 0 }\n  },\n  {\n    progress: 1,\n    data: { blueChannel: 255 }\n  },\n]\n```\n:::\n\nGiven those keyframes, and assuming you're still using the default linear timing function, here's the frame you would receive when the animation is 1/4 of the way through:\n\n:::\n```js\n{\n  data: {\n    translateX: 25,\n    blueChannel: 0,\n  }\n}\n```\n:::\n\nHere's what you would get when the animation is halfway through:\n\n:::\n```js\n{\n  data: {\n    translateX: 50,\n    blueChannel: 0,\n  }\n}\n```\n:::\n\nAnd here's what you would get when the animation is 3/4 of the way through:\n\n:::\n```js\n{\n  data: {\n    translateX: 75,\n    blueChannel: 127.5,\n  }\n}\n```\n:::\n\nThe important thing to remember is that all properties are included in every frame, even if their value doesn't change, and regardless of how your keyframes are ordered and organized.\n\nAnd that covers all of the basic concepts! But what we haven't covered yet is how to handle strings and arrays that you pass to your keyframes.\n\nAs explained in the [How data types are animated](#How-data-types-are-animated) section, strings are always assumed to be colors. So, you can set them to any color property on an element:\n\n:::\n```js\nconst el1 = document.querySelector('#el1'),\n      el2 = document.querySelector('#el2'),\n      keyframes = [\n        // white to red\n        {\n          progress: 0,\n          data: { whiteToIndigo: \"#fff\" },\n        },\n        {\n          progress: 1,\n          data: { whiteToIndigo: 'hsl(246.8, 60.8%, 60%)' }\n        },\n\n        // red to white\n        {\n          progress: 0,\n          data: { indigoToWhite: 'hsl(246.8, 60.8%, 60%)' },\n        },\n        {\n          progress: 1,\n          data: { indigoToWhite: '#fff' }\n        },\n      ]\n\nfunction handleFrame ({ data: { whiteToIndigo, redToWhite } }) { // Use destructuring! It's awesome.\n  el1.style.color = redToWhite\n  el1.style.backgroundColor = whiteToIndigo\n\n  el2.style.color = whiteToRed\n  el2.style.backgroundColor = redToWhite\n}\n```\n:::\n\nNote that you don't have to use the same color format between keyframes—you can freely mix and match hex, hsl, rgb, and lab colors\n\n\nArrays are primarily intended to be used to achieve the \"typewriter\" affect, although there are probably other cool things you can do with them.\n\nHere's an example of how the typewriter effect would work:\n\n:::\n```js\nconst el1 = document.querySelector('#el1'),\n      keyframes = [\n        // write 'Baleada'\n        {\n          progress: 0,\n          data: { word: [] },\n        },\n        {\n          progress: 1,\n          data: { word: 'baleada'.split('') } // Much easier to split the string instead of write the array manually\n        },\n      ]\n\nfunction handleFrame ({ data: { word } }) {\n  el1.style.textContent = word.join('')\n}\n```\n:::\n\nGiven those keyframes and that frame handler, your `Animateable` instance would progressively change the text content of your element, making it look like the word \"Baleada\" is being typed across the screen.\n\n\n\n:::\n## Further resources\n:::\n\n- [Motion & Playfulness](https://vimeo.com/282452432), a talk by [Benjamin De Cock](https://twitter.com/bdc)\n\n\n:::\n## API design compliance\n:::\n\n::: ariaLabel=\"A table showing Animateable's API design compliance\"  classes=\"wide-1 wide-3\"\n| Spec | Compliance status | Notes |\n| --- | --- | --- |\n| Access functionality by constructing an instance | <ApiDesignSpecCheckmark /> |  |\n| Constructor accepts two parameters: a piece of state,and an `options` object. | <ApiDesignSpecCheckmark /> |  |\n| Takes the form of a JavaScript Object | <ApiDesignSpecCheckmark /> |  |\n| State and methods are accessible through properties | <ApiDesignSpecCheckmark /> |  |\n| Methods always return the instance | <ApiDesignSpecCheckmark /> |  |\n| Stores a shallow copy of the constructor's state in a public property named after the state's type | <ApiDesignSpecCheckmark /> | `keyframes`  |\n| Has a public method you can use to assign a new value to each public property | <ApiDesignSpecCheckmark /> | `setKeyframes` |\n| Outside of the methods listed above, it never writes to its own public properties. | <ApiDesignSpecCheckmark /> |  |\n| Has one or more public getters | <ApiDesignSpecCheckmark /> | `status`, `iterations`, `request`, `time`, `progress` |\n| Has one or more public methods that expose core functionality | <ApiDesignSpecCheckmark /> | `play`, `reverse`, `pause`, `seek`, `restart`, `stop` |\n| These methods either don't create mutated state or emit mutated state through an `on<Method>` function | <ApiDesignSpecCheckmark /> |  |\n|  Either has no side effects or has side effects that can be cleaned up with a `stop` method | <ApiDesignSpecCheckmark /> |  |\n| Uses the sentence template to decide what state type should be accepted by a constructor | <ApiDesignSpecCheckmark /> | \"Keyframes can be animated.\" |\n| Constructor does not accept options that only customize the behavior of public methods, it allows those options to be passed to the method itself as a parameter. | <ApiDesignSpecCheckmark /> | |\n:::\n",
    "updatedAt": "2020-02-21T07:01:38.421Z",
    "path": "./assets/md/logic/classes/Animateable.md",
    "fileName": "Animateable",
    "href": "/docs/logic/classes/Animateable"
  },
  {
    "title": "Completeable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "`Completeable` is a class that enriches a string, allowing it to:\n  - Store a current index-based location\n  - Extract a segment of itself\n  - Replace the segment or the full string with a more complete string\n\n`Completeable` is written in vanilla JS with no dependencies.\n\n::: type=\"danger\"\nDocumentation for `Completeable` is still in progress.\n:::\n\n\n<!-- :::\n## Construct a Completeable instance\n:::\n\nTo construct a Completeable instance (Object), use the Completeable constructor, which takes two parameters:\n\n:::\n\n| Parameter | Type | Required | Description |\n| --- | --- | --- | --- |\n| `string` | String | yes | Passes the string that will be made completable. |\n| `options` | Object | no | Passes options for the Completeable instance. See the [Completeable constructor options](#Completeable-constructor-options) section for more guidance. |\n\n:::\n\n\n:::\n```js\nconst instance = new Completeable(string[, options])\n```\n:::\n\n\n:::\n### Completeable constructor options\n:::\n\n:::\n| Option | Type | Default | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- | --- |\n| `segmentsFromDivider` | Boolean | `false` | <p>`true` when the Completeable instance should start from a divider (for example, the space between words) while extracting a segment, and `false` when it should start from the very beginning of the string.</p><p>See the [How the Completeable instance extracts segments](#How-the-Completeable-instance-extracts-segments) section for more info.</p> | N/A | N/A |\n| `segmentsToLocation` | Boolean | `false` | <p>`true` when the Completeable instance should stop at the current location while extracting a segment, and `false` when it should stop at the very end of the string.</p><p>See the [How the Completeable instance extracts segments](#How-the-Completeable-instance-extracts-segments) section for more info.</p> | N/A | N/A |\n| `divider` | RegExp | `/\\s/` | <p>Tells the Completeable instance how segments of the string are divided. Has no effect when <code>segmentsFromDivider</code> is <code>false</code>.</p><p>See the [How the Completeable instance extracts segments](#How-the-Completeable-instance-extracts-segments) section for more info.</p> | N/A | N/A |\n| `onComplete(completedString, instance)` | Function | <p>For more guidance, see the [How the Completeable instance completes strings and computes new locations](#How-the-Completeable-instance-completes-strings-and-computes-new-locations) section.</p> | <p>Called by Completeable after completing the string.</p><p>For more guidance, see the [How the Completeable instance completes strings and computes new locations](#How-the-Completeable-instance-completes-strings-and-computes-new-locations) section.</p> | The completed string (String) and the Completeable instance (Object). | N/A |\n| `onLocate(newLocation, instance)` | Function | <p>For more guidance, see the [How the Completeable instance completes strings and computes new locations](#How-the-Completeable-instance-completes-strings-and-computes-new-locations) section.</p> | <p>Called by Completeable after completing the string.</p><p>For more guidance, see the [How the Completeable instance completes strings and computes new locations](#How-the-Completeable-instance-completes-strings-and-computes-new-locations) section.</p> | The new location (Number) and the Completeable instance (Object). | N/A |\n:::\n\n\n:::\n## Access state and methods\n:::\n\nThe constructed Completeable instance is an Object, and state and methods can be accessed via its properties:\n\n\n:::\n| Property | Type | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- |\n| `string` | String | A shallow copy of the string passed to the Completeable constructor | N/A | N/A |\n| `location` | Number | <p>The current index-based location in the <code>string</code>.</p><p>See the [How the Completeable instance extracts segments](#How-the-Completeable-instance-extracts-segments) section and the [How the Completeable instance completes strings and computes new locations](#How-the-Completeable-instance-completes-strings-and-computes-new-locations) section for more info.</p> | N/A | N/A |\n| `segment` | Getter | Extracts and returns a segment of `string`. See the [How the Completeable instance extracts segments](#How-the-Completeable-instance-extracts-segments) section for more info. | N/A | An extracted segment of `string` (String) |\n| `setString(newString)` | Function | Sets the Completeable instance's `string` | The new `string` (String) | The Completeable instance (`this`) |\n| `setLocation(location)` | Function | <p>Sets the location from which the Completeable instance will start extracting segments.</p><p>See the [How the Completeable instance extracts segments](#How-the-Completeable-instance-extracts-segments) section and the [How the Completeable instance completes strings and computes new locations](#How-the-Completeable-instance-completes-strings-and-computes-new-locations) section for more info.</p>  | The new `location` (Number) | The Completeable instance (`this`) |\n| `complete(completion, options)` |  | <p>Completes the string, replacing <code>segment</code> with a completion/replacement, and computes a new location based on the <code>options</code>.</p><p>For more guidance on the `complete` method, see the [How the Completeable instance completes strings and computes new locations](#How-the-Completeable-instance-completes-strings-and-computes-new-locations) section.</p> | The completion/replacement (String) | The Completeable instance (`this`) |\n:::\n\n\n:::\n### How the Completeable instance extracts segments\n:::\n\nThe Completeable instance [slices](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) the `string` in order to extract a segment. The starting location of the slice differs based on the `segmentsFromDivider` option, and the ending location of the slice differs based on the `segmentsToLocation` option.\n\nThe tables below have a full breakdowns:\n\n:::\n| When `segmentsFromDivider` is... | `segment` start is... |\n| --- | --- |\n| `false` | The beginning of the `string` |\n| `true` | The index-based location of the previous character(s) matching the regular expression passed to the `divider` option, or `-1` if no matches are found. |\n:::\n\n:::\n| When `segmentsToLocation` is... | `segment` end is... |\n| --- | --- |\n| `false` | The end of the `string` |\n| `true` | The current `location` |\n:::\n\nThe sliced `string` becomes the new `segment`.\n\n::: type=\"info\"\n`segment` is computed each time it is accessed, using a getter.\n:::\n\n\n:::\n### How the Completeable instance completes strings and computes new locations\n:::\n\nIn general, whenever the `complete` method is called, the Completeable instance completes the string and computes a new location, then, in this exact order:\n1. Calls your `onComplete` function, passing the completed string as the first argument and itself (i.e. `this`) as the second argument.\n2. Calls your `onLocate` function, passing the new location as the first argument and itself (i.e. `this`) as the second argument.\n\nThe default `onComplete` and `onLocate` functions, shown below, set `string` to the completed string and `location` to the new location each time you call `complete`:\n\n:::\n\n```js\n/*\n * Default onComplete function for Completeable\n */\n(completedString, instance) => instance.setString(completedString)\n\n/*\n * Default onLocate function for Completeable\n */\n(newLocation, instance) => instance.setLocation(newLocation)\n```\n\n:::\n\n\nWhen the Completeable instance's `complete` method is called, passing a `completion` as the first parameter, Completeable will create a completed version of the `string` and will compute a new value for `location`.\n\nThe completed string is a new version of the instance's `string`, with its `segment` replaced by the `completion`. After completing the `string`, the `complete` method calls your `onComplete` function, passing the completed string as the first argument.\n\nThe new value for `location` is computed based on the `locatesAfterCompletion` option, passed using the `complete` function's `options` argument:\n\n:::\n\n```js\ncompletable.complete('my completion', { locatesAfterCompletion: true })\n```\n\n:::\n\n`locatesAfterCompletion` defaults to `true`.\n\nWhen `locatesAfterCompletion` is `true`, the new location will be the the index-based location just after the end of the `completion`. This is equal to the length of any text before the `segment` plus the length of the `completion`. But, when `locatesAfterCompletion` is `false`, the new location will be equal to the old location.\n\nAfter computing the new location, the `complete` method calls your `onLocate` function, passing the new location as the first argument.\n\n::: type=\"info\"\nNote that `complete` does not set `string` or `location` to the new values, but you can do so using `setString` and `setLocation`.\n::: -->\n",
    "updatedAt": "2020-02-21T07:02:05.852Z",
    "path": "./assets/md/logic/classes/Completeable.md",
    "fileName": "Completeable",
    "href": "/docs/logic/classes/Completeable"
  },
  {
    "title": "Copyable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "`Copyable` is a class that enriches a string, allowing it to:\n- Be copied to the clipboard\n- Store its status (\"ready\", \"copying\", or \"copied\")\n\n`Copyable` is written in vanilla JS with no dependencies, except for the [Clipboard](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard) web API.\n\n::: type=\"danger\"\nDocumentation for `Copyable` is still in progress.\n:::\n",
    "updatedAt": "2020-02-21T07:02:17.883Z",
    "path": "./assets/md/logic/classes/Copyable.md",
    "fileName": "Copyable",
    "href": "/docs/logic/classes/Copyable"
  },
  {
    "title": "Delayable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "`Delayable` is a class that enriches a function, allowing it to:\n- Be called after a certain number of milliseconds, either once or on an infinite loop\n- Store the number of times it has been executed\n- Store timestamps for each execution\n\n`Delayable` is written in vanilla JS with no dependencies, except for [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/window/setTimeout), [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/window/setInterval), [`clearTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/window/clearTimeout), and [`clearInterval`](https://developer.mozilla.org/en-US/docs/Web/API/window/clearInterval).\n\n::: type=\"danger\"\nDocumentation for `Delayable` is still in progress.\n:::\n",
    "updatedAt": "2019-12-28T08:59:27.283Z",
    "path": "./assets/md/logic/classes/Delayable.md",
    "fileName": "Delayable",
    "href": "/docs/logic/classes/Delayable"
  },
  {
    "title": "Editable",
    "framework": "agnostic",
    "publish": false,
    "order": 0,
    "body": "`Editable` is a class that enriches a piece of state, allowing it to:\n- Infer its data type\n- Store and make changes to an editable version of itself, instead of mutating the original state\n- Handle different kinds of edits (write, overwrite, full delete, partial delete, cancel &amp; revert to original value, etc.)\n\n`Editable`'s only dependency is [`clone-deep`](https://www.npmjs.com/package/clone-deep) (used internally when editing objects and [Maps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)).\n\n::: type=\"danger\"\nDocumentation for `Editable` is still in progress.\n:::\n\n<!--\n:::\n## Construct an Editable instance\n:::\n\nTo construct an Editable instance (Object), use the Editable constructor, which takes two parameters:\n\n:::\n\n| Parameter | Type | Required | Description |\n| --- | --- | --- | --- |\n| `state` | any | yes | Passes the state that will be made editable. |\n| `options` | Object | no | Passes options for the Editable instance. See the [Editable constructor options](#Editable-constructor-options) section for more guidance. |\n\n:::\n\n\n:::\n```js\nconst instance = new Editable(state[, options])\n```\n:::\n\n:::\n\n| Option | Type | Default | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- | --- |\n| `type` | String | none | <p>Tells the Editable instance what data type your state is. If you don't pass this option, the Editable instance will infer the data type based on the state passed to the constructor.</p>::: type=\"warning\"You should pass the `type` option any time your original state is not the same type as the state that will be written—for example, when you're using Editable to edit a Date, a File, or a FileList, but your store's placeholder value is a String or an empty Object.:::::: type=\"info\"<p>You can pass any String as the <code>type</code> option, or you can pick from one of the following intended types:</p><ul><li>`'array'`</li><li>`'boolean'`</li><li>`'date'`</li><li>`'file'`</li><li>`'filelist'`</li><li>`'map'`</li><li>`'number'`</li><li>`'object'`</li><li>`'string'`</li></ul>::: | N/A | N/A |\n| `onEdit(newState, instance)` | Function | <p>See the [How Editable edits state](#How-Editable-edits-state) section for more guidance.</p> | <p>Called by the Editable instance after either writing or erasing state.</p><p>For more guidance, see the [How Editable edits state](#How-Editable-edits-state) section.</p> | The new state (can be any type) and the Editable instance (Object) | N/A |\n| `onWrite(newState, instance)` | Function | none | <p>Called by the Editable instance after writing state.</p><p>For more guidance, see the [How Editable edits state](#How-Editable-edits-state) section.</p> | The new state (can be any type) and the Editable instance (Object) | N/A |\n| `onErase(newState, instance)` | Function | none | <p>Called by the Editable instance after erasing state.</p><p>For more guidance, see the [How Editable edits state](#How-Editable-edits-state) section.</p> | The new state (can be any type) and the Editable instance (Object) | N/A |\n\n:::\n\n:::\n## Access state and methods\n:::\n\nThe constructed Editable instance is an Object, and state and methods can be accessed via its properties:\n\n\n:::\n| Property | Type | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- |\n| `state` | any | A deep copy of the state passed to the Editable constructor | N/A | N/A |\n| `editableState` | any | A deep copy of `state` that you can edit. | N/A | N/A |\n| `type` | Getter | See return value | N/A | The Editable instance's inferred data type (String) |\n| `setState(newState)` | Function | Sets the Editable instance's `state` | The new `state` (any) | The Editable instance (`this`) |\n| `setEditableState(newEditableState)` | Function | Sets the Editable instance's `editableState` | The new `editableState` (any) | The Editable instance (`this`) |\n| `cancel()` | Function | <p>Resets `editableState` to a shallow copy of `state`.</p>::: type=\"info\"`cancel` does not trigger the Editable instance to call your `onEdit`, `onWrite`, or `onErase` functions.::: | none | The Editable instance (`this`) |\n| `write(options)` | Function | <p>Writes `editableState` to `state`.</p><p>The exact write behavior depends on `type` and the `write` function's `options` parameter. See the [How Editable writes state](#How-Editable-writes-state) section for more guidance.</p> | <p>An `options` object.</p><p>See the [How Editable writes state](#How-Editable-writes-state) section for more guidance.</p> | The Editable instance (`this`) |\n| `erase(options)` | Function | <p>Erases `state`.</p><p>The exact erase behavior depends on `type` and the `erase` function's `options` parameter. See the [How Editable erases state](#How-Editable-erases-state) section for more guidance.</p> | <p>An `options` object.</p><p>See the [How Editable erases state](#How-Editable-erases-state) section for more guidance.</p> | The Editable instance (`this`) |\n:::\n\n\n:::\n### How Editable edits state\n:::\n\nIn general, whenever the `write` or `erase` methods are called, the Editable instance creates an edited version of its original state, then calls your `onEdit` function, passing the edited state as the first argument and itself (i.e. `this`) as the second argument.\n\nThe default `onEdit` function, shown below, sets `state` to the edited state each time you call one of the editing methods:\n\n:::\n```js\n/*\n * Default onEdit function for Editable\n */\n(newState, instance) => instance.setState(newState)\n```\n:::\n\nImmediately afterward, the Editable instance will also call your `onWrite` or `onErase` functions, depending on which method you called. `onWrite` and `onErase` also receive the edited state as the first argument and the Editable instance (i.e. `this`) as the second argument.\n\nThe edited state is created differently depending on whether you call `write` or `erase`; keep reading for more guidance.\n\n\n:::\n### How Editable writes state\n:::\n\nThe way Editable writes state varies based on the instance's `type` property and the `options` object passed by you as the `write` method's first argument.\n\nFirst, here's a breakdown of what `options` can contain:\n\n:::\n| Property | Type | Required | Description |\n| --- | --- | --- | --- |\n| `item` | any | no | Passes an item that will be added to the end of an Array |\n| `key` | String | Only when `type` is `map` or `object` | Indicates which of the Map or Object's keys will have its value set |\n| `value` | any | no | Passes the value that will be set as the new value for the Map or Object's key (specified by the `key` option) |\n| `rename` | String | no | Indicates which of the Map or Object's keys will be renamed using the String passed to the `key` option |\n:::\n\nAnd here's a breakdown of how all those factors influence write behavior:\n\n:::\n| When `type` is... | And `options` includes | New state is... |\n| --- | --- | --- |\n| `'array'` | `item` | `state`, with `options.item` appended as the last item in the array |\n| `'array'` | nothing | `editableState` |\n| `'map'` or `'object'` | `key`, `value`, and `rename` properties | `state` with the key specified by `rename` renamed to the key specified by `key`, and the value of `state[key]` set to `value` |\n| `'map'` or `'object'` | Only `key` and `rename` properties | `state` with the key specified by `rename` renamed to the key specified by `key` (value is unchanged) |\n| `'map'` or `'object'` | Only `key` and `value` properties | `state` with the value of `state[key]` set to `value` |\n| anything else | anything | `editableState` |\n:::\n\n\n\n:::\n### How Editable erases state\n:::\n\nThe way Editable erases state varies based on the instance's `type` property and the `options` object passed by you as the `write` method's first argument.\n\nFirst, here's a breakdown of what `options` can contain:\n\n:::\n\n| Property | Type | Required | Description |\n| --- | --- | --- | --- |\n| `key` | String | no | Indicates which key of a Map or Object should be deleted. |\n| `item(currentItem)` | String, Function | no | Indicates which item in an Array should be removed. See the [How to erase items from Arrays](#How-to-erase-items-from-arrays) section for more guidance. |\n| `last` | Boolean | no | <p>Indicates whether or not the Editable instance should remove the last item from an Array or delete the last key of a Map or Object.</p>::: type=\"warning\"The order of keys in JavaScript Objects is not consistent. Deleting the \"last\" key may not produce the same results across all environments. If the order of keys is important for your use case, consider using Maps instead.::: |\n| `all` | Boolean | no | Indicates whether or not Editable should remove all items from an Array or delete all key/value pairs from a Map or Object. |\n\n:::\n\n\nAnd here's a breakdown of how all those factors influence erase behavior:\n\n:::\n\n| When `type` is... | And `options` includes | New state is... |\n| --- | --- | --- |\n| `'array'` | `item` | See the [How to erase items from Arrays](#How-to-erase-items-from-arrays) section for more guidance. |\n| `'array'` | `last: true` | `state`, with the last item removed |\n| `'array'` | `all: true` | `[]` |\n| `'map'` or `'object'` | `key` | `state`, with the key matching `options.key` deleted |\n| `'map'` or `'object'` | `last: true` | <p>`state`, with the last key deleted.</p>::: type=\"warning\"The order of keys in JavaScript Objects is not consistent. Deleting the \"last\" key may not produce the same results across all environments. If the order of keys is important for your use case, consider using Maps instead.::: |\n| `'map'` | `all: true` | `new Map()` |\n| `'object'` | `all: true` | `{}` |\n| `'boolean'` | anything | `false` |\n| `'date'` | anything | `new Date()` |\n| `'number'` | anything | `0` |\n| `'string'` | anything | `''` |\n| anything else | anything | `undefined` |\n\n:::\n\n::: type=\"info\"\n\nWhen erasing arrays, objects, and maps, you can set multiple options. For example, if you pass `{ last: true, item: 'myItem' }` while erasing an array, Syncable will remove `'myItem'` AND will remove the last value in the array.\n\nErase operations are performed in the following order (from most specific to least specific operation):\n1. Erase an item (Arrays only)\n2. Erase a key/value pair (Objects and Maps only)\n1. Erase the last item from an Array, or the last key/value pair from an Object or Map\n1. Erase all items from an Array, or all key/value pairs from an Object or Map\n\n:::\n\n\n:::\n### How to erase items from Arrays\n:::\n\nWhen `type` is `'array'`, the `erase` method's `item` option indicates which item in `state` should be erased.\n\nIf `options.item` is a String, the Editable instance will find and remove all items in `state` that are strictly equal to `options.item`.\n\nIf `options.item` is a Function, the Editable instance will iterate through `state`, calling the `options.item` function on each item in the array, passing the item as the first argument. The Editable instance will remove all items for which the `options.item` function returns `true`.\n\nFor example, if you have an array of objects that have a unique ID in the `id` key, and you want the Editable instance to find and delete the item whose ID is `'abc'`, you can call `erase` like so:\n\n:::\n```js\neditable.erase({\n  item: currentItem => currentItem.id === 'abc'\n})\n```\n:::\n\n::: type=\"info\"\nIf `options.item(currentItem)` returns `false` for every item in `state`, the Editable instance will not remove any items.\n\nIf `options.item(currentItem)` returns `true` for more than one item in `state`, all of the matching items will be removed.\n::: -->\n",
    "updatedAt": "2020-02-20T22:26:30.664Z",
    "path": "./assets/md/logic/classes/Editable.md",
    "fileName": "Editable",
    "href": "/docs/logic/classes/Editable"
  },
  {
    "title": "Fetchable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "`Fetchable` is a class that enriches a resource (i.e. a URL), allowing it to:\n- Asynchronously fetch itself\n- Store the response and the response JSON\n- Store its status (\"ready\", \"fetching\", or \"fetched\")\n\n`Fetchable` is written in vanilla JS with no dependencies, except for the [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) web API.\n\n::: type=\"danger\"\nDocumentation for `Fetchable` is still in progress.\n:::\n",
    "updatedAt": "2019-12-28T08:59:27.283Z",
    "path": "./assets/md/logic/classes/Fetchable.md",
    "fileName": "Fetchable",
    "href": "/docs/logic/classes/Fetchable"
  },
  {
    "title": "Listenable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "`Listenable` is a class that enriches an event type, observation type, media query, or custom gesture, allowing it to:\n- Listen for that event type, observation type, media query, or custom gesture and execute a callback function when it happens\n- Clean up all listening activity to avoid memory leaks\n- Retrieve a list of active listeners that it has added\n\n`Listenable` is written in vanilla JavaScript with no external dependencies, except for the following tools:\n- [`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) and [`removeEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\n- [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/intersectionObserver), [Resize Observer](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver), and [Mutation Observer](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)\n- [`requestIdleCallback`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback) and [`cancelIdleCallback`](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)\n- [`matchMedia`](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) and [`removeListener`](https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/removeListener)\n\n::: type=\"danger\"\nDocumentation for `Listenable` is still in progress.\n:::\n\n\n<!-- - intersect\n- resize\n- mutate\n- idle\n- clicks\n- drag\n- dragdrop\n- pan\n- pinch\n- press\n- rotate\n- swipe\n- taps\n\n\n:::\n## API design compliance\n:::\n\n::: ariaLabel=\"A table showing Listenable's compliance status for API design specs\"\n| Spec | Compliance status | Notes |\n| --- | --- | --- |\n| Access functionality by constructing an instance | <EvaCheckmark /> |  |\n| Constructor accepts two parameters: a piece of state,and an `options` object. | <EvaCheckmark /> |  |\n| Takes the form of a JavaScript Object | <EvaCheckmark /> |  |\n| State and methods are accessible through properties | <EvaCheckmark /> |  |\n| Methods always return the instance | <EvaCheckmark /> |  |\n| Stores a shallow copy of the constructor's state in a public property named after the state's type | <EvaCheckmark /> | `this.eventName`  |\n| Has a public method you can use to assign a new value to each public property | <EvaCheckmark /> | `this.setEventName` |\n| Outside of the methods listed above, it never writes to its own public properties. | <EvaCheckmark /> |  |\n| Has one or more public getters | <EvaCheckmark /> | `this.activeListeners` |\n| Has one or more public methods that expose core functionality | <EvaCheckmark /> | `listen`, `stop` |\n| These methods don't create mutated state and don't have `on<Method>` functions | <EvaCheckmark /> |  |\n| Has side effects that can be cleaned up with a `stop` method | <EvaCheckmark /> |  |\n| Uses the sentence template to decide what state type should be accepted by a constructor | <EvaCheckmark /> | \"An event name can be listened to (by a custom gesture recognizer)\" |\n| Constructor does not accept options that only customize the behavior of public methods, it allows those options to be passed to the method itself as a parameter. | <EvaCheckmark /> | See options for `listen` and `stop` |\n::: -->\n",
    "updatedAt": "2020-01-07T23:12:46.342Z",
    "path": "./assets/md/logic/classes/Listenable.md",
    "fileName": "Listenable",
    "href": "/docs/logic/classes/Listenable"
  },
  {
    "title": "Navigateable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "`Navigateable` is a class that enriches an array, allowing it to:\n- Store the index-based location of an item that has been navigated to\n- Retrieve the item that has been navigated to\n- Navigate forward or backward to a different item\n- Navigate to a specific or a random item\n\n`Navigateable` is written in vanilla JS with no dependencies.\n\n::: type=\"danger\"\nDocumentation for `Navigateable` is still in progress.\n:::\n\n\n<!-- :::\n## Construct a `Navigateable` instance\n:::\n\nTo construct a `Navigateable` instance (Object), use the `Navigateable` constructor, which takes two parameters:\n\n:::\n| Parameter | Type | Required | Description |\n| --- | --- | --- | --- |\n| `array` | Array | yes | Passes the array that will be made navigable. |\n| `options` | Object | no | Passes options for the `Navigateable` instance. See the [Navigateable constructor options](#Navigateable-constructor-options) section for more guidance. |\n:::\n\n\n:::\n```js\nconst instance = new Navigateable(array[, options])\n```\n:::\n\n:::\n| Option | Type | Default | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- | --- |\n| `initialLocation` | Number | `0` | The `Navigateable` instance's initial index-based location | N/A | N/A |\n| `loops` | Boolean | `true` | <p>Indicates whether or not `Navigateable` should loop around to the beginning or end of the array when navigating past those points.</p><p>See the [How `Navigateable` navigates](#How-Navigateable-navigates) section for more info.</p> | N/A | N/A |\n| `increment` | Number | `1` | The number of items that will be traversed when the navigable instance is stepping forward through the array | N/A | N/A |\n| `decrement` | Number | `1` | The number of items that will be traversed when the navigable instance is stepping backward through the array | N/A | N/A |\n| `onNavigate(newLocation, instance)` | Function | See the [How `Navigateable` navigates](#How-Navigateable-navigates) section for more info. | <p>Called by the `Navigateable` instance after navigating.</p><p>See the [How `Navigateable` navigates](#How-Navigateable-navigates) section for more info.</p> | The new location (Number) and the `Navigateable` instance (Object) | N/A |\n| `onGoTo(newLocation, instance)` | Function | none | <p>Called by the `Navigateable` instance after navigating to a specific item.</p><p>See the [How `Navigateable` navigates](#How-Navigateable-navigates) section for more info.</p> | The new location (Number) and the `Navigateable` instance (Object) | N/A |\n| `onNext(newLocation, instance)` | Function | none | <p>Called by the `Navigateable` instance after navigating to the next item.</p><p>See the [How `Navigateable` navigates](#How-Navigateable-navigates) section for more info.</p> | The new location (Number) and the `Navigateable` instance (Object) | N/A |\n| `onPrev(newLocation, instance)` | Function | none | <p>Called by the `Navigateable` instance after navigating to the previous item.</p><p>See the [How `Navigateable` navigates](#How-Navigateable-navigates) section for more info.</p> | The new location (Number) and the` Navigateable` instance (Object) | N/A |\n\n:::\n\n:::\n## Access state and methods\n:::\n\nThe constructed `Navigateable` instance is an Object, and state and methods can be accessed via its properties:\n\n\n:::\n| Property | Type | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- |\n| `array` | Array | A shallow copy of the array passed to the `Navigateable` constructor | N/A | N/A |\n| `location` | Number | A shallow copy of the `initialLocation` option passed to the `Navigateable` constructor. | N/A | N/A |\n| `item` | Getter | See return value | N/A | The item located at `location` in `array` (can be any type) |\n| `setArray(newArray)` | Function | Sets the `Navigateable` instance's `array` | The new `array` (Array) | The `Navigateable` instance |\n| `setLocation(newLocation)` | Function | Sets the `Navigateable` instance's `location` | The new `location` (Number) | The `Navigateable` instance |\n| `goTo(location)` | Function | Navigates to a specific item | The index-based location (Number) of the item that should be navigated to | The` Navigateable` instance |\n| `next()` | Function | Steps forward through the array, increasing `location` by `increment` | none | The `Navigateable` instance |\n| `prev()` | Function | Steps backward through the array, decreasing `location` by `decrement` | none | The `Navigateable` instance |\n| `rand()` | Function | Navigates to a random item | none | The `Navigateable` instance |\n:::\n\n\n:::\n### How `Navigateable` navigates\n:::\n\nIn general, whenever the `goTo`, `next`, or `prev` methods are called, the `Navigateable` instance computes the new location, then calls your `onNavigate` function, passing the new location as the first argument and itself (i.e. `this`) as the second argument.\n\nThe default `onNavigate` function, shown below, sets the new location each time you call one of the navigation methods:\n\n:::\n```js\n/*\n * Default onNavigate function for Navigateable\n */\n(newLocation, instance) => instance.setLocation(newLocation)\n```\n:::\n\nImmediately afterward, the `Navigateable` instance will also call your `onGoTo`, `onNext`, or `onPrev` functions, depending on which method you called. `onGoTo`, `onNext`, or `onPrev` also receive the new location as the first argument and the `Navigateable` instance (i.e. `this`) as the second argument.\n\nThe only other thing you need to know about how your `Navigateable` instance navigates is how the `loops` option affects its behavior. Here's a breakdown:\n\n:::\n| When `loops` is... | And the computed location is... | The new location is... |\n| --- | --- | --- |\n| `false` | `array.length` or greater | `array.length - 1` |\n| `false` | `-1` or less | `0` |\n| `true` | greater than `array.length - 1` | See explanation below |\n| `true` | less than `0` | See explanation below |\n:::\n\nWhen `loops` is `true` and the computed location is greater than `array.length - 1` (the largest index-based location), your` Navigateable` instance calculates how much greater the computed location is, then takes that number of steps forward through the array, looping back to the beginning any time it passes `array.length - 1`.\n\nSee the code below for specific examples:\n\n:::\n```js\n// The loops option is true by default\nconst instance = new Navigateable(['Baleada', 'Logic', 'Navigateable'])\n\ninstance.goTo(2) // The array is now located at its last item\ninstance.next() // The array navigated past the end of the array, so it will return to the beginning\ninstance.location // -> 0\n\ninstance.goTo(5) // The array's largest index is 2 (indices start at 0), so going to 5 will leave 3 steps left over.\n/*\n * The array starts at 0, where it left off.\n * Your instance navigates two steps forward and reaches the last location.\n * It steps forward once more, looping around to 0.\n * It then makes its final two steps, landing on 2.\n */\ninstance.location // -> 2\n\n```\n:::\n\nWhen `loops` is `true` and the computed location is less than `0`, your `Navigateable` instance does the same thing, but in reverse: it calculates how much less the computed location is, then takes that number of steps backward through the array, looping around to the end any time it passes `0`.\n\nSee the code below for specific examples:\n\n:::\n```js\n// The loops option is true by default\nconst instance = new Navigateable(['Baleada', 'Logic', 'Navigateable'])\n\ninstance.goTo(0) // The array is now located at its last item\ninstance.prev() // The array navigated past the beginning of the array, so it will loops to the end\ninstance.location // -> 2\n\ninstance.goTo(-3) // The array's lowest index is 0 (indices start at 0), so going to -3 will leave 3 steps left over.\n/*\n * The array starts at 2, where it left off.\n * Your instance navigates two steps backward and reaches 0.\n * It steps backward once more, looping around to 2.\n * It then makes its final two steps, landing on 0.\n */\ninstance.location // -> 0\n\n```\n::: -->\n",
    "updatedAt": "2020-02-20T22:55:52.902Z",
    "path": "./assets/md/logic/classes/Navigateable.md",
    "fileName": "Navigateable",
    "href": "/docs/logic/classes/Navigateable"
  },
  {
    "title": "Recognizeable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "`Recognizeable` is a class that enriches a sequence of DOM events, allowing it to:\n- Recognize the sequence as something more abstract, like a \"swipe\" gesture, or a double-tap\n- Store metadata about the sequence\n- Store the most recent event, for easier access\n- Store a status (`'ready'`, `'recognizing'`, `'recognized'`, or `'denied'`)\n\n`Recognizeable` is written in vanilla JS.\n\n\n::: type=\"info\"\n`Recognizeable` is a lower-level tool whose main purpose is to allow the [`Listenable`](/docs/logic/classes/Listenable) class to listen for custom gestures.\n\nBefore using `Recognizeable` to define your own custom gesture, you should test out [Baleada Listenable Gestures](/docs/listenable-gestures), a collection of pre-made `Recognizeable` configurations that allow `Listenable` to listen for common gestures like swipe, pan, drag-and-drop, double-tap, double-click, and more.\n\nIf Baleada Listenable Gestures doesn't suit your needs, feel free to continue learning about `Recognizeable` so you can define your own custom gestures!\n:::\n\n::: type=\"danger\"\nDocumentation for `Recognizeable` is still in progress.\n:::",
    "updatedAt": "2020-02-21T14:44:36.546Z",
    "path": "./assets/md/logic/classes/Recognizeable.md",
    "fileName": "Recognizeable",
    "href": "/docs/logic/classes/Recognizeable"
  },
  {
    "title": "Searchable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "`Searchable` is a class that enriches an array, allowing it to:\n- Create and store a searchable trie of itself\n- Search the trie for matches or fuzzy matches to a query\n- Store search results\n\n`Searchable` depends on the `Searcher` class from the [fast-fuzzy](https://github.com/EthanRutherford/fast-fuzzy) package.\n\n::: type=\"info\"\n`Searchable` adds virtually no extra functionality to the fast-fuzzy `Searcher` class. It's mostly intended to be a thin wrapper, simply ensuring that the `Searcher` class conforms to all of Baleada Logic's API design specs and naming conventions.\n:::\n\n\n\n:::\n## Construct a `Searchable` instance\n:::\n\nTo construct a `Searchable` instance (Object), use the `Searchable` constructor, which takes two parameters:\n\n::: ariaLabel=\"Searchable constructor parameters\" classes=\"wide-4\"\n| Parameter | Type | Required | Description |\n| --- | --- | --- | --- |\n| `candidates` | Array | yes | Passes the search candidates that will be made searchable. All items in `candidates` should be strings or objects. |\n| `options` | Object | no | Passes options for the `Searchable` instance. See the [`Searchable` constructor options](#Searchable-constructor-options) section for more guidance. |\n:::\n\n\n:::\n```js\nconst instance = new Searchable(candidates[, options])\n```\n:::\n\n\n:::\n### `Searchable` constructor options\n:::\n\nIn addition to the options listed below, `Searchable`'s `options` object accepts any key/value pair that you can pass to fast-fuzzy. See the [fast-fuzzy docs](https://github.com/EthanRutherford/fast-fuzzy#options) for more guidance.\n\n::: ariaLabel=\"Searchable constructor options\" classes=\"wide-3 wide-4 wide-5 wide-6\"\n| Option | Type | Default | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- | --- |\n| `onSearch(newResults, instance)` | Function | See the [How `Searchable` searches](#How-Searchable-searches) section for more info. | <p>Called by the `Searchable` instance after searching.</p><p>See the [How `Searchable` searches](#How-Searchable-searches) section for more info.</p> | The new search results (Array) and the `Searchable` instance (Object) | N/A |\n:::\n\n\n:::\n## Access state and methods\n:::\n\nThe constructed `Searchable` instance is an Object, and state and methods can be accessed via its properties:\n\n\n::: ariaLabel=\"Searchable state and methods\" classes=\"wide-3 wide-4 wide-5\"\n| Property | Type | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- |\n| `candidates` | Array | A shallow copy of the `candidates` array passed to the constructor | N/A | N/A |\n| `results` | Array | <p>A convenient place to store search results.</p><p>Immediately after the `Searchable` instance is constructed, `results` is an empty array (`[]`).</p>  | N/A | N/A |\n| `trie` | Getter | See return value | N/A | The searchable trie (Object) created by the `Searcher` class (Array) |\n| `setCandidates(newCandidates)` | Function |  | The new `candidates` (Array) | The `Searchable` instance |\n| `setResults(newResults)` | Function |  | The new `results` (Array) | The `Searchable` instance |\n| `search(query, options)` | Function |  | <p>A search query (String) and search options (Object).</p><p>To learn more about what search options are available, [visit the docs for the `Searcher` class' `search` method](https://github.com/EthanRutherford/fast-fuzzy#options).</p> | The `Searchable` instance |\n:::\n\n:::\n### How `Searchable` searches\n:::\n\nWhenever the `search` method is called, the `Searchable` instance computes a new array of search results (using the `search` method on the `Searcher` class), then calls your `onSearch` function, passing the new results as the first argument and itself (i.e. `this`) as the second argument.\n\nThe default `onSearch` function, shown below, sets `results` to the new results each time you call `search`:\n\n:::\n```js\n// Default onSearch function for Searchable\n(newResults, instance) => instance.setResults(newResults)\n```\n:::\n\n\n:::\n## API design compliance\n:::\n\n::: ariaLabel=\"A table showing Searchable's API design compliance\" classes=\"wide-1 wide-3\"\n| Spec | Compliance status | Notes |\n| --- | --- | --- |\n| Access functionality by constructing an instance | <ApiDesignSpecCheckmark /> |  |\n| Constructor accepts two parameters: a piece of state,and an `options` object. | <ApiDesignSpecCheckmark /> |  |\n| Takes the form of a JavaScript Object | <ApiDesignSpecCheckmark /> |  |\n| State and methods are accessible through properties | <ApiDesignSpecCheckmark /> |  |\n| Methods always return the instance | <ApiDesignSpecCheckmark /> |  |\n| Stores a shallow copy of the constructor's state in a public property named after the state's type | <ApiDesignSpecCheckmark /> | `candidates`  |\n| Has a public method you can use to assign a new value to each public property | <ApiDesignSpecCheckmark /> | `setCandidates`, `setResults` |\n| Outside of the methods listed above, it never writes to its own public properties. | <ApiDesignSpecCheckmark /> |  |\n| Has one or more public getters | <ApiDesignSpecCheckmark /> | `trie` |\n| Has one or more public methods that expose core functionality | <ApiDesignSpecCheckmark /> | `search` |\n| These methods either don't create mutated state or emit mutated state through an `on<Method>` function | <ApiDesignSpecCheckmark /> | `onSearch` |\n| Either has no side effects or has side effects that can be cleaned up with a `stop` method | <ApiDesignSpecCheckmark /> | |\n| Uses the sentence template to decide what state type should be accepted by a constructor | <ApiDesignSpecCheckmark /> | \"Candidates can be searched.\" |\n| Constructor does not accept options that only customize the behavior of public methods, it allows those options to be passed to the method itself as a parameter. | <ApiDesignSpecCheckmark /> | `Searchable`'s constructor accepts options for the `Searcher` class, but those can be overridden when calling the `search` function. |\n:::\n",
    "updatedAt": "2020-02-21T06:52:01.551Z",
    "path": "./assets/md/logic/classes/Searchable.md",
    "fileName": "Searchable",
    "href": "/docs/logic/classes/Searchable"
  },
  {
    "title": "Composing UI Logic",
    "framework": "agnostic",
    "publish": false,
    "order": 2,
    "body": "Atomic JS\n",
    "updatedAt": "2019-12-22T17:00:51.558Z",
    "path": "./assets/md/logic/composing-ui-logic.md",
    "fileName": "composing-ui-logic",
    "href": "/docs/logic/composing-ui-logic"
  },
  {
    "title": "Documentation style guide",
    "framework": "agnostic",
    "publish": false,
    "order": 5,
    "body": "In this guide, you'll find\n",
    "updatedAt": "2019-12-22T17:01:42.871Z",
    "path": "./assets/md/logic/documentation-style-guide.md",
    "fileName": "documentation-style-guide",
    "href": "/docs/logic/documentation-style-guide"
  },
  {
    "title": "markupable",
    "framework": "agnostic",
    "publish": false,
    "body": "",
    "updatedAt": "2019-12-20T04:01:50.275Z",
    "path": "./assets/md/logic/factories/markupable.md",
    "fileName": "markupable",
    "href": "/docs/logic/factories/markupable"
  },
  {
    "title": "renamable",
    "framework": "agnostic",
    "publish": false,
    "body": "",
    "updatedAt": "2019-12-20T04:01:26.139Z",
    "path": "./assets/md/logic/factories/renamable.md",
    "fileName": "renamable",
    "href": "/docs/logic/factories/renamable"
  },
  {
    "title": "reorderable",
    "framework": "agnostic",
    "publish": false,
    "body": "",
    "updatedAt": "2019-12-20T04:01:30.579Z",
    "path": "./assets/md/logic/factories/reorderable.md",
    "fileName": "reorderable",
    "href": "/docs/logic/factories/reorderable"
  },
  {
    "title": "Identifying UI logic",
    "framework": "agnostic",
    "publish": true,
    "order": 1,
    "body": ":::\n## UI features are composed from logic.\n:::\n\nThe big idea behind Baleada Logic, [React Hooks](https://reactjs.org/docs/hooks-intro.html), the [Vue composition API](https://vue-composition-api-rfc.netlify.com/), and functional programming in general is that the easiest way to create large, complex UI features is to **compose** them from smaller pieces of UI logic. Learning how to identify the discrete pieces of UI logic hidden inside of bigger UI features is the key to success with Baleada Logic.\n\n:::\n> The easiest way to create large, complex UI features is to **compose** them from smaller pieces of UI logic.\n:::\n\nFor example, imagine you want to add an autocomplete feature to your UI, so that the end user can start typing, be prompted with matching options, and pick one to automatically complete the text they were typing.\n\nAt first glance, you might think of \"autocomplete\" as the piece of UI logic you need to create, but autocomplete can actually be broken down into several smaller pieces of logic:\n:::\n1. As the user is typing, you need to extract the segment of their text that can be completed. In a simple text input, this is the entire value, but in a large text area, it's more likely to be just the current word the user is typing.\n2. You need to search a list of autocomplete options, using your segment of text as a search query. The search should fuzzy match, in case the user makes a typo.\n3. You need to display the search results in a dropdown menu on the screen. For the best user experience, the dropdown menu should reposition itself automatically, making sure that options are still visible if the user scrolls and changes the amount of available screen space.\n4. The dropdown menu should be keyboard accessible. Up and down arros keys should move options into focus. If the user is at the bottom of the list and presses the down arrow again, you should move focus back to the top of the list.\n5. When the user selects an option, you need to replace the original segment of text with the completed version.\n:::\n\nUsing tools from Baleada Logic, you would approach this list of logic like so:\n:::\n1. [`Completable`](/docs/logic/classes/completable) extracts the segment of text\n2. [`Searchable`](/docs/logic/classes/searchable) searches a list of options for the segment (fuzzy matching is optional)\n3. [`Listenable`](/docs/logic/classes/listenable) detects when the dropdown menu starts leaving the viewport, and gives you some information so that you can simply apply a CSS `transform: translate` to move the menu into a visible spot.\n4. [`Navigable`](/docs/logic/classes/navigable) tracks which option should be in focus, and can loop around to the beginning or end of the list as needed.\n5. `Completable` completes the segment of text with a completed value chosen by the user.\n:::\n\nIt might seem strange to break this feature down and implement it with so many separate tools, but this approach is what allows logic to become abstract enough to be reusable. An autocomplete feature is only useful in situations where you need to autocomplete, but a fuzzy-matching search feature is useful in all kinds of different places.\n\nAnyway, that's the basic concept, but let's explore some more concrete examples of how individual Baleada Logic tools can be reused across various UI features.\n\n\n:::\n## A simple example of reusability\n:::\n\nConsider these components, which appear in all kinds of user interfaces:\n- Carousel\n- Custom dropdown menu\n- Date picker\n- Solitaire\n\n(Ok fine, solitaire isn't common—but you'll see that a solitaire component's behavior has a lot more in common with carousels, dropdowns, and date pickers than you might think!)\n\nVisually, these components are so different that it feels clean and correct to build them all in isolation, or install isolated packages that contain them. But if you look more closely, these components share a decent number of different behaviors:\n\n::: ariaLabel=\"Behaviors that carousels, dropdowns, date pickers, and solitaire have in common\" classes=\"wide-1\"\n| Behavior | Carousel | Dropdown | Date picker | Solitaire |\n| --- | --- | --- | --- | --- |\n| Click a button or use an arrow key to move backward or forward | yes | yes | yes | yes |\n| Loop back to the beginning after navigating forwards past the last item | usually | yes | N/A  | yes |\n| Loop back to the end after navigating backwards past the first item | usually | yes | N/A | no |\n| Go to a specific item | yes | not usually | yes | no |\n| Move forward and back in custom increments | yes, if the carousel displays more than 1 image at a time | no | yes | yes (3-card or 1-card advance) |\n| Go to a random item | sometimes | no | sometimes | no |\n:::\n\nAcross each of these components, the code that implements this collection of array-navigating behaviors is more or less the same. But when you're using Baleada Logic, you don't have to write or install the same array-navigating code separately for each one of those components.\n\nInstead, you just build your array of images, dropdown options, years/months/days, or playing cards, and you pass the array to the constructor of `Navigable`—one of Baleada Logic's classes—to create an instance of the `Navigable` class.\n\nThe `Navigable` class has all the methods you need to navigate forward, backward, to a specific item, or even to a random item. Its methods for moving forward and backward can handle custom increments (e.g. moving forward 3 cards in solitaire) and can loop around to the beginning or end of the array (both features are optional based on parameters you pass to the method when it's called).\n\nArray navigation is on the simpler end of the UI logic spectrum, but it's a great example of logic that can easily get tangled up and repeated inside seemingly unrelated components instead of being extracted into something more reusable and feature-complete.\n\n:::\n> Array navigation is a great example of logic that can easily get tangled up and repeated inside seemingly unrelated components instead of being extracted into something more reusable and feature-complete.\n:::\n\n\n:::\n## A more complex example of reusability\n:::\n\nFor something more complex, imagine you're building the following components:\n- Custom image component for a social networking app\n- A sidebar navigation menu for a documentation site\n- A message in an inbox\n- A wrapper component (or maybe just a plain function) that detects user mouse movements, computes analytics, and sends the analytics to a server\n\nThese components are wildly different, but let's double-check some of the behaviors these components should have, to see if we can find similarities:\n\n::: ariaLabel=\"Behaviors that image components and navigation menus need\" classes=\"wide-1\"\n| Behavior | Custom image | Sidebar nav | Inbox message | Analytics wrapper |\n| --- | --- | --- | --- | --- |\n| Don't load the resource until the element is visible | yes | no | it's possible | no |\n| Do something when the user hits a specific keystroke | no | yes (toggle dark mode) | yes (reply all, compose new message, etc.) | no |\n| Do something when the user moves the mouse | no | no | no | yes (store mouse position for analytics) |\n| Do something when the user double taps | yes (\"like\" the image) | no | probably not | no |\n| Do something when the user swipes right | yes (initiate mating sequence) | yes (on mobile, open the menu) | yes (archive the message) | no |\n| Do something when the user is idle | no | no | yes (save draft reply) | yes (compute and send analytics) |\n:::\n\nHmm...okay, it looks like some of these behaviors overlap, but not that closely.\n\nNotice, however, that every single one of these behaviors has a similar structure: when something specific happens, take an action. To be more precise: when an event or combination of events is fired, execute a callback function.\n\nIf you were writing all of this behavior yourself across each of these components, you would most likely use:\n:::\n- An [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/intersectionObserver)\n- A third-party [gesture recognition library](https://zingchart.github.io/zingtouch/) that supports \"swipe right\" and \"double tap\"\n- [`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n- [`requestIdleCallback`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback) (to keep your analytics work off the main thread so that it doesn't slow down other processes)\n:::\n\nYou would also need to make sure that, when the components reach the end of their lifecycle:\n:::\n- The Intersection Observer disconnects from the images\n- The gesture recognizer is properly destroyed (hopefully the third party library has that option)\n- You execute [`removeEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener) for each corresponding `addEventListener`\n- You execute [`cancelIdleCallback`](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback) for each corresponding `requestIdleCallback`\n:::\n\nAll that work and all of those APIs...just to make your app do something after something else happens!\n\nWith Baleada Logic, you would instead follow a straightforward process:\n1. Identify the name of the \"something\" that you're waiting for. For the components above, the \"somethings\" would be `'keydown'` `'intersect'`, `'tap'`, `'swipe'`, and `'idle'`.\n1. Pass the name of each \"something\" to a `Listenable` constructor to create instances of the `Listenable` class.\n1. Call your `Listenable` instances' `listen` methods, passing a callback function to each one that will triggers the appropriate action when its \"something\" happens. (You can also pass options to `listen`, for example, to make sure that you are only listening for an event on a specific element instead of the whole page.)\n1. Wait for your events to happen, and rest easy knowing that your callbacks will all run at the appropriate time!\n1. At the end of the components' lifecycles, call the `stop` method on your instances to stop all listening and observing (therefore avoiding memory leaks).\n\nThe idea behind `Listenable` is, that, at the end of the day, you shouldn't have to know or care whether the right tool to listen for any given \"something\" is an Observer, a magical gesture recognition library, the somewhat obscure `requestIdleCallback`, or good old `addEventListener`, and you _definitely_ shouldn't have to know or care about how to clean up side effects and avoid memory leaks with each tool.\n\nThese tools, as nifty as they are, are implementation details in their truest form. Their inconsistent APIs are the _last_ thing you should be worrying about when all you really need is to add that \"do something when something else happens\" behavior to your project.\n\n\n:::\n## A sweeping conclusion\n:::\n\nThe purpose of Baleada Logic is to abstract repetitive but relatively complex UI logic into something more reusable, so that you can focus on the aesthetics and business logic of your project instead of fiddling with web APIs, doing algebra, performing basic state management, getting into the weeds with `this`, remembering where and how to use all the methods of native prototypes, etc.\n\n:::\n> The purpose of Baleada Logic is to abstract repetitive but relatively complex UI logic into something more reusable, so that you can focus on the aesthetics and business logic of your project.\n:::\n\nBaleada's abstractions take the form of **JavaScript classes** and **factory functions**. These classes and factories do several important things:\n:::\n- They expose a consistent, unified, intuitive API, regardless of what behaviors and feature you're trying to add to your poject\n- They avoid side effects in the DOM whenever possible, and when not possible, they offer a consistent API for cleaning up afterward\n- The _only_ assumption they make about your DOM is that you have one. And sometimes, they don't even assume that!\n- They offer an intentionally limited set of features and functionality. In your project, any component worth its salt won't be powered by a single Baleada Logic class or factory—instead, your components will compose features using more than one class or factory, sometimes even feeding state from one class into the methods of another.\n:::\n<!-- TODO: more stuff for that list? Clarify benefits? -->\n\nIf you're ready to get your hands dirty, check out the docs listed on the left for individual Baleada Logic classes and factories.\n\nIf you really want to nerd out on the API design, check out the [API design guide](/docs/logic/api-design).\n",
    "updatedAt": "2020-03-01T04:14:31.572Z",
    "path": "./assets/md/logic/identifying-ui-logic.md",
    "fileName": "identifying-ui-logic",
    "href": "/docs/logic/identifying-ui-logic"
  },
  {
    "title": "What is Baleada Logic?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Baleada Logic is a collection of JavaScript [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) and [factory functions](https://www.youtube.com/watch?v=ImwrezYhw4w) that implement **UI logic**.\n\n::: type=\"info\"\nA \"factory function\" is a function that returns an object.\n:::\n\n\n:::\n## A note, before you dive in\n:::\n\nAll of Baleada Logic's classes and factories are framework-agnostic. However, the number one priority during Baleada's development was to add useful state and methods to websites and apps that are built on reactivity & component frameworks like Vue, React, or Svelte and bundled using Webpack, Rollup, or something similar.\n\nIn most cases, it's recommended that you use [Baleada Composition](/docs/composition) inside the framework & build chain of your choice instead of importing classes and factories directly from Baleada Logic.\n\nBaleada Composition has a dedicated composition function for each individual Baleada Logic class, plus composition functions that combine Baleada Logic classes to implement common UI patterns (think autocompletes, toasts, forms that auto-save, etc.).\n\nIf you're planning to use Baleada Composition, you won't need to know how to install and import classes and factories directly from Baleada Logic, but you'll still need to know how to use individual classes and factories. A great place to start is the [Identifying UI Logic](/docs/logic/identifying-ui-logic) guide, which will teach you core concepts and patterns that will help you use Baleada Logic's classes and factories successfully.\n\nAll of that said, the number _two_ priority during Baleada's development was to ensure it's still perfectly possible to use Baleada Logic in simpler projects, built with smaller JavaScript frameworks or no framework at all. If that sounds like your use case, keep reading! (And definitely check out the [Identifying UI Logic](/docs/logic/identifying-ui-logic) guide afterward.)\n\n\n:::\n## Install\n:::\n\n:::\n```bash\nnpm i @baleada/logic\n```\n:::\n\n\n:::\n## Import a class or factory\n:::\n\nAll classes are named exports in Baleada Logic's entry file, so you can import one like so:\n\n\n:::\n```js\nimport { Delayable } from '@baleada/logic'\n```\n:::\n\nFactories are named exports in a `factories.js` file at the root of Baleada Logic, so you can import one like so:\n\n:::\n```js\nimport { markupable } from '@baleada/logic/factories'\n```\n:::\n\n\n:::\n## Available classes and factories\n:::\n\nAll available classes and factories are listed in this site's navigation under **LOGIC** and linked to their specific documentation.\n\n\n:::\n## Language, compilation, browser support, and dependencies\n:::\n\nClasses and factories are written in modern JavaScript, and almost all of them have no dependencies of their own. They are compiled by [Babel](https://babeljs.io) to work in browsers that are used by more than 0.5% of global web visitors AND have had official support or updates in the past 24 months.\n\nTo allow for [tree-shaking](https://webpack.js.org/guides/tree-shaking/), Baleada Logic's compiled code has no side effects and uses [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) instead of [`require()`](https://nodejs.org/api/modules.html#modules_require_id) and [`module.exports`](https://nodejs.org/api/modules.html#modules_module_exports).\n\nDependencies, when they exist, were chosen with the following desirable characteristics in mind (in no particular order):\n- Framework agnostic\n- Few or no dependencies of their own\n- Small file size\n- Tree-shakeable\n- Small impact on apps' bundle size\n- Industry standard\n- Recommended/used by proficient, well-known, independent developers\n\nNot all dependencies meet every single one of those requirements. However, lots of care was taken to ensure that, if a dependency can be replaced by something better in the future, doing so will be quick and easy, and with any luck, won't result in breaking changes.\n",
    "updatedAt": "2019-12-24T02:51:12.754Z",
    "path": "./assets/md/logic/index.md",
    "fileName": "index",
    "href": "/docs/logic"
  },
  {
    "title": "lastMatch",
    "framework": "agnostic",
    "publish": false,
    "order": 0,
    "body": "`lastMatch` is a utility function similar to [`lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf), except that it matches a regular expression instead of searching for a string.\n\n`lastMatch` takes three arguments:\n1. The string that will be searched\n1. The regular expression that will be used to find matches\n1. The index of the character from which `lastMatch` will start searching\n\n`lastMatch` returns the index of the last match, or `-1` if no matches are found.\n",
    "updatedAt": "2019-10-05T16:18:58.689Z",
    "path": "./assets/md/logic/util/lastMatch.md",
    "fileName": "lastMatch",
    "href": "/docs/logic/util/lastMatch"
  },
  {
    "title": "Why this API?",
    "framework": "agnostic",
    "publish": false,
    "order": 4,
    "body": "When you're building a web app or web site, you can get extremely far with just HTML and CSS, adding structure and style, and making pages feel complete and information feel approachable.\n\nBut in order to craft a really polished user experience with rich interactivity, you need to add **UI logic**—JavaScript that powers special behaviors in your user interface. For example:\n:::\n- Allowing the user to enter a search term and see a list of search results, filtered based on fuzzy matches\n- Autocompleting text, replacing all or part of the original text with a completed value\n- Detecting and reacting to common gestures (pan, swipe, double-tap, drag, drag-and-drop, etc.)\n:::\n\nTo complicate matters, those special behaviors will definitely need to be repeated and reused across projects, and even within the same project. To avoid spending all your time copy/pasting from project to project, fixing the same bug in 10 different places, and constantly reinventing the wheel, you'll need to find a way to **reuse your UI logic**.\n\nThere are several common solutions for making UI logic reusable, each with their pros and cons:\n\n:::\n\n| Solution | Pros | Cons |\n| --- | --- | --- |\n| Big, custom components that handle everything—HTML structure, CSS styles, and UI logic | <ul><li>Great for quick-fix, plug-and-play use cases.</li><li>Great if you can build a limited selection of components that get shared and used frequently.</li><li>Doesn't require that you (the developer consuming this solution) understand how `this` works.</li></ul> | <ul><li>Usually accept massive amounts of props that you need to learn in order to customize any given detail.</li><li>Usually the wrong abstraction—it makes a specific application of UI logic reusable, but fails at making the underlying logic reusable.</li><li>Not really possible unless you're using a component framework like React, Vue, Svelte, etc.</li></ul> |\n| [Mixins](https://javascript.info/mixins) | <ul><li>Pretty intuitive approach: at the end of the day, it's just merging new properties into an object.</li><li>It's a general JavaScript technique that can be used outside of component frameworks</li></ul> | <ul><li>Leads to naming collisions between injected state and methods</li><li>Leads to broken components after the name of a mixed in property or method changes</li><li>Requires that you (the developer consuming this solution) have some understanding of how `this` works.</li></ul> |\n| [Renderless](https://adamwathan.me/renderless-components-in-vuejs/)/[Higher order components](https://reactjs.org/docs/higher-order-components.html) | <ul><li>Effectively reuses logic without risk of naming collisions</li><li>Can be made highly customizable with only a few props</li></ul>  | <ul><li>Creates deeply nested component trees that are confusing to write and even harder to read.</li><li>Pretty difficult to pass state and methods down through nested renderless components to where it actually needs to be.</li><li>Not really possible unless you're using a component framework like React, Vue, Svelte, etc.</li><li>Usually requires that you (the developer consuming this solution) have some understanding of how `this` works.</li></ul> |\n\n:::\n\nAll of those solutions work to an extent, but their downsides are uncomfortable, and things only get worse as projects grow bigger. Also, real-world examples of these solutions are almost always implemented for just one reactivity & component framework, with no chance of working inside another framework without rewriting and maintaining a fully separate version.\n\nWith the introduction of [React hooks](https://reactjs.org/docs/hooks-intro.html) and the [Vue composition API](https://vue-composition-api-rfc.netlify.com), however, it has become possible to\n",
    "updatedAt": "2019-12-22T17:01:39.096Z",
    "path": "./assets/md/logic/why-this-api.md",
    "fileName": "why-this-api",
    "href": "/docs/logic/why-this-api"
  },
  {
    "title": "What is Baleada Markdown-it SPA Links?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Baleada Markdown-it SPA Links is a [Markdown-it](https://markdown-it.github.io/) plugin that uses the correct link component to render links to other pages in your single-page app.\n\nFor example, if you're using [Nuxt](https://nuxtjs.org), you can write the following Markdown:\n\n:::\n```\n[My other page](/my-other-page)\n```\n:::\n\nAnd it will be rendered as:\n\n:::\n```html\n<p><NuxtLink to=\"/my-other-page\">My other page</NuxtLink></p>\n```\n:::\n\nThe plugin supports link components for the following tools:\n- [Inertia](https://inertiajs.com)\n- [Next](https://nextjs.org)\n- [Nuxt](https://nuxtjs.org)\n- [React Router](https://reacttraining.com/react-router/)\n- [Vue Router](https://router.vuejs.org/)\n\n::: type=\"info\"\n[Sapper](https://sapper.svelte.dev) was originally on the list of supported link components as well, but since [Sapper links are simply `<a>` elements](https://sapper.svelte.dev/docs#Comparison_with_Next_js) instead of specific components, special rendering is not necessary.\n:::\n\n\n:::\n## Installation\n:::\n\nYou can install Baleada Markdown-it SPA Links from NPM.\n\n:::\n```bash\nnpm i @baleada/markdown-it-spa-links\n```\n:::\n\n\n:::\n## Usage\n:::\n\nTo get started, import the plugin from the entry file of `@baleada/markdown-it-spa-links`, and create a Markdown-it instance.\n\n:::\n```js\nimport MarkdownItSpaLinks from '@baleada/markdown-it-spa-links'\nimport MarkdownIt from 'markdown-it'\n\nconst md = new MarkdownIt()\n```\n:::\n\nUse the `use` method of your Markdown-it instance to register the plugin. Pass the plugin as the first argument, and for the second argument, you can pass a configuration object. That object can have two properties:\n\n::: ariaLabel=\"Baleada Markdown-it SPA Links configuration schema\" classes=\"wide-5\"\n| Property | Value's type | Required? | Default | Value description |\n| --- | --- | --- | --- | --- |\n| `spa` | String | yes | none | <p>Indicates which tool you are using to build your SPA, so that the plugin can identify the correct link component.</p><p>See the [Link components by tool](#Link-components-by-tool) reference table to see valid values for the `spa` option and which link components get rendered.</p> |\n| `base` | String | nope | none | <p>Passes the base URL of your site to help the plugin identify links within the site.</p><p>If `base` is not passed, the plugin will only use link components for URLs that start with `/`.</p> |\n:::\n\nFor example, here's how you would configure the plugin to work with Nuxt:\n\n:::\n```js\nimport MarkdownItSpaLinks from '@baleada/markdown-it-spa-links'\nimport MarkdownIt from 'markdown-it'\n\nconst md = new MarkdownIt()\n\nmd.use(MarkdownItSpaLinks, { spa: 'nuxt' })\n```\n:::\n\nAnd here's how you would pass the optional base URL:\n\n:::\n```js\nimport MarkdownItSpaLinks from '@baleada/markdown-it-spa-links'\nimport MarkdownIt from 'markdown-it'\n\nconst md = new MarkdownIt()\n\nmd.use(MarkdownItSpaLinks, { spa: 'nuxt', base: 'https://example.com' })\n```\n:::\n\n\n:::\n### Link components by tool\n:::\n\n::: ariaLabel=\"Reference table matching SPA tools with link components\"\n| When `spa` is... | Links are rendered with... |\n| --- | --- |\n| `'inertia'` | [`inertia-link`](https://inertiajs.com/links#top) |\n| `'next'` | [`Link` > `a`](https://nextjs.org/docs#with-link) |\n| `'nuxt'` | [`NuxtLink`](https://nuxtjs.org/api/components-nuxt-link#the-lt-nuxt-link-gt-component) |\n| `'react'` | [`Link`](https://reacttraining.com/react-router/web/api/Link) |\n| `'vue'` | [`RouterLink`](https://router.vuejs.org/api/#router-link) |\n:::\n",
    "updatedAt": "2020-02-10T18:15:23.409Z",
    "path": "./assets/md/markdown-it-spa-links/index.md",
    "fileName": "index",
    "href": "/docs/markdown-it-spa-links"
  },
  {
    "body": "",
    "updatedAt": "2019-10-06T23:00:58.971Z",
    "path": "./assets/md/prose/index.md",
    "fileName": "index",
    "href": "/docs/prose"
  },
  {
    "body": "",
    "updatedAt": "2019-12-17T19:01:34.002Z",
    "path": "./assets/md/prose/using-with-react.md",
    "fileName": "using-with-react",
    "href": "/docs/prose/using-with-react"
  },
  {
    "body": "",
    "updatedAt": "2019-12-17T19:01:34.002Z",
    "path": "./assets/md/prose/using-with-svelte.md",
    "fileName": "using-with-svelte",
    "href": "/docs/prose/using-with-svelte"
  },
  {
    "body": "",
    "updatedAt": "2019-12-17T19:01:34.002Z",
    "path": "./assets/md/prose/using-with-vue.md",
    "fileName": "using-with-vue",
    "href": "/docs/prose/using-with-vue"
  },
  {
    "title": "Roadmap",
    "framework": "agnostic",
    "publish": true,
    "order": 2,
    "body": ":::\n## Pre-1.0.0 to-do list\n:::\n\n- Baleada Logic\n  - Document all Baleada Logic libraries\n  - Pursue [other library ideas](https://www.notion.so/baleada/dea01fd9090a4bd5a8a96e84dfe6d004?v=aef7c1e8bc394535af81c8960678a13c)\n- Baleada Composition\n  - Publish 0.0.0\n  - Document installation, importing, and usage\n  - React and Svelte support\n- Baleada Icons\n  - Svelte support\n\n\n:::\n## Post-1.0.0 to-do list\n:::\n\n- Build example to-do app using Baleada tools\n- Build example blog/static site using Baleada tools\n- Build example ecommerce site using Baleada tools\n- Pursue other tool category ideas\n\n\n:::\n## Ideas for other tool categories\n:::\n\n::: ariaLabel=\"List of tool ideas\" classes=\"wide-2\"\n| Name | Description |\n| --- | --- |\n| Baleada Style | Custom Tailwind config files, custom Tailwind plugins that register component classes and utility classes |\n| Baleada Prose | Components that enrich prose written in markdown |\n| Baleada Shapes | Components that render useful SVGs (e.g. waves, triangles, gradients, blobs, etc.) |\n| Baleada Scaffold | CLI tool for scaffolding out Nuxt, Next, and Sapper projects with other Baleada tools pre-installed |\n| Baleada Baleadas | A gallery with photos of actual baleadas |\n:::\n",
    "updatedAt": "2020-02-10T17:55:41.918Z",
    "path": "./assets/md/roadmap.md",
    "fileName": "roadmap",
    "href": "/docs/roadmap"
  },
  {
    "title": "Class References",
    "framework": "agnostic",
    "publish": true,
    "order": 1,
    "body": "In this article, you'll find a class reference table for each of the properties customized by Baleada Tailwind Linear, matching up their linear numeric class names with the original Tailwind names.\n\n\n:::\n## Border radius\n:::\n\n::: ariaLabel=\"Comparison of Border radius linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `.rounded-0` | `.rounded-none` |\n| `.rounded-300` | `.rounded-sm` |\n| `.rounded-400` | `.rounded` |\n| `.rounded-500` | `.rounded-md` |\n| `.rounded-600` | `.rounded-lg` |\n| `.rounded-full` | `.rounded-full` |\n:::\n\n\n:::\n## Border width\n:::\n\n::: ariaLabel=\"Comparison of Border width linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `.border-0` | `.border-0` |\n| `.border-400` | `.border` |\n| `.border-500` | `.border-2` |\n| `.border-600` | `.border-4` |\n| `.border-700` | `.border-8` |\n:::\n\n\n:::\n## Box shadow\n:::\n\n::: ariaLabel=\"Comparison of Box shadow linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `.shadow-0` | `.shadow-none` |\n| `.shadow-200` | `.shadow-xs` |\n| `.shadow-300` | `.shadow-sm` |\n| `.shadow-400` | `.shadow` |\n| `.shadow-500` | `.shadow-md` |\n| `.shadow-600` | `.shadow-lg` |\n| `.shadow-700` | `.shadow-xl` |\n| `.shadow-800` | `.shadow-2xl` |\n| `.-shadow-400` | `.shadow-inner` |\n| `.shadow-outline` | `.shadow-outline` |\n:::\n\n\n:::\n## Font size\n:::\n\n::: ariaLabel=\"Comparison of Font size linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `.text-200` | `.text-xs` |\n| `.text-300` | `.text-sm` |\n| `.text-400` | `.text-base` |\n| `.text-500` | `.text-lg` |\n| `.text-600` | `.text-xl` |\n| `.text-700` | `.text-2xl` |\n| `.text-800` | `.text-3xl` |\n| `.text-900` | `.text-4xl` |\n| `.text-1000` | `.text-5xl` |\n| `.text-1100` | `.text-6xl` |\n:::\n\n\n:::\n## Font weight\n:::\n\n::: ariaLabel=\"Comparison of Font weight linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `.font-100` | `.font-hairline` |\n| `.font-200` | `.font-thin` |\n| `.font-300` | `.font-light` |\n| `.font-400` | `.font-normal` |\n| `.font-500` | `.font-medium` |\n| `.font-600` | `.font-semibold` |\n| `.font-700` | `.font-bold` |\n| `.font-800` | `.font-extrabold` |\n| `.font-900` | `.font-black` |\n:::\n\n\n:::\n## Letter spacing\n:::\n\n::: ariaLabel=\"Comparison of Letter spacing linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `.-tracking-200` | `.tracking-tighter` |\n| `.-tracking-100` | `.tracking-tight` |\n| `.tracking-0` | `.tracking-normal` |\n| `.tracking-100` | `.tracking-wide` |\n| `.tracking-200` | `.tracking-wider` |\n| `.tracking-300` | `.tracking-widest` |\n:::\n\n\n:::\n## Line height\n:::\n\n::: ariaLabel=\"Comparison of Line height linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `.leading-0` | `.leading-none` |\n| `.leading-200` | `.leading-tight` |\n| `.leading-300` | `.leading-snug` |\n| `.leading-400` | `.leading-normal` |\n| `.leading-500` | `.leading-relaxed` |\n| `.leading-600` | `.leading-loose` |\n| `.leading-rem-300` | `.leading-3` |\n| `.leading-rem-400` | `.leading-4` |\n| `.leading-rem-500` | `.leading-5` |\n| `.leading-rem-600` | `.leading-6` |\n| `.leading-rem-700` | `.leading-7` |\n| `.leading-rem-800` | `.leading-8` |\n| `.leading-rem-900` | `.leading-9` |\n| `.leading-rem-1000` | `.leading-10` |\n:::\n\n\n:::\n## Max width\n:::\n\n::: ariaLabel=\"Comparison of Max width linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `.max-w-0` | `.max-w-none` |\n| `.max-w-100` | `.max-w-xs` |\n| `.max-w-200` | `.max-w-sm` |\n| `.max-w-300` | `.max-w-md` |\n| `.max-w-400` | `.max-w-lg` |\n| `.max-w-500` | `.max-w-xl` |\n| `.max-w-600` | `.max-w-2xl` |\n| `.max-w-700` | `.max-w-3xl` |\n| `.max-w-800` | `.max-w-4xl` |\n| `.max-w-900` | `.max-w-5xl` |\n| `.max-w-1000` | `.max-w-6xl` |\n| `.max-w-full` | `.max-w-full` |\n| `.max-w-screen-{breakpoint}` | `.max-w-screen-{breakpoint}` |\n:::\n\n\n:::\n## Spacing\n:::\n\nSpacing values apply to margin, padding, height, width, and grid gap classes. Also, remember that each margin class has a negative equivalent in both Tailwind and Baleada Tailwind Linear.\n\nThe table below uses width classes as an example.\n\n::: ariaLabel=\"Comparison of Spacing linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `w-px` | `w-px` |\n| `.w-0` | `.w-0` |\n| `.w-100` | `.w-1` |\n| `.w-200` | `.w-2` |\n| `.w-300` | `.w-3` |\n| `.w-400` | `.w-4` |\n| `.w-500` | `.w-5` |\n| `.w-600` | `.w-6` |\n| `.w-700` | `.w-8` |\n| `.w-800` | `.w-10` |\n| `.w-900` | `.w-12` |\n| `.w-1000` | `.w-16` |\n| `.w-1100` | `.w-20` |\n| `.w-1200` | `.w-24` |\n| `.w-1300` | `.w-32` |\n| `.w-1400` | `.w-40` |\n| `.w-1500` | `.w-48` |\n| `.w-1600` | `.w-56` |\n| `.w-1700` | `.w-64` |\n:::\n\n\n:::\n## Stroke width\n:::\n\n::: ariaLabel=\"Comparison of Max width linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `.stroke-0` | `.stroke-0` |\n| `.stroke-100` | `.stroke-1` |\n| `.stroke-200` | `.stroke-2` |\n:::\n\n\n:::\n## Transition duration\n:::\n\n::: ariaLabel=\"Comparison of Transition duration linear numeric names and original names\"\n| Baleada | Tailwind |\n| --- | --- |\n| `duration-100` | `duration-75` |\n| `duration-200` | `duration-100` |\n| `duration-300` | `duration-150` |\n| `duration-400` | `duration-200` |\n| `duration-500` | `duration-300` |\n| `duration-600` | `duration-500` |\n| `duration-700` | `duration-700` |\n| `duration-800` | `duration-1000` |\n:::",
    "updatedAt": "2020-02-05T22:08:16.500Z",
    "path": "./assets/md/tailwind-linear/class-references.md",
    "fileName": "class-references",
    "href": "/docs/tailwind-linear/class-references"
  },
  {
    "title": "Default Config",
    "framework": "agnostic",
    "publish": true,
    "order": 2,
    "body": "Below is the full configuration returned by the [`tailwindLinear` function](/docs/tailwind-linear) when all of the function's options are left at their default values.\n\n:::\n```js\n{\n  borderRadius: {\n    '0': '0',\n    '300': '0.125rem',\n    '400': '0.25rem',\n    '500': '0.375rem',\n    '600': '0.5rem',\n    full: '9999px'\n  },\n  borderWidth: { '0': '0', '400': '1px', '500': '2px', '600': '4px', '700': '8px' },\n  boxShadow: {\n    '0': 'none',\n    '200': '0 0 0 1px rgba(0, 0, 0, 0.05)',\n    '300': '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    '400': '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n    '500': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n    '600': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    '700': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n    '800': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n    '-400': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',\n    outline: '0 0 0 3px rgba(66, 153, 225, 0.5)'\n  },\n  colors: {\n    gray: {\n      '100': '#f7fafc',\n      '200': '#edf2f7',\n      '300': '#e2e8f0',\n      '400': '#cbd5e0',\n      '500': '#a0aec0',\n      '600': '#718096',\n      '700': '#4a5568',\n      '800': '#2d3748',\n      '900': '#1a202c'\n    },\n    red: {\n      '100': '#fff5f5',\n      '200': '#fed7d7',\n      '300': '#feb2b2',\n      '400': '#fc8181',\n      '500': '#f56565',\n      '600': '#e53e3e',\n      '700': '#c53030',\n      '800': '#9b2c2c',\n      '900': '#742a2a'\n    },\n    orange: {\n      '100': '#fffaf0',\n      '200': '#feebc8',\n      '300': '#fbd38d',\n      '400': '#f6ad55',\n      '500': '#ed8936',\n      '600': '#dd6b20',\n      '700': '#c05621',\n      '800': '#9c4221',\n      '900': '#7b341e'\n    },\n    yellow: {\n      '100': '#fffff0',\n      '200': '#fefcbf',\n      '300': '#faf089',\n      '400': '#f6e05e',\n      '500': '#ecc94b',\n      '600': '#d69e2e',\n      '700': '#b7791f',\n      '800': '#975a16',\n      '900': '#744210'\n    },\n    green: {\n      '100': '#f0fff4',\n      '200': '#c6f6d5',\n      '300': '#9ae6b4',\n      '400': '#68d391',\n      '500': '#48bb78',\n      '600': '#38a169',\n      '700': '#2f855a',\n      '800': '#276749',\n      '900': '#22543d'\n    },\n    teal: {\n      '100': '#e6fffa',\n      '200': '#b2f5ea',\n      '300': '#81e6d9',\n      '400': '#4fd1c5',\n      '500': '#38b2ac',\n      '600': '#319795',\n      '700': '#2c7a7b',\n      '800': '#285e61',\n      '900': '#234e52'\n    },\n    blue: {\n      '100': '#ebf8ff',\n      '200': '#bee3f8',\n      '300': '#90cdf4',\n      '400': '#63b3ed',\n      '500': '#4299e1',\n      '600': '#3182ce',\n      '700': '#2b6cb0',\n      '800': '#2c5282',\n      '900': '#2a4365'\n    },\n    indigo: {\n      '100': '#ebf4ff',\n      '200': '#c3dafe',\n      '300': '#a3bffa',\n      '400': '#7f9cf5',\n      '500': '#667eea',\n      '600': '#5a67d8',\n      '700': '#4c51bf',\n      '800': '#434190',\n      '900': '#3c366b'\n    },\n    purple: {\n      '100': '#faf5ff',\n      '200': '#e9d8fd',\n      '300': '#d6bcfa',\n      '400': '#b794f4',\n      '500': '#9f7aea',\n      '600': '#805ad5',\n      '700': '#6b46c1',\n      '800': '#553c9a',\n      '900': '#44337a'\n    },\n    pink: {\n      '100': '#fff5f7',\n      '200': '#fed7e2',\n      '300': '#fbb6ce',\n      '400': '#f687b3',\n      '500': '#ed64a6',\n      '600': '#d53f8c',\n      '700': '#b83280',\n      '800': '#97266d',\n      '900': '#702459'\n    }\n  },\n  fontSize: {\n    '200': '0.75rem',\n    '300': '0.875rem',\n    '400': '1rem',\n    '500': '1.125rem',\n    '600': '1.25rem',\n    '700': '1.5rem',\n    '800': '1.875rem',\n    '900': '2.25rem',\n    '1000': '3rem',\n    '1100': '4rem'\n  },\n  fontWeight: {\n    '100': '100',\n    '200': '200',\n    '300': '300',\n    '400': '400',\n    '500': '500',\n    '600': '600',\n    '700': '700',\n    '800': '800',\n    '900': '900'\n  },\n  letterSpacing: {\n    '0': '0',\n    '100': '0.025em',\n    '200': '0.05em',\n    '300': '0.1em',\n    '-200': '-0.05em',\n    '-100': '-0.025em'\n  },\n  lineHeight: {\n    '0': '1',\n    '200': '1.25',\n    '300': '1.375',\n    '400': '1.5',\n    '500': '1.625',\n    '600': '2',\n    'rem-300': '.75rem',\n    'rem-400': '1rem',\n    'rem-500': '1.25rem',\n    'rem-600': '1.5rem',\n    'rem-700': '1.75rem',\n    'rem-800': '2rem',\n    'rem-900': '2.25rem',\n    'rem-1000': '2.5rem',\n  },\n  maxWidth: (theme, { breakpoints }) => ({\n    '0': 'none',\n    '100': '20rem',\n    '200': '24rem',\n    '300': '28rem',\n    '400': '32rem',\n    '500': '36rem',\n    '600': '42rem',\n    '700': '48rem',\n    '800': '56rem',\n    '900': '64rem',\n    '1000': '72rem',\n    full: '100%',\n    ...breakpoints(theme('screens')),\n  }),\n  spacing: {\n    '0': '0',\n    '100': '0.25rem',\n    '200': '0.5rem',\n    '300': '0.75rem',\n    '400': '1rem',\n    '500': '1.25rem',\n    '600': '1.5rem',\n    '700': '2rem',\n    '800': '2.5rem',\n    '900': '3rem',\n    '1000': '4rem',\n    '1100': '5rem',\n    '1200': '6rem',\n    '1300': '8rem',\n    '1400': '10rem',\n    '1500': '12rem',\n    '1600': '14rem',\n    '1700': '16rem',\n    px: '1px'\n  },\n  strokeWidth: {\n    '0': '0',\n    '100': '1',\n    '200': '2',\n  },\n  transitionDuration: {\n    '100': '75ms',\n    '200': '100ms',\n    '300': '150ms',\n    '400': '200ms',\n    '500': '300ms',\n    '600': '500ms',\n    '700': '700ms',\n    '800': '1000ms'\n  }\n}\n```\n:::\n",
    "updatedAt": "2020-02-05T22:17:39.894Z",
    "path": "./assets/md/tailwind-linear/default-config.md",
    "fileName": "default-config",
    "href": "/docs/tailwind-linear/default-config"
  },
  {
    "title": "What is Baleada Tailwind Linear?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Baleada Tailwind Linear is a function that returns theme configurations from [Tailwind](https://tailwindcss.com)'s [default config file](https://github.com/tailwindcss/tailwindcss/blob/master/stubs/defaultConfig.stub.js), aliasing all class names so that they use a linear numeric naming convention.\n\nBy default, it produces class names like the following:\n- `.text-400` instead of `.text-base`\n- `.font-100` instead of `.font-hairline`\n- `.mt-800`, `.mt-900`, and `.mt-1000`, instead of `.mt-10`, `.mt-12`, and `.mt-16`\n\nIt can be customized to produce classes like `.text-4` instead of `.text-400`.\n\nIf you're familiar with the concept of a linear numeric naming convention in Tailwind, you can [jump to the Installation section](#installation). Otherwise, the next section has some helpful background info\n\n:::\n## WTF is a \"linear numeric naming convention\"?\n:::\n\nTailwind uses several different naming conventions for its utility classes.\n\nSome classes, like [transition duration](https://tailwindcss.com/docs/transition-duration), use literal values from the underlying design system:\n- `duration-75` for `75ms`\n- `duration-100` for `100ms`\n- `duration-150` for `150ms`\n\n\nOther classes use \"T-shirt sizes\" in their class names. For example, here are the default [font size](https://tailwindcss.com/docs/font-size) classes:\n- `.text-xs`\n- `.text-sm`\n- `.text-base`\n- `.text-lg`\n- `.text-xl`\n- `.text-2xl`\n- `.text-3xl`\n- `.text-4xl`\n- `.text-5xl`\n- `.text-6xl`\n\nOther classes, like the ones for font weight, use more semantic words:\n- `.font-hairline`\n- `.font-thin`\n- `.font-light`\n- `.font-normal`\n- `.font-medium`\n- `.font-semibold`\n- `.font-bold`\n- `.font-extrabold`\n- `.font-black`\n\nSpacing utilities ([margin](https://tailwindcss.com/docs/margin), [padding](https://tailwindcss.com/docs/padding), [width](https://tailwindcss.com/docs/width), [height](https://tailwindcss.com/docs/height), and [gap](https://tailwindcss.com/docs/gap)), use proportional numeric names. This means that the classes are suffixed with numbers that are proportional to the underlying values.\n\nSpacing utilities multiply the underlying `rem` value by 4 to derive the class name. Here are a few examples from the padding utilities:\n- `.p-1` for `0.25rem`\n- `.p-5` for `1.25rem`\n- `.p-24` for `6rem`\n- `.p-64` for `16rem`\n\nAnd finally, Tailwind's [color](https://tailwindcss.com/docs/color) utilities use a **linear numeric naming convention**. This means that all class suffixes are numbers that increment linearly from one value to the next:\n- `.bg-blue-100`\n- `.bg-blue-200`\n- `.bg-blue-300`\n- `.bg-blue-400`\n- `.bg-blue-500`\n- `.bg-blue-600`\n- `.bg-blue-700`\n- `.bg-blue-800`\n- `.bg-blue-900`\n\n**Literal**, **T-shirt**, **semantic**, **proportional numeric**, and **linear numeric**—all of these naming conventions have their pros and cons. Baleada Tailwind Linear will help you explore the pros and cons of linear numeric class names in your own projects.\n\n\n:::\n## Installation\n:::\n\nBaleada Tailwind Linear can be installed from NPM:\n\n:::\n```bash\nnpm i @baleada/tailwind-linear --save-dev\n```\n:::\n\n\n:::\n## Usage\n:::\n\nTo get started, require `@baleada/tailwind-linear` in your [Tailwind config file](https://tailwindcss.com/docs/configuration). The default export is a function, which we'll call `tailwindLinear` in this example.\n\n:::\n```js\n// tailwind.config.js\nconst tailwindLinear = require('@baleada/tailwind-linear')\n```\n:::\n\nThe `tailwindLinear` returns configurations for the following properties of the `theme` object in your config file:\n- `spacing`\n- `borderRadius`\n- `borderWidth`\n- `boxShadow`\n- `fontSize`\n- `fontWeight`\n- `letterSpacing`\n- `lineHeight`\n- `maxWidth`\n- `colors`\n- `strokeWidth`\n- `transition`\n\nThe function accepts one parameter: an object with options (none of which are required). Here's a full breakdown of that object:\n\n::: ariaLabel=\"tailwindLinear options schema\" classes=\"wide-4\"\n| Property | Value's type | Default | Value description |\n| --- | --- | --- | --- |\n| `only` | Array of Strings | An array of all the properties listed above | Indicates which properties' configurations should be returned by `tailwindLinear`. |\n| `increment` | Number | `100` | <p>Determines how much the class name is incremented for each step up in size.</p><p>For example, if you pass `1` as the `increment`, you'll get class names like `.text-4` and `.text-5` instead of the default `.text-400` and `.text-500`.</p> |\n:::\n\nIf you want to use linear numeric naming for all of these properties, simply spread the output of `tailwindLinear` into your config file.\n\n:::\n```js\n// tailwind.config.js\nconst tailwindLinear = require('@baleada/tailwind-linear')\n\nmodule.exports = {\n  theme: {\n    ...tailwindLinear() // Overrides the default theme (only the properties listed above)\n  }\n}\n```\n:::\n\nIf you only want to use linear numeric naming for some properties, use the `only` option to restrict your list.\n\n:::\n```js\n// tailwind.config.js\nconst tailwindLinear = require('@baleada/tailwind-linear')\n\nmodule.exports = {\n  theme: {\n    ...tailwindLinear({ only: ['spacing'] }) // Overrides the default theme's spacing values, but you'll still get default classes (e.g. .shadow-md) for other properties\n  }\n}\n```\n:::\n\n::: type=\"info\"\nThe default configurations for margin, padding, height, width, and gap all reference your `spacing` object. Including `spacing` in your `tailwindLinear` output will adjust all of those utility classes.\n:::\n\nTo customize the increment that gets used in your class names, use the `increment` option.\n\n:::\n```js\n// tailwind.config.js\nconst tailwindLinear = require('@baleada/tailwind-linear')\n\nmodule.exports = {\n  theme: {\n    ...tailwindLinear({ increment: 1 }) // Produces classes like .text-4 and .text-5 instead of the default .text-400 and .text-500\n  }\n}\n```\n:::\n\nYou can call `tailwindLinear` as many times as you want, so feel free to use the `only` and `increment` options to fine tune class names for individual properties.\n\n:::\n```js\n// tailwind.config.js\nconst tailwindLinear = require('@baleada/tailwind-linear')\n\nmodule.exports = {\n  theme: {\n    ...tailwindLinear({ only: ['fontSize'], increment: 1 }), // .text-4, .text-5, etc.\n    ...tailwindLinear({ only: ['fontWeight'] }) // .font-400, .font-500, etc.\n  }\n}\n```\n:::\n\nAlmost all configurations returned by `tailwindLinear` are plain JavaScript objects, so you can typically spread them out alongside any additional custom values you want to add.\n\nJust remember that you'll have to tack on the property name after your function call to make sure you're spreading your desired configuration object, instead of the parent object `tailwindLinear` returns.\n\n:::\n```js\n// tailwind.config.js\nconst tailwindLinear = require('@baleada/tailwind-linear')\n\nmodule.exports = {\n  theme: {\n    borderWidth: {\n      '550': '3px',\n      ...tailwindLinear({ only: ['borderWidth'] }).borderWidth, // Spreads in all the default borderWidth values\n    }\n  }\n}\n```\n:::\n\nTo expand on that concept: `tailwindLinear` returns a full colors object for the `colors` property. If you want to access a single color, you can tack on `.colors` and the color name right after your function call:\n\n:::\n```js\n// tailwind.config.js\nconst tailwindLinear = require('@baleada/tailwind-linear')\n\nmodule.exports = {\n  theme: {\n    colors: {\n      blue: tailwindLinear({ only: ['colors'], increment: 1 }).colors.blue, // .bg-blue-1, .bg-blue-2, etc.\n      gray: {\n        ...tailwindLinear({ only: ['colors'] }).colors.gray, // .bg-gray-100, .bg-gray-200, etc.\n        '1000': 'hsla(217, 30%, 8%, 1.0)',\n      }\n    }\n  }\n}\n```\n:::\n\n\nThe only property for which `tailwindLinear` *doesn't* return a plain Javascript object is `maxWidth`.\n\nFor `maxWidth`, `tailwindLinear` returns a function, just like the one found in [Tailwind's default config](https://github.com/tailwindcss/tailwindcss/blob/master/stubs/defaultConfig.stub.js). To add additional values to your `maxWidth` config, you'll need to pass Tailwind's `theme` function and `configUtils` object to that function, using [Tailwind's closure syntax](https://tailwindcss.com/docs/theme#referencing-other-values) like so:\n\n\n:::\n```js\n// tailwind.config.js\nconst tailwindLinear = require('@baleada/tailwind-linear')\n\nmodule.exports = {\n  theme: {\n    maxWidth: (theme, configUtils) => ({\n      ...tailwindLinear({ only: ['maxWidth'] }).maxWidth(theme, configUtils), // Generates and spreads in the maxWidth config object\n      '420': '420px',\n    }),\n  }\n}\n```\n:::\n\n\n:::\n## Naming convention rules\n:::\n\nOk, so Baleada Tailwind Linear uses linear numeric names—but where does the numbering start? How are \"default\" classes handled?\n\nBaleada Tailwind Linear follows the rules below, in their exact order, to answer those questions individually for each property:\n1. Properties that already have linear numeric names (just color, at the moment) are not changed from their original naming scheme, except to support different increments using `tailwindLinear`'s `increment` option.\n1. Anything with an underlying value of `0` or `none` (e.g. `.tracking-normal` and `shadow-none`) is named with the number `0`.\n\n    Then, starting at the `0` class, Baleada Tailwind Linear increments in both directions, both negative and positive. Note that keys like `-100` in the config file will create classes like `.-tracking-100`.\n1. If there is no `0` value for the property, but there is a value assigned to a `default`, `normal`, or `base` key, Baleada Tailwind Linear renames default/normal/base with `400`. This follows the CSS convention of using `400` for normal font weight.\n\n    Then, Baleada Tailwind Linear increments in both directions from the `400` class. Note that this sometimes results in certain properties (e.g. `borderWidth`) having `400` classes, but not having classes for `100`, `200`, or `300`.\n\n    Tailwind's `.shadow-inner` is treated as a default negative shadow, and is assigned a key of `-400` (which produces the class `.-shadow-400`).\n1. Proportions (e.g. `full: 100%`), key words (e.g. `auto` and `outline`), and screen breakpoints (applicable for `max-width` utilities) are left unchanged.\n1. If the unit (e.g. `px`) is specified in the default Tailwind class, it's left unchanged.\n2. If a default Tailwind property includes a secondary set of values with different units, the Baleada Tailwind Linear follows all the above rules to name those secondary values' classes, and finally includes the unit (and an extra hyphen) in the middle of the class name.\n\n    For example, default `lineHeight` values include both relative values (e.g. `1`, `1.25`, etc.) and fixed values using `rem` units (e.g. `1rem`, `1.25rem`, etc.). Baleada Tailwind Linear follows all the above naming rules to name the relative and fixed values, then, to avoid naming collisions, adds `-rem-` to the middle of the class name for all `rem` values.\n\n    This produces classes like `.leading-300` (relative line height of `1.375`) and `.leading-rem-300` (fixed line height of `0.75rem`).\n\nOnce you get used to the naming convention, you'll find that classes become very easy to guess without visiting your config file or these docs.\n\nBut, if you have any doubts, check out the [class references](/docs/tailwind-linear/class-references) to see classes are being generated for each property, and how they match up with the original Tailwind classes.\n\nAlso, feel free to peruse the [full default config](/docs/tailwind-linear/default-config) returned by the `tailwindLinear` function if you're curious about specific underlying values.\n\n\n:::\n## Language, compilation, browser support, and dependencies\n:::\n\nBaleada Tailwind Linear is written in modern JavaScript, exported using CommonJS modules, and is not compiled. It's not designed to be used in the browser, but instead will most often be used in the Node environment where you are configuring Tailwind.\n\nBaleada Tailwind Linear has no dependencies, although it does require Tailwind as a peer dependency.\n\n\n\n:::\n## Semantic versioning conventions\n:::\n\nIn Baleada Tailwind Linear, the only thing that will ever trigger a new major version is a change to the underlying naming convention outlined above.\n\nFrom time to time, Tailwind's default config file changes, usually to support new properties, and sometimes to expand the design system and add values for existing properties. When this happens, any necessary updates to Baleada Tailwind Linear will be released as a new minor version, even if the linear numeric naming convention gets applied in a different way.\n\nFor example, Tailwind 1.2 introduced a new value for the `borderRadius` property, between two existing values, and it also added the `transitionDuration` and `strokeWidth` properties (among others). In response, Baleada Tailwind Linear was updated in the following ways:\n- Baleada Tailwind Linear's `borderRadius.500` was changed to `borderRadius.600`, and the new value was inserted as `borderRadius.500`.\n- The `transitionDuration` and `strokeWidth` properties were added to the config object returned by Baleada Tailwind Linear\n- Baleada Tailwind Linear released a new minor version\n\nAfter Tailwind 1.2 was released, anyone using the `.rounded-500` class generated by Baleada Tailwind Linear would have had to change all occurrences of that class to `.rounded-600` in their code. \n\nThis kind of impact is characteristic of a breaking change and a new major version. However, since it was a Tailwind design system change and not a change to the rules of the linear numeric naming convention, only a new minor version was released.\n",
    "updatedAt": "2020-02-10T18:16:47.332Z",
    "path": "./assets/md/tailwind-linear/index.md",
    "fileName": "index",
    "href": "/docs/tailwind-linear"
  },
  {
    "title": "Types of tools",
    "framework": "agnostic",
    "publish": true,
    "order": 1,
    "body": "Each tool in the Baleada app-building toolkit falls into one of the following categories:\n- [UI logic](#ui-logic)\n- [Composition functions (a.k.a. hooks)](#composition-functions-a-k-a-hooks)\n- [Icon components](#icon-components)\n\nEach category of tools has its own NPM package that you can install:\n\n::: ariaLabel=\"Table showing tool categories and the corresponding NPM package for each category\"\n| Tool category | NPM package |\n| --- | --- |\n| UI logic | `@baleada/logic` |\n| Composition functions | `@baleada/composition` |\n| Icon components | `@baleada/icons` |\n:::\n\nIf you're itching to install those packages and get started with the tools they offer, you can check out the dedicated guides for [Baleada Logic](/docs/logic), [Baleada Composition](/docs/composition), and [Baleada Icons](/docs/icons).\n\nIf you're not quite sure what all these terms mean, feel free to keep reading!\n\n:::\n## UI logic\n:::\n\nBroadly, UI logic is JavaScript that powers **user interface behaviors**. Baleada provides UI logic for specific behaviors that are commonly needed, but can be complex to implement in a reusable way.\n\nFor example:\n:::\n- Allowing the user to enter a search term, query an array of strings or objects, and receive a list of search results based on fuzzy matches\n- Autocompleting text, replacing all or part of the original text with a completed value\n- Detecting and reacting to common gestures (pan, swipe, double-tap, drag, drag-and-drop, etc.), or even custom gestures that you define\n:::\n\nTo get started with Baleada's logic, check out the [Baleada Logic](/docs/logic) package.\n\n:::\n## Composition functions (a.k.a. hooks)\n:::\n\n\"Composition function\" is a term coined by the [Vue](https://vuejs.org) team to describe functions that **collocate code** related to the same logical concern. In [React](https://react.org), these functions are called \"hooks\", but the concept and motivations are virtually the same.\n\nBaleada's composition functions collocate **reactivity** code with **UI logic** code. More specifically, each Baleada composition function retrieves state and methods from one or more of the Baleada Logic tools, then makes all of the state reactive, using tools from the JavaScript framework of your choice.\n\nTo get started with Baleada's composition functions, check out the [Baleada Composition](/docs/composition) package.\n\n:::\n## Icon components\n:::\n\nThere are [tons of reasons](http://www.fullstackradio.com/47) to use **true SVG icons** instead of icon fonts. But copy/pasting SVG markup all over your website or app is tedious, not readable, and not maintainable.\n\nIf you're using a component framework like Vue, React, or Svelte, the clear solution is to wrap up your SVG icons in reusable components, so that you get all the benefits of SVGs while writing efficient code.\n\nBaleada's icon components do just that! To get started with them, check out the [Baleada Icons](/docs/icons) package.\n",
    "updatedAt": "2019-12-20T04:59:09.145Z",
    "path": "./assets/md/types-of-tools.md",
    "fileName": "types-of-tools",
    "href": "/docs/types-of-tools"
  }
]