[
  {
    "title": "What is Baleada Composition?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Baleada Composition is a collection of composition functions (a.k.a. hooks) that accomplish two things:\n1. Retrieve **state and methods** from one or more of the <NuxtLink to=\"/docs/logic\">Baleada Logic</NuxtLink> tools\n2. Make all of the state **reactive**, using tools from the JavaScript framework of your choice\n\n<ProseAside type=\"info\">\nBaleada's docs, which were built using [Nuxt.js](https://nuxtjs.org), use composition functions for touch detection, animation, navigating arrays, searching docs content, and more 🚀\n</ProseAside>\n\nComposition functions are supported for the following frameworks:\n- [Vue](https://vuejs.org)\n- [React](https://react.org) [WIP]\n- [Svelte](https://svelte.dev) [WIP]\n\n<ProseAside type=\"info\">\nDidn't see your favorite framework in the list? Feel free to [raise an issue](https://gitlab.com/baleada/composition/issues) and ask for support.\n</ProseAside>\n\n\n<ProseHeading level=\"2\">\nInstall\n</ProseHeading>\n\n<ProseCodeblock>\n```bash\nnpm i @baleada/composition\n```\n</ProseCodeblock>\n\n\n<ProseHeading level=\"2\">\nAvailable composition functions\n</ProseHeading>\n\n`@baleada/composition` includes a composition function for each individual class in Baleada Logic.\n\nAll composition functions follow a simple naming convention: they start with `use` and end with the name of the class.\n\n<ProseTable>\n| Library | Composition function |\n| --- | --- |\n| Animatable | `useAnimatable` |\n| Fetchable | `useFetchable` |\n| Syncable | `useSyncable` |\n</ProseTable>\n",
    "updatedAt": "2019-10-09T18:53:52.424Z",
    "path": "./assets/md/composition/index.md",
    "fileName": "index",
    "href": "/docs/composition"
  },
  {
    "title": "Using Baleada Composition with React",
    "framework": "React",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-22T06:51:25.227Z",
    "path": "./assets/md/composition/using-with-react.md",
    "fileName": "using-with-react",
    "href": "/docs/composition/using-with-react"
  },
  {
    "title": "Using Baleada Composition with Svelte",
    "framework": "Svelte",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-22T06:51:37.752Z",
    "path": "./assets/md/composition/using-with-svelte.md",
    "fileName": "using-with-svelte",
    "href": "/docs/composition/using-with-svelte"
  },
  {
    "title": "Using Baleada Composition with Vue",
    "framework": "Vue",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-22T06:51:32.922Z",
    "path": "./assets/md/composition/using-with-vue.md",
    "fileName": "using-with-vue",
    "href": "/docs/composition/using-with-vue"
  },
  {
    "title": "What is Baleada Icons?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Baleada Icons is a collection of components that render SVG icons.\n\n<ProseAside type=\"info\">\nAll icons used in the Baleada docs are sourced from Baleada Icons 😎\n</ProseAside>\n\nIcons are sourced from the following icon sets:\n- [Simple Icons](https://simpleicons.org/)\n- [Eva Icons](https://akveo.github.io/eva-icons/)\n\nEach icon in those sets has a corresponding component for the following frameworks:\n- [Vue](https://vuejs.org/)\n- [React](https://reactjs.org/)\n- [Svelte](https://svelte.dev) [WIP]\n\n<ProseAside type=\"info\">\nDidn't see your favorite icon set or framework in the list? Feel free to [raise an issue](https://gitlab.com/baleada/icons/issues) and ask for support.\n</ProseAside>\n\n\n<ProseHeading level=\"2\">\nInstall\n</ProseHeading>\n\n<ProseCodeblock>\n```bash\nnpm i @baleada/icons\n```\n</ProseCodeblock>\n\n<ProseHeading level=\"2\">\nAvailable components\n</ProseHeading>\n\n`@baleada/icons` includes a component for each individual icon in the Eva Icons and Simple Icons icon sets.\n\nAll components follow a simple naming convention: they start with `Eva` or `Simple` depending on which set they are from, and end with the name of the icon.\n\nEva icons' names are created by removing all hyphens and capitalizing the first letter of each word.\n\nEva icon component examples:\n\n<ProseTable ariaLabel=\"Table of examples showing how Baleada transforms Eva icon names into component names\">\n| Original icon name | Component name |\n| --- | --- |\n| bulb | `EvaBulb` |\n| hard-drive-outline | `EvaHardDriveOutline` |\n| globe-2 | `EvaGlobe2` |\n</ProseTable>\n\nSimple icons' names are created by:\n1. Removing all spaces, exclamation points, and apostrophes\n2. Replacing special characters as indicated in the table below\n3. Capitalizing the first letter of each word and **preserving** the original case of other letters in the word\n\n<ProseTable ariaLabel=\"Table showing how Baleada replaces special characters in Simple icon names\">\n| Special character | Replacement |\n| --- | --- |\n| `.` | Dot |\n| `&` | And |\n| `+` | Plus |\n| `à`, `á`, `â`, `ã`, `ä` | a |\n| `ç` | c |\n| `è`, `é`, `ê`, `ë` | e |\n| `ì`, `í`, `î`, `ï` | i |\n| `ñ` | n |\n| `ò`, `ó`, `ô`, `õ`, `ö` | o |\n| `ù`, `ú`, `û`, `ü` | u |\n| `ý`, `ÿ` | y |\n</ProseTable>\n\nSimple icon component examples:\n\n<ProseTable ariaLabel=\"Table of examples showing how Baleada transforms Simple icon names into component names\">\n| Original icon name | Component name | Notice: |\n| --- | --- | --- |\n| Geocaching | `SimpleGeocaching` | Nothing special here! |\n| Khan Academy | `SimpleKhanAcademy` | Space removed |\n| PHP | `SimplePHP` | Original case of PHP is preserved |\n| Vue.js | `SimpleVueDotJs` | `.` replaced with `Dot`, `js` capitalized to `Js` |\n| C++ | `SimpleCPlusPlus` | `++` replaced with `PlusPlus` |\n| AT&T | `SimpleATAndT` | `&` replaced with `And`, original cases of `AT` and `T` are preserved |\n| AlloCiné | `SimpleAlloCine` | `é` replaced with `e`, original case of the `C` is preserved |\n</ProseTable>\n\nFor a full list of available components, <NuxtLink to=\"#full-component-list\">jump to the last section of this article</NuxtLink>.\n\n\n<ProseHeading level=\"2\">\nImport and use the components\n</ProseHeading>\n\nFor more guidance on how to import and use the components, see one of the following framework-specific guides:\n- <NuxtLink to=\"/docs/icons/using-with-vue\">Using icons with Vue</NuxtLink>\n- <NuxtLink to=\"/docs/icons/using-with-react\">Use icons with React</NuxtLink>\n\n\n<ProseHeading level=\"2\">\nFull component list\n</ProseHeading>\n\n<ProseTable hasMaxH isTypeToFilterable ariaLabel=\"Full list of Baleada Icons components\">\n| Component name |\n| --- |\n| EvaActivity |\n| EvaActivityOutline |\n| EvaAlertCircle |\n| EvaAlertCircleOutline |\n| EvaAlertTriangle |\n| EvaAlertTriangleOutline |\n| EvaArchive |\n| EvaArchiveOutline |\n| EvaArrowBack |\n| EvaArrowBackOutline |\n| EvaArrowCircleDown |\n| EvaArrowCircleDownOutline |\n| EvaArrowCircleLeft |\n| EvaArrowCircleLeftOutline |\n| EvaArrowCircleRight |\n| EvaArrowCircleRightOutline |\n| EvaArrowCircleUp |\n| EvaArrowCircleUpOutline |\n| EvaArrowDown |\n| EvaArrowDownOutline |\n| EvaArrowDownward |\n| EvaArrowDownwardOutline |\n| EvaArrowForward |\n| EvaArrowForwardOutline |\n| EvaArrowIosBack |\n| EvaArrowIosBackOutline |\n| EvaArrowIosDownward |\n| EvaArrowIosDownwardOutline |\n| EvaArrowIosForward |\n| EvaArrowIosForwardOutline |\n| EvaArrowIosUpward |\n| EvaArrowIosUpwardOutline |\n| EvaArrowLeft |\n| EvaArrowLeftOutline |\n| EvaArrowRight |\n| EvaArrowRightOutline |\n| EvaArrowUp |\n| EvaArrowUpOutline |\n| EvaArrowUpward |\n| EvaArrowUpwardOutline |\n| EvaArrowheadDown |\n| EvaArrowheadDownOutline |\n| EvaArrowheadLeft |\n| EvaArrowheadLeftOutline |\n| EvaArrowheadRight |\n| EvaArrowheadRightOutline |\n| EvaArrowheadUp |\n| EvaArrowheadUpOutline |\n| EvaAt |\n| EvaAtOutline |\n| EvaAttach |\n| EvaAttach2 |\n| EvaAttach2Outline |\n| EvaAttachOutline |\n| EvaAward |\n| EvaAwardOutline |\n| EvaBackspace |\n| EvaBackspaceOutline |\n| EvaBarChart |\n| EvaBarChart2 |\n| EvaBarChart2Outline |\n| EvaBarChartOutline |\n| EvaBattery |\n| EvaBatteryOutline |\n| EvaBehance |\n| EvaBehanceOutline |\n| EvaBell |\n| EvaBellOff |\n| EvaBellOffOutline |\n| EvaBellOutline |\n| EvaBluetooth |\n| EvaBluetoothOutline |\n| EvaBook |\n| EvaBookOpen |\n| EvaBookOpenOutline |\n| EvaBookOutline |\n| EvaBookmark |\n| EvaBookmarkOutline |\n| EvaBriefcase |\n| EvaBriefcaseOutline |\n| EvaBrowser |\n| EvaBrowserOutline |\n| EvaBrush |\n| EvaBrushOutline |\n| EvaBulb |\n| EvaBulbOutline |\n| EvaCalendar |\n| EvaCalendarOutline |\n| EvaCamera |\n| EvaCameraOutline |\n| EvaCar |\n| EvaCarOutline |\n| EvaCast |\n| EvaCastOutline |\n| EvaCharging |\n| EvaChargingOutline |\n| EvaCheckmark |\n| EvaCheckmarkCircle |\n| EvaCheckmarkCircle2 |\n| EvaCheckmarkCircle2Outline |\n| EvaCheckmarkCircleOutline |\n| EvaCheckmarkOutline |\n| EvaCheckmarkSquare |\n| EvaCheckmarkSquare2 |\n| EvaCheckmarkSquare2Outline |\n| EvaCheckmarkSquareOutline |\n| EvaChevronDown |\n| EvaChevronDownOutline |\n| EvaChevronLeft |\n| EvaChevronLeftOutline |\n| EvaChevronRight |\n| EvaChevronRightOutline |\n| EvaChevronUp |\n| EvaChevronUpOutline |\n| EvaClipboard |\n| EvaClipboardOutline |\n| EvaClock |\n| EvaClockOutline |\n| EvaClose |\n| EvaCloseCircle |\n| EvaCloseCircleOutline |\n| EvaCloseOutline |\n| EvaCloseSquare |\n| EvaCloseSquareOutline |\n| EvaCloudDownload |\n| EvaCloudDownloadOutline |\n| EvaCloudUpload |\n| EvaCloudUploadOutline |\n| EvaCode |\n| EvaCodeDownload |\n| EvaCodeDownloadOutline |\n| EvaCodeOutline |\n| EvaCollapse |\n| EvaCollapseOutline |\n| EvaColorPalette |\n| EvaColorPaletteOutline |\n| EvaColorPicker |\n| EvaColorPickerOutline |\n| EvaCompass |\n| EvaCompassOutline |\n| EvaCopy |\n| EvaCopyOutline |\n| EvaCornerDownLeft |\n| EvaCornerDownLeftOutline |\n| EvaCornerDownRight |\n| EvaCornerDownRightOutline |\n| EvaCornerLeftDown |\n| EvaCornerLeftDownOutline |\n| EvaCornerLeftUp |\n| EvaCornerLeftUpOutline |\n| EvaCornerRightDown |\n| EvaCornerRightDownOutline |\n| EvaCornerRightUp |\n| EvaCornerRightUpOutline |\n| EvaCornerUpLeft |\n| EvaCornerUpLeftOutline |\n| EvaCornerUpRight |\n| EvaCornerUpRightOutline |\n| EvaCreditCard |\n| EvaCreditCardOutline |\n| EvaCrop |\n| EvaCropOutline |\n| EvaCube |\n| EvaCubeOutline |\n| EvaDiagonalArrowLeftDown |\n| EvaDiagonalArrowLeftDownOutline |\n| EvaDiagonalArrowLeftUp |\n| EvaDiagonalArrowLeftUpOutline |\n| EvaDiagonalArrowRightDown |\n| EvaDiagonalArrowRightDownOutline |\n| EvaDiagonalArrowRightUp |\n| EvaDiagonalArrowRightUpOutline |\n| EvaDoneAll |\n| EvaDoneAllOutline |\n| EvaDownload |\n| EvaDownloadOutline |\n| EvaDroplet |\n| EvaDropletOff |\n| EvaDropletOffOutline |\n| EvaDropletOutline |\n| EvaEdit |\n| EvaEdit2 |\n| EvaEdit2Outline |\n| EvaEditOutline |\n| EvaEmail |\n| EvaEmailOutline |\n| EvaExpand |\n| EvaExpandOutline |\n| EvaExternalLink |\n| EvaExternalLinkOutline |\n| EvaEye |\n| EvaEyeOff |\n| EvaEyeOff2 |\n| EvaEyeOff2Outline |\n| EvaEyeOffOutline |\n| EvaEyeOutline |\n| EvaFacebook |\n| EvaFacebookOutline |\n| EvaFile |\n| EvaFileAdd |\n| EvaFileAddOutline |\n| EvaFileOutline |\n| EvaFileRemove |\n| EvaFileRemoveOutline |\n| EvaFileText |\n| EvaFileTextOutline |\n| EvaFilm |\n| EvaFilmOutline |\n| EvaFlag |\n| EvaFlagOutline |\n| EvaFlash |\n| EvaFlashOff |\n| EvaFlashOffOutline |\n| EvaFlashOutline |\n| EvaFlip |\n| EvaFlip2 |\n| EvaFlip2Outline |\n| EvaFlipOutline |\n| EvaFolder |\n| EvaFolderAdd |\n| EvaFolderAddOutline |\n| EvaFolderOutline |\n| EvaFolderRemove |\n| EvaFolderRemoveOutline |\n| EvaFunnel |\n| EvaFunnelOutline |\n| EvaGift |\n| EvaGiftOutline |\n| EvaGithub |\n| EvaGithubOutline |\n| EvaGlobe |\n| EvaGlobe2 |\n| EvaGlobe2Outline |\n| EvaGlobe3 |\n| EvaGlobeOutline |\n| EvaGoogle |\n| EvaGoogleOutline |\n| EvaGrid |\n| EvaGridOutline |\n| EvaHardDrive |\n| EvaHardDriveOutline |\n| EvaHash |\n| EvaHashOutline |\n| EvaHeadphones |\n| EvaHeadphonesOutline |\n| EvaHeart |\n| EvaHeartOutline |\n| EvaHome |\n| EvaHomeOutline |\n| EvaImage |\n| EvaImage2 |\n| EvaImageOutline |\n| EvaInbox |\n| EvaInboxOutline |\n| EvaInfo |\n| EvaInfoOutline |\n| EvaKeypad |\n| EvaKeypadOutline |\n| EvaLayers |\n| EvaLayersOutline |\n| EvaLayout |\n| EvaLayoutOutline |\n| EvaLink |\n| EvaLink2 |\n| EvaLink2Outline |\n| EvaLinkOutline |\n| EvaLinkedin |\n| EvaLinkedinOutline |\n| EvaList |\n| EvaListOutline |\n| EvaLoaderOutline |\n| EvaLock |\n| EvaLockOutline |\n| EvaLogIn |\n| EvaLogInOutline |\n| EvaLogOut |\n| EvaLogOutOutline |\n| EvaMap |\n| EvaMapOutline |\n| EvaMaximize |\n| EvaMaximizeOutline |\n| EvaMenu |\n| EvaMenu2 |\n| EvaMenu2Outline |\n| EvaMenuArrow |\n| EvaMenuArrowOutline |\n| EvaMenuOutline |\n| EvaMessageCircle |\n| EvaMessageCircleOutline |\n| EvaMessageSquare |\n| EvaMessageSquareOutline |\n| EvaMic |\n| EvaMicOff |\n| EvaMicOffOutline |\n| EvaMicOutline |\n| EvaMinimize |\n| EvaMinimizeOutline |\n| EvaMinus |\n| EvaMinusCircle |\n| EvaMinusCircleOutline |\n| EvaMinusOutline |\n| EvaMinusSquare |\n| EvaMinusSquareOutline |\n| EvaMonitor |\n| EvaMonitorOutline |\n| EvaMoon |\n| EvaMoonOutline |\n| EvaMoreHorizontal |\n| EvaMoreHorizontalOutline |\n| EvaMoreVertical |\n| EvaMoreVerticalOutline |\n| EvaMove |\n| EvaMoveOutline |\n| EvaMusic |\n| EvaMusicOutline |\n| EvaNavigation |\n| EvaNavigation2 |\n| EvaNavigation2Outline |\n| EvaNavigationOutline |\n| EvaNpm |\n| EvaNpmOutline |\n| EvaOptions |\n| EvaOptions2 |\n| EvaOptions2Outline |\n| EvaOptionsOutline |\n| EvaPantone |\n| EvaPantoneOutline |\n| EvaPaperPlane |\n| EvaPaperPlaneOutline |\n| EvaPauseCircle |\n| EvaPauseCircleOutline |\n| EvaPeople |\n| EvaPeopleOutline |\n| EvaPercent |\n| EvaPercentOutline |\n| EvaPerson |\n| EvaPersonAdd |\n| EvaPersonAddOutline |\n| EvaPersonDelete |\n| EvaPersonDeleteOutline |\n| EvaPersonDone |\n| EvaPersonDoneOutline |\n| EvaPersonOutline |\n| EvaPersonRemove |\n| EvaPersonRemoveOutline |\n| EvaPhone |\n| EvaPhoneCall |\n| EvaPhoneCallOutline |\n| EvaPhoneMissed |\n| EvaPhoneMissedOutline |\n| EvaPhoneOff |\n| EvaPhoneOffOutline |\n| EvaPhoneOutline |\n| EvaPieChart |\n| EvaPieChart2 |\n| EvaPieChartOutline |\n| EvaPin |\n| EvaPinOutline |\n| EvaPlayCircle |\n| EvaPlayCircleOutline |\n| EvaPlus |\n| EvaPlusCircle |\n| EvaPlusCircleOutline |\n| EvaPlusOutline |\n| EvaPlusSquare |\n| EvaPlusSquareOutline |\n| EvaPower |\n| EvaPowerOutline |\n| EvaPricetags |\n| EvaPricetagsOutline |\n| EvaPrinter |\n| EvaPrinterOutline |\n| EvaQuestionMark |\n| EvaQuestionMarkCircle |\n| EvaQuestionMarkCircleOutline |\n| EvaQuestionMarkOutline |\n| EvaRadio |\n| EvaRadioButtonOff |\n| EvaRadioButtonOffOutline |\n| EvaRadioButtonOn |\n| EvaRadioButtonOnOutline |\n| EvaRadioOutline |\n| EvaRecording |\n| EvaRecordingOutline |\n| EvaRefresh |\n| EvaRefreshOutline |\n| EvaRepeat |\n| EvaRepeatOutline |\n| EvaRewindLeft |\n| EvaRewindLeftOutline |\n| EvaRewindRight |\n| EvaRewindRightOutline |\n| EvaSave |\n| EvaSaveOutline |\n| EvaScissors |\n| EvaScissorsOutline |\n| EvaSearch |\n| EvaSearchOutline |\n| EvaSettings |\n| EvaSettings2 |\n| EvaSettings2Outline |\n| EvaSettingsOutline |\n| EvaShake |\n| EvaShakeOutline |\n| EvaShare |\n| EvaShareOutline |\n| EvaShield |\n| EvaShieldOff |\n| EvaShieldOffOutline |\n| EvaShieldOutline |\n| EvaShoppingBag |\n| EvaShoppingBagOutline |\n| EvaShoppingCart |\n| EvaShoppingCartOutline |\n| EvaShuffle |\n| EvaShuffle2 |\n| EvaShuffle2Outline |\n| EvaShuffleOutline |\n| EvaSkipBack |\n| EvaSkipBackOutline |\n| EvaSkipForward |\n| EvaSkipForwardOutline |\n| EvaSlash |\n| EvaSlashOutline |\n| EvaSmartphone |\n| EvaSmartphoneOutline |\n| EvaSpeaker |\n| EvaSpeakerOutline |\n| EvaSquare |\n| EvaSquareOutline |\n| EvaStar |\n| EvaStarOutline |\n| EvaStopCircle |\n| EvaStopCircleOutline |\n| EvaSun |\n| EvaSunOutline |\n| EvaSwap |\n| EvaSwapOutline |\n| EvaSync |\n| EvaSyncOutline |\n| EvaText |\n| EvaTextOutline |\n| EvaThermometer |\n| EvaThermometerMinus |\n| EvaThermometerMinusOutline |\n| EvaThermometerOutline |\n| EvaThermometerPlus |\n| EvaThermometerPlusOutline |\n| EvaToggleLeft |\n| EvaToggleLeftOutline |\n| EvaToggleRight |\n| EvaToggleRightOutline |\n| EvaTrash |\n| EvaTrash2 |\n| EvaTrash2Outline |\n| EvaTrashOutline |\n| EvaTrendingDown |\n| EvaTrendingDownOutline |\n| EvaTrendingUp |\n| EvaTrendingUpOutline |\n| EvaTv |\n| EvaTvOutline |\n| EvaTwitter |\n| EvaTwitterOutline |\n| EvaUmbrella |\n| EvaUmbrellaOutline |\n| EvaUndo |\n| EvaUndoOutline |\n| EvaUnlock |\n| EvaUnlockOutline |\n| EvaUpload |\n| EvaUploadOutline |\n| EvaVideo |\n| EvaVideoOff |\n| EvaVideoOffOutline |\n| EvaVideoOutline |\n| EvaVolumeDown |\n| EvaVolumeDownOutline |\n| EvaVolumeMute |\n| EvaVolumeMuteOutline |\n| EvaVolumeOff |\n| EvaVolumeOffOutline |\n| EvaVolumeUp |\n| EvaVolumeUpOutline |\n| EvaWifi |\n| EvaWifiOff |\n| EvaWifiOffOutline |\n| EvaWifiOutline |\n| Simple500px |\n| SimpleACM |\n| SimpleAMD |\n| SimpleARAL |\n| SimpleATAndT |\n| SimpleAboutDotMe |\n| SimpleAddThis |\n| SimpleAdobe |\n| SimpleAdobeAcrobatReader |\n| SimpleAdobeAfterEffects |\n| SimpleAdobeAudition |\n| SimpleAdobeCreativeCloud |\n| SimpleAdobeDreamweaver |\n| SimpleAdobeIllustrator |\n| SimpleAdobeInDesign |\n| SimpleAdobeLightroomCC |\n| SimpleAdobeLightroomClassic |\n| SimpleAdobePhotoshop |\n| SimpleAdobePremiere |\n| SimpleAdobeTypekit |\n| SimpleAdobeXD |\n| SimpleAirbnb |\n| SimpleAlloCine |\n| SimpleAmazon |\n| SimpleAmazonAWS |\n| SimpleAmericanExpress |\n| SimpleAndroid |\n| SimpleAngelList |\n| SimpleAngular |\n| SimpleAngularUniversal |\n| SimpleAnsible |\n| SimpleApache |\n| SimpleApacheFlink |\n| SimpleAppVeyor |\n| SimpleApple |\n| SimpleAppleMusic |\n| SimpleApplePay |\n| SimpleArchLinux |\n| SimpleArchiveOfOurOwn |\n| SimpleArduino |\n| SimpleArtStation |\n| SimpleAsana |\n| SimpleAtlassian |\n| SimpleAtom |\n| SimpleAudible |\n| SimpleAurelia |\n| SimpleAuth0 |\n| SimpleAutomatic |\n| SimpleAutotask |\n| SimpleAventrix |\n| SimpleAzureDevOps |\n| SimpleAzurePipelines |\n| SimpleBabel |\n| SimpleBaidu |\n| SimpleBamboo |\n| SimpleBandcamp |\n| SimpleBasecamp |\n| SimpleBathASU |\n| SimpleBeats |\n| SimpleBehance |\n| SimpleBigCartel |\n| SimpleBing |\n| SimpleBit |\n| SimpleBitbucket |\n| SimpleBitcoin |\n| SimpleBitdefender |\n| SimpleBitly |\n| SimpleBlender |\n| SimpleBlogger |\n| SimpleBoeing |\n| SimpleBoost |\n| SimpleBootstrap |\n| SimpleBower |\n| SimpleBrandDotAi |\n| SimpleBrave |\n| SimpleBuddy |\n| SimpleBuffer |\n| SimpleBuyMeACoffee |\n| SimpleBuzzFeed |\n| SimpleCEVO |\n| SimpleCMake |\n| SimpleCPlusPlus |\n| SimpleCSS3 |\n| SimpleCSSWizardry |\n| SimpleCakePHP |\n| SimpleCampaignMonitor |\n| SimpleCanva |\n| SimpleCashApp |\n| SimpleCassandra |\n| SimpleCastorama |\n| SimpleCastro |\n| SimpleChase |\n| SimpleChef |\n| SimpleCircle |\n| SimpleCircleCI |\n| SimpleCirrusCI |\n| SimpleCiviCRM |\n| SimpleClockify |\n| SimpleClojure |\n| SimpleCloudBees |\n| SimpleCloudflare |\n| SimpleCoOp |\n| SimpleCodacy |\n| SimpleCodeClimate |\n| SimpleCodeIgniter |\n| SimpleCodePen |\n| SimpleCodeSandbox |\n| SimpleCodecademy |\n| SimpleCodecov |\n| SimpleCodeforces |\n| SimpleCoderwall |\n| SimpleCodeship |\n| SimpleCodewars |\n| SimpleCodio |\n| SimpleCoffeeScript |\n| SimpleCommonWorkflowLanguage |\n| SimpleComposer |\n| SimpleComproPago |\n| SimpleCondaForge |\n| SimpleConekta |\n| SimpleConfluence |\n| SimpleCoursera |\n| SimpleCreativeCommons |\n| SimpleCrunchbase |\n| SimpleCrunchyroll |\n| SimpleD3DotJs |\n| SimpleDAZN |\n| SimpleDTube |\n| SimpleDailymotion |\n| SimpleDashlane |\n| SimpleDassaultSystemes |\n| SimpleDblp |\n| SimpleDebian |\n| SimpleDeepin |\n| SimpleDeezer |\n| SimpleDelicious |\n| SimpleDell |\n| SimpleDeno |\n| SimpleDependabot |\n| SimpleDesignerNews |\n| SimpleDevDotTo |\n| SimpleDevRant |\n| SimpleDeviantArt |\n| SimpleDiaspora |\n| SimpleDigg |\n| SimpleDigitalOcean |\n| SimpleDiscord |\n| SimpleDiscourse |\n| SimpleDiscover |\n| SimpleDisqus |\n| SimpleDisroot |\n| SimpleDjango |\n| SimpleDocker |\n| SimpleDocuSign |\n| SimpleDotNET |\n| SimpleDraugiemDotLv |\n| SimpleDribbble |\n| SimpleDrone |\n| SimpleDropbox |\n| SimpleDrupal |\n| SimpleDuckDuckGo |\n| SimpleDynatrace |\n| SimpleEBay |\n| SimpleESEA |\n| SimpleESLint |\n| SimpleEVRY |\n| SimpleEclipseIDE |\n| SimpleElastic |\n| SimpleElasticCloud |\n| SimpleElasticStack |\n| SimpleElasticsearch |\n| SimpleElectron |\n| SimpleElementary |\n| SimpleEllo |\n| SimpleElsevier |\n| SimpleEmpireKred |\n| SimpleEnvato |\n| SimpleEpicGames |\n| SimpleEthereum |\n| SimpleEtsy |\n| SimpleEventStore |\n| SimpleEventbrite |\n| SimpleEvernote |\n| SimpleEverplaces |\n| SimpleExercism |\n| SimpleExpertsExchange |\n| SimpleFACEIT |\n| SimpleFSecure |\n| SimpleFacebook |\n| SimpleFandango |\n| SimpleFavro |\n| SimpleFeatHub |\n| SimpleFedora |\n| SimpleFeedly |\n| SimpleFidoAlliance |\n| SimpleFigma |\n| SimpleFileZilla |\n| SimpleFirebase |\n| SimpleFitbit |\n| SimpleFlask |\n| SimpleFlattr |\n| SimpleFlickr |\n| SimpleFlipboard |\n| SimpleFlutter |\n| SimpleFnac |\n| SimpleFoursquare |\n| SimpleFramer |\n| SimpleFreeBSD |\n| SimpleFreeCodeCamp |\n| SimpleFurAffinity |\n| SimpleFurryNetwork |\n| SimpleGNU |\n| SimpleGNUSocial |\n| SimpleGOGDotCom |\n| SimpleGOVDotUK |\n| SimpleGarmin |\n| SimpleGatsby |\n| SimpleGauges |\n| SimpleGeocaching |\n| SimpleGerrit |\n| SimpleGhost |\n| SimpleGit |\n| SimpleGitHub |\n| SimpleGitLab |\n| SimpleGitpod |\n| SimpleGitter |\n| SimpleGlassdoor |\n| SimpleGmail |\n| SimpleGo |\n| SimpleGodotEngine |\n| SimpleGoldenLine |\n| SimpleGoodreads |\n| SimpleGoogle |\n| SimpleGoogleAllo |\n| SimpleGoogleAnalytics |\n| SimpleGoogleChrome |\n| SimpleGoogleCloud |\n| SimpleGoogleDrive |\n| SimpleGoogleHangouts |\n| SimpleGoogleHangoutsChat |\n| SimpleGoogleKeep |\n| SimpleGooglePay |\n| SimpleGooglePlay |\n| SimpleGooglePodcasts |\n| SimpleGrafana |\n| SimpleGraphQL |\n| SimpleGraphcool |\n| SimpleGrav |\n| SimpleGravatar |\n| SimpleGreenkeeper |\n| SimpleGroupon |\n| SimpleGulp |\n| SimpleGumroad |\n| SimpleGumtree |\n| SimpleHERE |\n| SimpleHTML5 |\n| SimpleHackHands |\n| SimpleHackaday |\n| SimpleHackerEarth |\n| SimpleHackerRank |\n| SimpleHackster |\n| SimpleHashnode |\n| SimpleHaskell |\n| SimpleHatenaBookmark |\n| SimpleHaxe |\n| SimpleHelm |\n| SimpleHeroku |\n| SimpleHexo |\n| SimpleHighly |\n| SimpleHipChat |\n| SimpleHockeyApp |\n| SimpleHomify |\n| SimpleHootsuite |\n| SimpleHouzz |\n| SimpleHuawei |\n| SimpleHubSpot |\n| SimpleHulu |\n| SimpleHumbleBundle |\n| SimpleICQ |\n| SimpleICloud |\n| SimpleIFixit |\n| SimpleIMDb |\n| SimpleIata |\n| SimpleIconJar |\n| SimpleInVision |\n| SimpleInkscape |\n| SimpleInstacart |\n| SimpleInstagram |\n| SimpleInstapaper |\n| SimpleIntel |\n| SimpleIntelliJIDEA |\n| SimpleIntercom |\n| SimpleInternetExplorer |\n| SimpleIonic |\n| SimpleItchDotIo |\n| SimpleJET |\n| SimpleJQuery |\n| SimpleJSFiddle |\n| SimpleJSON |\n| SimpleJabber |\n| SimpleJava |\n| SimpleJavaScript |\n| SimpleJekyll |\n| SimpleJenkins |\n| SimpleJest |\n| SimpleJira |\n| SimpleJoomla |\n| SimpleJsDelivr |\n| SimpleJupyter |\n| SimpleJustGiving |\n| SimpleKaggle |\n| SimpleKaiOS |\n| SimpleKentico |\n| SimpleKeyCDN |\n| SimpleKeybase |\n| SimpleKhanAcademy |\n| SimpleKibana |\n| SimpleKickstarter |\n| SimpleKik |\n| SimpleKirby |\n| SimpleKlout |\n| SimpleKnown |\n| SimpleKoFi |\n| SimpleKodi |\n| SimpleKoding |\n| SimpleKotlin |\n| SimpleKubernetes |\n| SimpleLGTM |\n| SimpleLINEWEBTOON |\n| SimpleLanyrd |\n| SimpleLaravel |\n| SimpleLaravelHorizon |\n| SimpleLaravelNova |\n| SimpleLastDotFm |\n| SimpleLaunchpad |\n| SimpleLeetCode |\n| SimpleLetsEncrypt |\n| SimpleLetterboxd |\n| SimpleLiberapay |\n| SimpleLibraryThing |\n| SimpleLine |\n| SimpleLinkedIn |\n| SimpleLinux |\n| SimpleLinuxFoundation |\n| SimpleLinuxMint |\n| SimpleLiveJournal |\n| SimpleLivestream |\n| SimpleLogstash |\n| SimpleLua |\n| SimpleLyft |\n| SimpleMEGA |\n| SimpleMXLinux |\n| SimpleMacys |\n| SimpleMagento |\n| SimpleMagisk |\n| SimpleMailChimp |\n| SimpleMailDotRu |\n| SimpleMakerBot |\n| SimpleManjaro |\n| SimpleMarkdown |\n| SimpleMarketo |\n| SimpleMasterCard |\n| SimpleMastodon |\n| SimpleMaterialDesign |\n| SimpleMathworks |\n| SimpleMatrix |\n| SimpleMatternet |\n| SimpleMediaFire |\n| SimpleMediaTemple |\n| SimpleMedium |\n| SimpleMeetup |\n| SimpleMessenger |\n| SimpleMeteor |\n| SimpleMicroDotBlog |\n| SimpleMicrogenetics |\n| SimpleMicrosoft |\n| SimpleMicrosoftAccess |\n| SimpleMicrosoftAzure |\n| SimpleMicrosoftEdge |\n| SimpleMicrosoftExcel |\n| SimpleMicrosoftOneDrive |\n| SimpleMicrosoftOneNote |\n| SimpleMicrosoftOutlook |\n| SimpleMicrosoftPowerPoint |\n| SimpleMicrosoftWord |\n| SimpleMinutemailer |\n| SimpleMix |\n| SimpleMixcloud |\n| SimpleMixer |\n| SimpleMonero |\n| SimpleMongoDB |\n| SimpleMonkeyTie |\n| SimpleMonogram |\n| SimpleMonzo |\n| SimpleMoo |\n| SimpleMozilla |\n| SimpleMozillaFirefox |\n| SimpleMySQL |\n| SimpleMyspace |\n| SimpleNGINX |\n| SimpleNPM |\n| SimpleNVIDIA |\n| SimpleNativeScript |\n| SimpleNeo4j |\n| SimpleNetflix |\n| SimpleNetlify |\n| SimpleNextDotJs |\n| SimpleNextcloud |\n| SimpleNextdoor |\n| SimpleNintendo |\n| SimpleNintendoGameCube |\n| SimpleNintendoSwitch |\n| SimpleNodeDotJs |\n| SimpleNodemon |\n| SimpleNuGet |\n| SimpleNucleo |\n| SimpleNuxtDotJs |\n| SimpleOCaml |\n| SimpleORCID |\n| SimpleOSMC |\n| SimpleOVH |\n| SimpleOctopusDeploy |\n| SimpleOculus |\n| SimpleOdnoklassniki |\n| SimpleOpenAccess |\n| SimpleOpenCollective |\n| SimpleOpenSUSE |\n| SimpleOpenSourceInitiative |\n| SimpleOpenStreetMap |\n| SimpleOpenVPN |\n| SimpleOpera |\n| SimpleOpsgenie |\n| SimpleOracle |\n| SimpleOrigin |\n| SimpleOvercast |\n| SimplePHP |\n| SimplePagekit |\n| SimplePandora |\n| SimplePantheon |\n| SimplePatreon |\n| SimplePayPal |\n| SimplePeriscope |\n| SimplePicartoDotTV |\n| SimplePinboard |\n| SimplePingdom |\n| SimplePingup |\n| SimplePinterest |\n| SimplePivotalTracker |\n| SimplePlanGrid |\n| SimplePlayStation |\n| SimplePlayStation3 |\n| SimplePlayStation4 |\n| SimplePlayerDotMe |\n| SimplePlex |\n| SimplePluralsight |\n| SimplePlurk |\n| SimplePocket |\n| SimplePodcasts |\n| SimplePostgreSQL |\n| SimplePostman |\n| SimplePowerShell |\n| SimplePrettier |\n| SimplePrismic |\n| SimpleProbot |\n| SimpleProcessWire |\n| SimpleProductHunt |\n| SimpleProtoDotIo |\n| SimpleProtonMail |\n| SimpleProxmox |\n| SimplePyPI |\n| SimplePython |\n| SimpleQiita |\n| SimpleQualcomm |\n| SimpleQuantcast |\n| SimpleQuantopian |\n| SimpleQuora |\n| SimpleQwiklabs |\n| SimpleQzone |\n| SimpleR |\n| SimpleRSS |\n| SimpleRStudio |\n| SimpleRails |\n| SimpleRaspberryPi |\n| SimpleReact |\n| SimpleReadTheDocs |\n| SimpleRealm |\n| SimpleReason |\n| SimpleRedHat |\n| SimpleRedbubble |\n| SimpleReddit |\n| SimpleRedis |\n| SimpleRedux |\n| SimpleRenren |\n| SimpleReverbNation |\n| SimpleRiot |\n| SimpleRiseup |\n| SimpleRollupDotJs |\n| SimpleRoots |\n| SimpleRuby |\n| SimpleRubyGems |\n| SimpleRunkeeper |\n| SimpleRust |\n| SimpleSAP |\n| SimpleSPDX |\n| SimpleSafari |\n| SimpleSalesforce |\n| SimpleSamsung |\n| SimpleSamsungPay |\n| SimpleSass |\n| SimpleSauceLabs |\n| SimpleScala |\n| SimpleScaleway |\n| SimpleScribd |\n| SimpleScrutinizerCI |\n| SimpleSega |\n| SimpleSellfy |\n| SimpleSensu |\n| SimpleSentry |\n| SimpleServerFault |\n| SimpleShazam |\n| SimpleShell |\n| SimpleShopify |\n| SimpleSignal |\n- Simple| SimpleIcons |\n| SimpleSinaWeibo |\n| SimpleSitePoint |\n| SimpleSkyliner |\n| SimpleSkype |\n| SimpleSlack |\n| SimpleSlashdot |\n| SimpleSlickPic |\n| SimpleSlides |\n| SimpleSmashingMagazine |\n| SimpleSnapchat |\n| SimpleSnapcraft |\n| SimpleSnyk |\n| SimpleSociety6 |\n| SimpleSocketDotIo |\n| SimpleSogou |\n| SimpleSolus |\n| SimpleSongkick |\n| SimpleSoundCloud |\n| SimpleSourceForge |\n| SimpleSourcegraph |\n| SimpleSpaceX |\n| SimpleSpacemacs |\n| SimpleSparkFun |\n| SimpleSparkPost |\n| SimpleSpeakerDeck |\n| SimpleSpotify |\n| SimpleSpotlight |\n| SimpleSpreaker |\n| SimpleSprint |\n| SimpleSquarespace |\n| SimpleStackExchange |\n| SimpleStackOverflow |\n| SimpleStackShare |\n| SimpleStadia |\n| SimpleStatamic |\n| SimpleStaticman |\n| SimpleStatuspage |\n| SimpleSteam |\n| SimpleSteem |\n| SimpleSteemit |\n| SimpleStitcher |\n| SimpleStorify |\n| SimpleStorybook |\n| SimpleStrava |\n| SimpleStripe |\n| SimpleStubHub |\n| SimpleStyleShare |\n| SimpleStylus |\n| SimpleSublimeText |\n| SimpleSubversion |\n| SimpleSuperUser |\n| SimpleSwarm |\n| SimpleSwift |\n| SimpleSymfony |\n| SimpleSynology |\n| SimpleTED |\n| SimpleTMobile |\n| SimpleTYPO3 |\n| SimpleTails |\n| SimpleTapas |\n| SimpleTeamViewer |\n| SimpleTeespring |\n| SimpleTelegram |\n| SimpleTencentQQ |\n| SimpleTencentWeibo |\n| SimpleTesla |\n| SimpleTheMighty |\n| SimpleTheMovieDatabase |\n| SimpleTidal |\n| SimpleTikTok |\n| SimpleTinder |\n| SimpleTodoist |\n| SimpleToggl |\n| SimpleTopcoder |\n| SimpleToptal |\n| SimpleTor |\n| SimpleTrainerRoad |\n| SimpleTrakt |\n| SimpleTravisCI |\n| SimpleTreehouse |\n| SimpleTrello |\n| SimpleTripAdvisor |\n| SimpleTrulia |\n| SimpleTumblr |\n| SimpleTurkishAirlines |\n| SimpleTwilio |\n| SimpleTwitch |\n| SimpleTwitter |\n| SimpleTwoo |\n| SimpleTypeScript |\n| SimpleUIkit |\n| SimpleUber |\n| SimpleUbisoft |\n| SimpleUbuntu |\n| SimpleUdacity |\n| SimpleUdemy |\n| SimpleUmbraco |\n| SimpleUnity |\n| SimpleUnrealEngine |\n| SimpleUnsplash |\n| SimpleUntappd |\n| SimpleUpwork |\n| SimpleV8 |\n| SimpleVK |\n| SimpleVLCMediaPlayer |\n| SimpleVSCO |\n| SimpleEvagrant |\n| SimpleVenmo |\n| SimpleVerizon |\n| SimpleViadeo |\n| SimpleViber |\n| SimpleVim |\n| SimpleVimeo |\n| SimpleVine |\n| SimpleVirb |\n| SimpleVisa |\n| SimpleVisualStudioCode |\n| SimpleVueDotJs |\n| SimpleWPEngine |\n| SimpleWattpad |\n| SimpleWeChat |\n| SimpleWeasyl |\n| SimpleWebStorm |\n| SimpleWebcomponentsDotOrg |\n| SimpleWebpack |\n| SimpleWhatsApp |\n| SimpleWhenIWork |\n| SimpleWii |\n| SimpleWiiU |\n| SimpleWikipedia |\n| SimpleWindows |\n| SimpleWire |\n| SimpleWireGuard |\n| SimpleWix |\n| SimpleWolfram |\n| SimpleWolframLanguage |\n| SimpleWolframMathematica |\n| SimpleWordPress |\n| SimpleXPack |\n| SimpleXSplit |\n| SimpleXbox |\n| SimpleXcode |\n| SimpleXero |\n| SimpleXing |\n| SimpleYCombinator |\n| SimpleYahoo |\n| SimpleYammer |\n| SimpleYandex |\n| SimpleYarn |\n| SimpleYelp |\n| SimpleYouTube |\n| SimpleZapier |\n| SimpleZeit |\n| SimpleZendesk |\n| SimpleZerply |\n| SimpleZillow |\n| SimpleZorin |\n</ProseTable>\n",
    "updatedAt": "2019-10-09T18:53:52.435Z",
    "path": "./assets/md/icons/index.md",
    "fileName": "index",
    "href": "/docs/icons"
  },
  {
    "title": "Using with React",
    "framework": "React",
    "publish": true,
    "body": "<ProseHeading level=\"2\">\nImport a component (allows for tree-shaking)\n</ProseHeading>\n\nReact `@baleada/icons` components can be imported from `@baleada/icons/react`.\n\n<ProseCodeblock>\n```js\nimport { EvaGlobe2 } from '@baleada/icons/react'\n```\n</ProseCodeblock>\n\n\n<ProseHeading level=\"2\">\nUse a component\n</ProseHeading>\n\n\nAll components will render an SVG of their icon. The SVG has 4 default attributes:\n\n<ProseCodeblock>\n```html\n<svg\n  role=\"img\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 24 24\"\n  preserveAspectRatio=\"xMinYMin meet\"\n>\n  ...\n</svg>\n```\n</ProseCodeblock>\n\nThese 4 attributes are easy to override or expand—simply pass an object to the component's `attrs` prop. All of the `attrs` (including event listeners) are passed directly to the SVG.\n\n<ProseCodeblock>\n```js\nexport default function MyComponent() {\n  ...\n\n  return (\n    <SimpleGeocaching\n      attrs={{\n        preserveAspectRatio: \"none\",\n        className: \"h-4 w-4 fill-current inline-block text-blue-600\"\n      }}\n    />\n    <EvaGlobe2\n      attrs={{\n        'aria-label': \"A nifty globe icon\",\n        onClick: () => console.log('Eva icon was clicked')\n      }}\n    />\n  )\n}\n```\n</ProseCodeblock>\n",
    "updatedAt": "2019-10-09T18:53:52.428Z",
    "path": "./assets/md/icons/using-with-react.md",
    "fileName": "using-with-react",
    "href": "/docs/icons/using-with-react"
  },
  {
    "title": "Using with Svelte",
    "framework": "Svelte",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-25T20:36:04.448Z",
    "path": "./assets/md/icons/using-with-svelte.md",
    "fileName": "using-with-svelte",
    "href": "/docs/icons/using-with-svelte"
  },
  {
    "title": "Using with Vue",
    "framework": "Vue",
    "publish": true,
    "body": "<ProseHeading level=\"2\">\nImport a component (allows for tree-shaking)\n</ProseHeading>\n\nAll `@baleada/icons` Vue components are [functional components](https://vuejs.org/v2/guide/render-function.html#Functional-Components). They can be imported from `@baleada/icons/vue` for local or global registration.\n\n<ProseCodeblock>\n```js\nimport { EvaGlobe2 } from '@baleada/icons/vue'\n\nexport default {\n  components: {\n    EvaGlobe2,\n  },\n  ...\n}\n```\n</ProseCodeblock>\n\n\n<ProseHeading level=\"2\">\nUse a component\n</ProseHeading>\n\nAll components will render an SVG of their icon. The SVG has 4 default attributes:\n\n<ProseCodeblock>\n```html\n<svg\n  role=\"img\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  viewBox=\"0 0 24 24\"\n  preserveAspectRatio=\"xMinYMin meet\"\n>\n  ...\n</svg>\n```\n</ProseCodeblock>\n\nThese 4 attributes are easy to override or expand—all of the component's attributes, event listeners, and class & style bindings are passed directly to the SVG.\n\n<ProseCodeblock>\n```html\n<template lang=\"html\">\n  <SimpleGeocaching\n    preserveAspectRatio=\"none\"\n    :class=\"'h-4 w-4 fill-current inline-block text-blue-600'\"\n  />\n  <EvaGlobe2\n    aria-label=\"A nifty globe icon\"\n    @click.native=\"() => console.log('Eva icon was clicked')\"\n  />\n</template>\n\n<script>...</script>\n```\n</ProseCodeblock>\n",
    "updatedAt": "2019-10-09T18:53:52.425Z",
    "path": "./assets/md/icons/using-with-vue.md",
    "fileName": "using-with-vue",
    "href": "/docs/icons/using-with-vue"
  },
  {
    "title": "What is Baleada?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Honduras's favorite food is the **baleada**—a fresh flour tortilla, spread with refried beans, then decorated with scrambled eggs, mantequilla, queso seco, avocado, or meat, and finally folded in half.\n\nYou can't have a baleada without its core ingredients and presentation (tortilla spread with refried beans and folded in half), but once those requirements are met, you can be creative and combine ingredients that suit your tastebuds.\n\nAnyway, the Baleada you're here for is **a toolkit for building web apps** (and websites). Getting down to brass tacks, Baleada offers the following types of tools:\n- UI logic\n- Composition functions (a.k.a. hooks)\n- SVG icon components\n- More to come (<NuxtLink to=\"/docs/roadmap\">see roadmap</NuxtLink>)\n\n<ProseAside type=\"info\">\nFeeling a little fuzzy on what these terms mean? Check out the guide on <NuxtLink to=\"/docs/types-of-tools\">types of tools</NuxtLink> for definitions.\n</ProseAside>\n\nThink of these tools as the ingredients in a savory, delectable baleada. You're encouraged to take what you want and sprinkle it into the stack you're already using to build your apps and websites. You're free to take just a few things, but if you're so inclined, you can really pile on the extras!\n\n\n<ProseHeading level=\"2\">\nWho is Baleada designed for?\n</ProseHeading>\n\nBaleada is designed for developers who:\n- **Do** want to add common UI features and behaviors to their app, but **don't** want to think about implementation details.\n- **Do** value consistency and predictability in JavaScript library APIs.\n- **Do** care about performance, best practices, internationalization, accessibility, and security, but **haven't** had time to fine-tune this stuff in the past, because they've always been too busy hacking together a custom autocomplete component or another 🤬 carousel for the who-knows-how-many-th time.\n- **Do** appreciate the role React hooks and Vue composition functions play in making web dev easier and more inclusive.\n- **Do** appreciate [the benefits of using SVG over icon fonts](http://www.fullstackradio.com/47).\n- **Do** appreciate documentation that makes them hungry.\n<!-- - **Do** want a design system to govern their styles, but **don't** want their apps and sites to look like everyone else's. -->\n\nAll of Baleada's tools are copyrighted from 2019-present and licensed under the MIT license.\n",
    "updatedAt": "2019-10-22T20:27:21.540Z",
    "path": "./assets/md/index.md",
    "fileName": "index",
    "href": "/docs"
  },
  {
    "title": "API design",
    "framework": "agnostic",
    "publish": true,
    "order": 1,
    "body": "For any individual piece of UI logic, there are plenty of ways to implement it, and plenty of packages already published that can `npm install` your troubles away.\n\nBut implementing these things yourself, or learning the APIs of disparate packages, adds **complexity and mental overhead** to engineering tasks that are usually a few steps removed from the actual business logic of the app or site you're building.\n\nBaleada Logic implements all kinds of UI logic for you, which is nice, but arguably more important is the fact that Baleada Logic's classes and subclasses all have **predictable, intuitive APIs**. In other words, you can construct all classes and subclasses in the same way, you can customize their behavior in the same way, and you can access their state and methods in the same way.\n\n> You can construct all Baleada Logic classes and subclasses in the same way, you can customize their behavior in the same way, and you can access their state and methods in the same way.\n\nTo accomplish that, Baleada Logic's classes and subclasses all follow strict rules in these specific areas:\n1. How they are **constructed**\n1. How **state and methods** are made available to you\n1. How classes & subclasses, their constructor options, their state, and their methods are **named**\n1. Why classes and subclasses provide certain state and methods\n1. Why constructors accept certain state and options\n\nThis guide explains all the core concepts, rules, and patterns that classes and subclasses follow. The words \"all\", \"always\", and \"never\" are displayed in bold, to emphasize the rules that apply to every single class and subclass in Baleada Logic.\n\n\n<ProseHeading level=\"2\">\nHow to construct classes and subclasses\n</ProseHeading>\n\nYou can access the functionality of **all** classes and subclasses by **constructing new instances** of them.\n\n<ProseCodeblock>\n\n```js\nconst instance = new Example(...)\n```\n\n</ProseCodeblock>\n\nThat `...` represents the arguments you'll pass to constructor functions. The basic arguments for class constructors differ slightly from those of subclass constructors. Details are explained below.\n\n\n<ProseHeading level=\"3\">\nClass constructors\n</ProseHeading>\n\n\nAll classes' constructors accept two parameters:\n1. A piece of state (i.e. data—strings, arrays, objects, DOM elements, etc.),\n2. An `options` object.\n\nThe `state` parameter is **always** required, and the `options` parameter is **always** optional. Given these parameters, the constructor **always** returns an instance of itself, which **always** takes the form of an Object.\n\n<ProseCodeblock>\n\n```js\nconst instance = new Example(state[, options])\n\ntypeof instance // --> 'object'\n```\n\n</ProseCodeblock>\n\nThe `state` parameter is **always** used to pass a piece of state whose core functionality will be enhanced by the class. The `options` parameter is **always** an Object that serves as a catch-all for **all** optional parameters that affect how a class behaves.\n\n<ProseCodeblock>\n\n```js\nconst instance = new Example(state, {\n  optionalBooleanParam: true,\n  optionalStringParam: 'baleada',\n  optionalFunctionParam: thing => doThe(thing)\n})\n```\n\n</ProseCodeblock>\n\n\n<ProseHeading level=\"3\">\nSubclass constructors\n</ProseHeading>\n\nSubclass constructors accept only one parameter: the piece of state whose prototype will be extended by the subclass. Given this parameter, the subclass will **always** return an object that is a child of the prototype it's extending.\n\n<ProseCodeblock>\n\n```js\n// The Example subclass extends String in this example\nconst instance = new Example(state)\n\ninstance instanceof String // --> true\n```\n\n</ProseCodeblock>\n\n\n\n\n\n<ProseHeading level=\"2\">\nHow state and methods are made available to you\n</ProseHeading>\n\n<ProseHeading level=\"3\">\nClass state and methods\n</ProseHeading>\n\nClasses take the form of JavaScript Objects, and **all** state and methods are accessible through the properties of those objects.\n\n<ProseCodeblock>\n\n```js\nconst instance = new Example(state)\n\ninstance.exampleState // Access state through properties\ninstance.exampleMethod() // Access methods through properties\n```\n\n</ProseCodeblock>\n\nClasses methods **always** return the instance through which they were called. The benefit of this is that you can use method chaining if needed.\n\n<ProseCodeblock>\n\n```js\nconst instance = new Example(state)\n\ninstance.exampleMethod() // -> returns instance\ninstance\n  .exampleMethod()\n  .anotherMethod()\n  .yetAnotherMethod() // -> Works 👍 and returns instance\n```\n\n</ProseCodeblock>\n\n\nClasses **always** store a shallow copy of their constructors' state in a public property named after the state's type (e.g. `string`, `array`, etc.).\n\nClasses also **always** have a public method you can use to assign a new value to that public property. The method follows a naming convention of `set<PropertyName>` (e.g. `setString`, `setArray`, etc.).\n\n<ProseCodeblock>\n\n```js\n// The Searchable class's constructor accepts an Array\nconst instance = new Searchable(['Baleada', 'Logic', 'Composition', 'Icons'])\n\ninstance.array // --> ['Baleada', 'Logic', 'Composition', 'Icons']\ninstance.setArray(['tortilla', 'beans', 'egg', 'avocado']) // --> returns instance\ninstance.array  // --> ['tortilla', 'beans', 'egg', 'avocado']\n```\n\n</ProseCodeblock>\n\nSome classes, particularly those that were designed to capture input from your end users, have additional public properties. Those classes also **always** have public methods you can use to assign a new value to the additional public properties, and those methods follow the same  `set<PropertyName>` naming convention.\n\n<ProseCodeblock>\n\n```js\n// The Completable class's constructor accepts a String\nconst instance = new Completable('Baleada')\n\ninstance.string // --> 'Baleada'\ninstance.location // --> 0\n\ninstance.setString('tortilla') // --> returns instance\ninstance.setLocation('3') // --> returns instance\n```\n\n</ProseCodeblock>\n\n\nNote that public properties are writeable—it's possible to assign values to them directly. But, in some classes, certain side effects need to be performed after writing to public properties, to make sure everything keeps working properly. When this is the case, the classes' `set<PropertyName>` methods will perform **all** necessary side effects, and you won't have to think about them. Because of that, it's **always** recommended that you use the `set<PropertyName>` methods instead of writing to public properties directly.\n\n\n<ProseCodeblock>\n\n```js\n// The Editable class's constructor accepts state of any type\nconst instance = new Editable('Baleada')\n\ninstance.state // --> 'Baleada'\ninstance.editableState // --> 'Baleada'\n\n/*\n * It's possible to write to instance.state directly.\n * However, for Editable to work correctly, instance.editableState\n * should be edited at the same time to avoid unexpected behavior.\n */\ninstance.state = 'Logic' // --> It works\ninstance.state // --> 'Logic'\ninstance.editableState // --> 'Baleada'\n\n/*\n * If you use instance.setState instead, the required side effect\n * (updating instance.editableState) is taken care of by Editable.\n */\ninstance.setState('🌮')\ninstance.state // --> '🌮'\ninstance.editableState // --> '🌮'\n```\n\n</ProseCodeblock>\n\n\nOutside of `set<PropertyName>` methods, classes **never** write to their own public properties.\n\nHowever, some classes do have public methods that create mutated versions of one or more public properties' values. These classes **always** accept an `on<Method>` option, where `<Method>` is the name of the public method that mutates the values. The `on<Method>` option is **always** a function gets called after you call `instance.<Method>`, and `on<Method>` **always** accepts two parameters: the mutated value, and the instance itself (i.e. `this`).\n\nInstead of writing the mutated value to its own public property after you call `instance.<Method>`, the class will pass the mutated value as the first argument of your `on<Method>` function.\n\n\n<ProseCodeblock>\n\n```js\nlet totalStringCompletions = 0\n\nconst instance = new Completable('Baleada', {\n  onComplete: (completedString, instance) {\n    instance.setString(completedString)\n    totalStringCompletions++\n  }\n})\n\ninstance.string // --> 'Baleada'\ntotalStringCompletions // --> 0\n\n/*\n * When you call instance.complete, the Completable instance will create\n * a mutated version of instance.string. Then, it will call your\n * onComplete function, passing the mutated version of instance.string\n * AND itself as the two arguments.\n *\n * In this example, your onComplete function will set instance.string\n * to the new value and will mutate the external variable,\n * totalStringCompletions.\n */\ninstance.complete('Baleada: a toolkit for building web apps')\ninstance.string // --> 'Baleada: a toolkit for building web apps'\ntotalStringCompletions // --> 1\n```\n\n</ProseCodeblock>\n\nThese `on<Method>` functions are a great way to hook into state changes and run code just before or just after the state change actually happens. However, for ease of use, **all** classes that accept `on<Method>` functions already have sensible default functions that set state for you.\n\n<ProseCodeblock>\n\n```js\nconst instance = new Completable('Baleada') // Completable has a default onComplete function defined for you\n\ninstance.string // --> 'Baleada'\n\n/*\n * When you call instance.complete, the Completable instance will create\n * a mutated version of instance.string. Then, it will call its default\n * onComplete function, passing the mutated version of instance.string\n * AND itself as the two arguments.\n *\n * Completable's default onComplete function will set instance.string\n * to the new value.\n */\ninstance.complete('Baleada: a toolkit for building web apps')\ninstance.string // --> 'Baleada: a toolkit for building web apps'\n```\n\n</ProseCodeblock>\n\n\nAll classes also have one or more public [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get). When you access these getters, they compute and return state that is useful for building certain UI features, but is not part of the core functionality or benefit of the class.\n\n<ProseCodeblock>\n\n```js\nconst instance = new Completable(\n  'Baleada: a toolkit',\n  { segmentsFromDivider: true }\n)\n\ninstance.segment // --> 'toolkit'\ninstance.segment = 'Baleada' // Doesn't work, since instance.segment is a getter\n```\n\n</ProseCodeblock>\n\nSome classes don't have any methods that create mutated versions of the values in their public properties. These classes **always** have one or more other public methods that expose their core functionality. These methods **never** have `on<Method>` functions associated with them, because they aren't creating any mutated state, so there is nothing valuable to pass to the functions.\n\n<ProseCodeblock>\n\n```js\n// The Animatable class's constructor accepts a Node or NodeList\nconst instance = new Animatable(mySelectedElement, myAnimationOptions)\n\ninstance.play() // -> Plays an animation and returns the instance, but does nothing else\n```\n\n</ProseCodeblock>\n\nSome classes accept a DOM node or node list as the first argument of their constructor and attach event listeners to the node or nodes. **All** of these classes have a public `destroy` method that you can use to remove the event listeners.\n\n<ProseCodeblock>\n\n```js\n// Touchable adds event listeners while constructing the instance\nconst instance = new Touchable(mySelectedElement, myTouchEventOptions)\n\ninstance.destroy() // -> Removes all event listeners\n```\n\n</ProseCodeblock>\n\n\n<ProseHeading level=\"3\">\nSubclass state and methods\n</ProseHeading>\n\nBaleada Logic's subclasses **never** have public state; they **always** have one method named `invoke`.\n\nSubclasses' public methods **never** mutate the original state passed to their constructors. They **always** follow three main steps:\n1. Create a mutated version of the original state\n2. Pass it to their own constructor along with any options you originally passed\n3. Return the new instance\n\nThus, subclasses always return a new instance of themselves, respecting any original options you passed.\n\n<ProseCodeblock>\n\n```js\n// Renamable is a subclass of Map that allows the map to easily rename one of its keys\nconst originalMap = [['one', 'value'], ['two', 'value']],\n      instance = new Renamable(originalMap),\n      renamedMap = instance.invoke('one', 'uno')\n\noriginalMap // -> [['one', 'value'], ['two', 'value']]\nrenamedMap // -> [['uno', 'value'], ['two', 'value']]\nrenamedMap instanceof Renamable // -> true\n```\n\n</ProseCodeblock>\n\n\n<ProseHeading level=\"2\">\nWhy classes & subclasses provide certain state and methods\n</ProseHeading>\n\nBaleada Logic follows a consistent process for determing which state and methods are provided by classes:\n1. Identify one action or several related actions that would be useful in a user interface. These actions become methods on the class.\n1. Identify the piece(s) of state that the action will be performed on. In other words, answer the question, \"If this method were a standalone function, what would be a required argument?\" Each answer to that question becomes a public, writeable property on the class.\n2. Identify the piece(s) of state that would be useful for building certain UI features with the class' methods and public properties, but shouldn't be considered part of the core functionality or benefit of the class. Each identified piece of state becomes a getter on the class.\n\n\n\n<ProseHeading level=\"2\">\nWhy constructors accept certain state types and options\n</ProseHeading>\n\n<ProseHeading level=\"3\">\nConstructors' state types\n</ProseHeading>\n\nBaleada Logic uses a sentence template to decide what state type (e.g. String, Array, HTMLElement, etc.) should be accepted by a constructor:\n\n<ProseCodeblock>\n```txt\nA `<state type>` can be `<action>`ed (by `<action arguments>`).\n```\n</ProseCodeblock>\n\nFor example, the Searchable class' core action is to search/fuzzy search an array of items. The Searchable constructor's `state` parameter is an Array, and the class has a `search` method that accepts a search query as its only argument. This fits into the sentence template nicely:\n\n<ProseCodeblock>\n```txt\nAn **Array** can be **searched** by a **query**.\n```\n</ProseCodeblock>\n\nSome classes and subclasses have core actions that don't take arguments—in those cases, the last part of the sentence template is omitted:\n\n<ProseCodeblock>\n```text\n**Markdown** (String) can be **marked up**.\n```\n</ProseCodeblock>\n\nThis sentence template ensures that **all** classes' and subclasses' methods are affordances. In other words, methods tell you what you can do with a given type of state, rather than what that type of state can do to itself or other things.\n\nIn the documentation for each individual library and subclass, you can find the filled-out sentence template, explaining why each class and subclass accepts its specific state type.\n\n\n<ProseAside type=\"info\">\nThe inspiration and motivation for this sentence template came from [Adam Wathan's \"Resisting Complexity\" talk](https://www.youtube.com/watch?v=dfgtKb-VpRk).\n</ProseAside>\n\n<ProseHeading level=\"3\">\nConstructors' options\n</ProseHeading>\n\nConstructors only accept options that:\n- Initialize public properties\n- Customize the behavior of getter functions\n- Pass the `on<Method>` callback functions described earlier in this article\n\nConstructors **never** accept options that customize the behavior of public methods, they **always** allow those options to be passed to the method itself as a parameter.\n\n\n<ProseHeading level=\"2\">\nNaming conventions\n</ProseHeading>\n\nWIP\n",
    "updatedAt": "2019-10-28T04:05:49.988Z",
    "path": "./assets/md/logic/api-design.md",
    "fileName": "api-design",
    "href": "/docs/logic/api-design"
  },
  {
    "title": "Animatable",
    "framework": "agnostic",
    "publish": false,
    "body": "`Animatable` is an action provider that allows you to animate one or more elements and control the animations (play, pause, seek, etc.). It's powered by [anime](https://animejs.com).\n\n\n\n  constructor(elements, options = {}) {\n    /* Options */\n\n    /* Public properties */\n    this.elements = elements\n\n    /* Dependency */\n    this.#dependencyOptions = options\n    this.#dependency = new Dependency(this.elements, this.#dependencyOptions)\n  }\n\n  /* Public getters */\n  get animation() {\n    return this.#dependency.animation\n  }\n\n  /* Public methods */\n  setElements(elements) {\n    this.elements = elements\n    this.#dependency = new Dependency(this.elements, this.#dependencyOptions)\n    return this\n  }\n  play() {\n    this.#dependency.play()\n    return this\n  }\n  pause() {\n    this.#dependency.pause()\n    return this\n  }\n  restart() {\n    this.#dependency.restart()\n    return this\n  }\n  reverse() {\n    this.#dependency.reverse()\n    return this\n  }\n  seek(timestamp) {\n    this.#dependency.seek(timestamp)\n    return this\n  }\n\n  /* Private methods */\n}\n\n<ProseHeading level=\"2\">\nFurther resources\n</ProseHeading>\n\n- [Motion & Playfulness](https://vimeo.com/282452432), a talk by [Benjamin De Cock](https://twitter.com/bdc)\n",
    "updatedAt": "2019-10-09T19:51:58.181Z",
    "path": "./assets/md/logic/classes/Animatable.md",
    "fileName": "Animatable",
    "href": "/docs/logic/classes/Animatable"
  },
  {
    "title": "Completable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "<!-- <BaleadaLogicLibraryIntro\n  name=\"Completable\"\n  stateType=\"string\"\n  allowsTo=\"[\n    'extract a segment of the string'\n  ]\"\n  givesMethodsTo=\"replace the segment or the full string with a more complete string\"\n/> -->\n\nCompletable is a library that enriches a string by:\n  - Allowing it to store a current index-based location\n  - Allowing it to extract a segment of the string\n  - Giving it the methods necessary to replace the segment or the full string with a more complete string\n\nCompletable is written in vanilla JS with no dependencies.\n\n\n<ProseHeading level=\"2\">\nConstruct a Completable instance\n</ProseHeading>\n\nTo construct a Completable instance (Object), use the Completable constructor, which takes two parameters:\n\n<ProseTable>\n\n| Parameter | Type | Required | Description |\n| --- | --- | --- | --- |\n| `string` | String | yep | Passes the string that will be made completable. |\n| `options` | Object | nope | Passes options for the Completable instance. See the <NuxtLink to=\"#Completable-constructor-options\">Completable constructor options</NuxtLink> section for more guidance. |\n\n</ProseTable>\n\n\n<ProseCodeblock>\n```js\nconst instance = new Completable(string[, options])\n```\n</ProseCodeblock>\n\n\n<ProseHeading level=\"3\">\nCompletable constructor options\n</ProseHeading>\n\n<ProseTable>\n| Option | Type | Default | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- | --- |\n| `segmentsFromDivider` | Boolean | `false` | <p>`true` when the Completable instance should start from a divider (for example, the space between words) while extracting a segment, and `false` when it should start from the very beginning of the string.</p><p>See the <NuxtLink to=\"#How-the-Completable-instance-extracts-segments\">How the Completable instance extracts segments</NuxtLink> section for more info.</p> | N/A | N/A |\n| `segmentsToLocation` | Boolean | `false` | <p>`true` when the Completable instance should stop at the current location while extracting a segment, and `false` when it should stop at the very end of the string.</p><p>See the <NuxtLink to=\"#How-the-Completable-instance-extracts-segments\">How the Completable instance extracts segments</NuxtLink> section for more info.</p> | N/A | N/A |\n| `divider` | RegExp | `/\\s/` | <p>Tells the Completable instance how segments of the string are divided. Has no effect when <code>segmentsFromDivider</code> is <code>false</code>.</p><p>See the <NuxtLink to=\"#How-the-Completable-instance-extracts-segments\">How the Completable instance extracts segments</NuxtLink> section for more info.</p> | N/A | N/A |\n| `onComplete(completedString, instance)` | Function | <p>For more guidance, see the <NuxtLink to=\"#How-the-Completable-instance-completes-strings-and-computes-new-locations\">How the Completable instance completes strings and computes new locations</NuxtLink> section.</p> | <p>Called by Completable after completing the string.</p><p>For more guidance, see the <NuxtLink to=\"#How-the-Completable-instance-completes-strings-and-computes-new-locations\">How the Completable instance completes strings and computes new locations</NuxtLink> section.</p> | The completed string (String) and the Completable instance (Object). | N/A |\n| `onLocate(newLocation, instance)` | Function | <p>For more guidance, see the <NuxtLink to=\"#How-the-Completable-instance-completes-strings-and-computes-new-locations\">How the Completable instance completes strings and computes new locations</NuxtLink> section.</p> | <p>Called by Completable after completing the string.</p><p>For more guidance, see the <NuxtLink to=\"#How-the-Completable-instance-completes-strings-and-computes-new-locations\">How the Completable instance completes strings and computes new locations</NuxtLink> section.</p> | The new location (Number) and the Completable instance (Object). | N/A |\n</ProseTable>\n\n\n<ProseHeading level=\"2\">\nAccess state and methods\n</ProseHeading>\n\nThe constructed Completable instance is an Object, and state and methods can be accessed via its properties:\n\n\n<ProseTable>\n| Property | Type | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- |\n| `string` | String | A shallow copy of the string passed to the Completable constructor | N/A | N/A |\n| `location` | Number | <p>The current index-based location in the <code>string</code>.</p><p>See the <NuxtLink to=\"#How-the-Completable-instance-extracts-segments\">How the Completable instance extracts segments</NuxtLink> section and the <NuxtLink to=\"#How-the-Completable-instance-completes-strings-and-computes-new-locations\">How the Completable instance completes strings and computes new locations</NuxtLink> section for more info.</p> | N/A | N/A |\n| `segment` | Getter | Extracts and returns a segment of `string`. See the <NuxtLink to=\"#How-the-Completable-instance-extracts-segments\">How the Completable instance extracts segments</NuxtLink> section for more info. | N/A | An extracted segment of `string` (String) |\n| `setString(newString)` | Function | Sets the Completable instance's `string` | The new `string` (String) | The Completable instance (`this`) |\n| `setLocation(location)` | Function | <p>Sets the location from which the Completable instance will start extracting segments.</p><p>See the <NuxtLink to=\"#How-the-Completable-instance-extracts-segments\">How the Completable instance extracts segments</NuxtLink> section and the <NuxtLink to=\"#How-the-Completable-instance-completes-strings-and-computes-new-locations\">How the Completable instance completes strings and computes new locations</NuxtLink> section for more info.</p>  | The new `location` (Number) | The Completable instance (`this`) |\n| `complete(completion, options)` |  | <p>Completes the string, replacing <code>segment</code> with a completion/replacement, and computes a new location based on the <code>options</code>.</p><p>For more guidance on the `complete` method, see the <NuxtLink to=\"#How-the-Completable-instance-completes-strings-and-computes-new-locations\">How the Completable instance completes strings and computes new locations</NuxtLink> section.</p> | The completion/replacement (String) | The Completable instance (`this`) |\n</ProseTable>\n\n\n<ProseHeading level=\"3\">\nHow the Completable instance extracts segments\n</ProseHeading>\n\nThe Completable instance [slices](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) the `string` in order to extract a segment. The starting location of the slice differs based on the `segmentsFromDivider` option, and the ending location of the slice differs based on the `segmentsToLocation` option.\n\nThe tables below have a full breakdowns:\n\n<ProseTable>\n| When `segmentsFromDivider` is... | `segment` start is... |\n| --- | --- |\n| `false` | The beginning of the `string` |\n| `true` | The index-based location of the previous character(s) matching the regular expression passed to the `divider` option, or `-1` if no matches are found. |\n</ProseTable>\n\n<ProseTable>\n| When `segmentsToLocation` is... | `segment` end is... |\n| --- | --- |\n| `false` | The end of the `string` |\n| `true` | The current `location` |\n</ProseTable>\n\nThe sliced `string` becomes the new `segment`.\n\n<ProseAside type=\"info\">\n`segment` is computed each time it is accessed, using a getter.\n</ProseAside>\n\n\n<ProseHeading level=\"3\">\nHow the Completable instance completes strings and computes new locations\n</ProseHeading>\n\nIn general, whenever the `complete` method is called, the Completable instance completes the string and computes a new location, then, in this exact order:\n1. Calls your `onComplete` function, passing the completed string as the first argument and itself (i.e. `this`) as the second argument.\n2. Calls your `onLocate` function, passing the new location as the first argument and itself (i.e. `this`) as the second argument.\n\nThe default `onComplete` and `onLocate` functions, shown below, set `string` to the completed string and `location` to the new location each time you call `complete`:\n\n<ProseCodeblock>\n\n```js\n/*\n * Default onComplete function for Completable\n */\n(completedString, instance) => instance.setString(completedString)\n\n/*\n * Default onLocate function for Completable\n */\n(newLocation, instance) => instance.setLocation(newLocation)\n```\n\n</ProseCodeblock>\n\n\nWhen the Completable instance's `complete` method is called, passing a `completion` as the first parameter, Completable will create a completed version of the `string` and will compute a new value for `location`.\n\nThe completed string is a new version of the instance's `string`, with its `segment` replaced by the `completion`. After completing the `string`, the `complete` method calls your `onComplete` function, passing the completed string as the first argument.\n\nThe new value for `location` is computed based on the `locatesAfterCompletion` option, passed using the `complete` function's `options` argument:\n\n<ProseCodeblock>\n\n```js\ncompletable.complete('my completion', { locatesAfterCompletion: true })\n```\n\n</ProseCodeblock>\n\n`locatesAfterCompletion` defaults to `true`.\n\nWhen `locatesAfterCompletion` is `true`, the new location will be the the index-based location just after the end of the `completion`. This is equal to the length of any text before the `segment` plus the length of the `completion`. But, when `locatesAfterCompletion` is `false`, the new location will be equal to the old location.\n\nAfter computing the new location, the `complete` method calls your `onLocate` function, passing the new location as the first argument.\n\n<ProseAside type=\"info\">\nNote that `complete` does not set `string` or `location` to the new values, but you can do so using `setString` and `setLocation`.\n</ProseAside>\n",
    "updatedAt": "2019-10-28T00:26:00.218Z",
    "path": "./assets/md/logic/classes/Completable.md",
    "fileName": "Completable",
    "href": "/docs/logic/classes/Completable"
  },
  {
    "title": "Copiable",
    "framework": "agnostic",
    "publish": false,
    "body": "/*\n * Copiable.js\n * (c) 2019 Alex Vipond\n * Released under the MIT license\n */\n\n/* Dependencies */\n\n/* Util */\nimport warn from '../util/warn'\n\nexport default class Copiable {\n  #usesFallbacks\n  #computedClipboard\n  #computedSucceeded\n  #computedErrored\n\n  constructor (string, options = {}) {\n    /* Options */\n    options = {\n      usesFallbacks: false,\n      ...options,\n    }\n    this.#usesFallbacks = options.usesFallbacks\n\n    /* Public properties */\n    this.string = string\n\n    /* Private properties */\n    this.#computedClipboard = navigator.clipboard\n    this.#computedSucceeded = false\n    this.#computedErrored = false\n    /* Dependency */\n  }\n\n  /* Public getters */\n  get clipboard () {\n    return this.#computedClipboard\n  }\n  get copied () {\n    return this.#getCopied\n  }\n  get succeeded () {\n    return this.#computedSucceeded\n  }\n  get errored () {\n    return this.#computedErrored\n  }\n\n  /* Public methods */\n  setString (string) {\n    this.string = string\n    return this\n  }\n  copy () {\n    if (this.#usesFallbacks) {\n      this.#writeTextFallback()\n      this.#computedErrored = false\n      this.#computedSucceeded = true\n    } else {\n      this.#writeText()\n        .then(() => {\n          this.#computedErrored = false\n          this.#computedSucceeded = true\n        })\n        .catch(() => {\n          this.#computedErrored = true\n          this.#computedSucceeded = false\n        })\n    }\n\n    return this\n  }\n\n  /* Private methods */\n  #getCopied = function() {\n    if (this.#usesFallbacks) {\n      warn('noFallbackAvailable', {\n        subject: 'Copiable\\'s copied property'\n      })\n    } else {\n      return this.#readText()\n        .then(text => text)\n    }\n  }\n  #readText = function() {\n    return this.clipboard.readText()\n  }\n  #writeText = function() {\n    return this.clipboard.writeText(this.string)\n  }\n  #writeTextFallback = function() {\n    const input = document.createElement('input')\n    input.type = 'text'\n    input.value = this.string\n\n    document.body.appendChild(input)\n    input.select()\n    document.execCommand('copy')\n\n    document.body.removeChild(input)\n  }\n}\n",
    "updatedAt": "2019-09-22T06:14:07.916Z",
    "path": "./assets/md/logic/classes/Copiable.md",
    "fileName": "Copiable",
    "href": "/docs/logic/classes/Copiable"
  },
  {
    "title": "Delayable",
    "framework": "agnostic",
    "publish": false,
    "body": "/*\n * Delayable.js\n * (c) 2019 Alex Vipond\n * Released under the MIT license\n */\n\n/* Util */\nimport is from '../util/is'\n\n/**\n * Delayable is a library that enriches a function by:\n * - Giving it the methods necessary to execute itself after a delay or at regular intervals<\n * - Allowing it to store the time elapsed since it was delayed, the time remaining until it will be executed, and the number of times it has been executed\n * Delayable depends on `[setTimeout](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout)`, `[setInterval](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval)`, `[requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)`, and the `[global Data object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date)`, but is otherwise written in vanilla JS. Delayable powers <NuxtLink to=\"/docs/tools/composition-functions/useDelayable\">`useDelayable`</NuxtLink>.\n */\nexport default class Delayable {\n  #delay\n  #isInterval\n  #parameters\n  #id\n  #tickId\n  #started\n  #computedExecutions\n  #computedTimeElapsed\n  #computedTimeRemaining\n\n  constructor (callback, options) {\n    options = {\n      delay: 0,\n      ...options\n    }\n\n    /* Options */\n    this.#delay = options.delay\n    this.#parameters = is.array(options.parameters) ? options.parameters : []\n\n    /* Public properties */\n    /**\n     * A shallow copy of the callback passed to the Delayable constructor\n     * @type {Function}\n     */\n    this.callback = callback\n\n    /* Private properties */\n    this.#computedExecutions = 0\n    this.#computedTimeElapsed = 0\n    this.#computedTimeRemaining = this.#delay\n  }\n\n  /* Public getters */\n  /**\n   * The number of times the callback function has been executed\n   * @type {Number}\n   */\n  get executions () {\n    return this.#computedExecutions\n  }\n  /**\n   * The time (in milliseconds) that has elapsed since the callback function was initially delayed OR last executed, whichever is smaller\n   * @type {Number}\n   */\n  get timeElapsed () {\n    return this.#computedTimeElapsed\n  }\n  /**\n   * The time (in milliseconds) that remains until the callback function will be executed\n   * @type {Number}\n   */\n  get timeRemaining () {\n    return this.#computedTimeRemaining\n  }\n\n  /* Public methods */\n  /**\n   * Sets the Delayable instance's callback function\n   * @param {Function} callback The new callback function\n   */\n  setCallback (callback) {\n    this.callback = callback\n  }\n  /**\n   * Clears the delayed callback function. The function won't be executed, but <code>timeElapsed</code> and <code>timeRemaining</code> will <b>not</b> be reset to their initial values.\n   */\n  clear () {\n    window.clearTimeout(this.#id)\n    window.clearInterval(this.#id)\n    this.#stopTick()\n    this.#computedExecutions = 0\n  }\n  /**\n   * Executes the callback function after the period of time specified by <code>delay</code>\n   */\n  timeout () {\n    this.#isInterval = false\n    this.#setup()\n    this.#id = this.#setTimeout()\n  }\n  /**\n   * Repeatedly executes the callback function with a fixed time delay (specified by <code>delay</code>) between each execution\n   */\n  interval () {\n    this.#isInterval = true\n    this.#setup()\n    this.#id = this.#setInterval()\n  }\n\n  /* Private methods */\n  #setTimeout = function() {\n    return window.setTimeout(\n      () => {\n        this.callback(...arguments)\n        this.#stopTick()\n        this.#computedTimeElapsed = this.#delay // Set timeElapsed to delay in case the user has switched tabs (which pauses requestAnimationFrame)\n        this.#computedExecutions = 1\n      },\n      this.#delay,\n      ...this.#parameters\n    )\n  }\n  #setInterval = function() {\n    return window.setInterval(\n      () => {\n        this.callback(...this.#parameters)\n        this.#stopTick()\n        this.#computedTimeElapsed = 0\n        this.#computedExecutions++\n        this.#startTick()\n      },\n      this.#delay,\n    )\n  }\n  #setTimeElapsed = function() {\n    const timeElapsed = Date.now() - this.#started\n    this.#computedTimeElapsed = this.#isInterval\n      ? timeElapsed - this.#delay * this.#computedExecutions\n      : Math.min(timeElapsed, this.#delay)\n  }\n  #setTimeRemaining = function() {\n    this.#computedTimeRemaining = this.#delay - this.#computedTimeElapsed\n  }\n  #tick = function() {\n    this.#setTimeElapsed()\n    this.#setTimeRemaining()\n    if (this.#computedTimeElapsed < this.#delay) {\n      this.#stopTick()\n      this.#startTick()\n    }\n  }\n  #startTick = function() {\n    this.#tickId = window.requestAnimationFrame(this.#tick.bind(this))\n  }\n  #stopTick = function() {\n    window.cancelAnimationFrame(this.#tickId)\n  }\n  #setup = function() {\n    this.clear()\n    this.#computedExecutions = 0\n    this.#computedTimeElapsed = 0\n    this.#computedTimeRemaining = this.#delay\n    this.#started = Date.now()\n    this.#startTick()\n  }\n}\n",
    "updatedAt": "2019-09-22T06:14:07.916Z",
    "path": "./assets/md/logic/classes/Delayable.md",
    "fileName": "Delayable",
    "href": "/docs/logic/classes/Delayable"
  },
  {
    "title": "Editable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Editable is a library that enriches a piece of state by:\n- Allowing it to infer its data type\n- Allowing it to store and make changes to an editable version of itself, instead of mutating the original state\n- Giving it the methods necessary to handle different kinds of edits (write, overwrite, full delete, partial delete, cancel &amp; revert to original value, etc.)\n\nEditable is written in vanilla JS with no dependencies.\n\n<ProseHeading level=\"2\">\nConstruct a Editable instance\n</ProseHeading>\n\nTo construct a Editable instance (Object), use the Editable constructor, which takes two parameters:\n\n<ProseTable>\n\n| Parameter | Type | Required | Description |\n| --- | --- | --- | --- |\n| `state` | any | yep | Passes the state that will be made editable. |\n| `options` | Object | nope | Passes options for the Editable instance. See the <NuxtLink to=\"#Editable-constructor-options\">Editable constructor options</NuxtLink> section for more guidance. |\n\n</ProseTable>\n\n\n<ProseCodeblock>\n```js\nconst instance = new Editable(state[, options])\n```\n</ProseCodeblock>\n\n<ProseTable>\n\n| Option | Type | Default | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- | --- |\n| `type` | String | none | <p>Tells the Editable instance what data type your state is. If you don't pass this option, the Editable instance will infer the data type based on the state passed to the constructor.</p><ProseAside type=\"warning\">You should pass the `type` option any time your original state is not the same type as the state that will be written—for example, when you're using Editable to edit a Date, a File, or a FileList, but your store's placeholder value is a String or an empty Object.</ProseAside><ProseAside type=\"info\"><p>You can pass any String as the <code>type</code> option, or you can pick from one of the following intended types:</p><ul><li>`'array'`</li><li>`'boolean'`</li><li>`'date'`</li><li>`'file'`</li><li>`'filelist'`</li><li>`'map'`</li><li>`'number'`</li><li>`'object'`</li><li>`'string'`</li></ul></ProseAside> | N/A | N/A |\n| `onEdit(newState, instance)` | Function | <p>See the <NuxtLink to=\"#How-Editable-edits-state\">How Editable edits state</NuxtLink> section for more guidance.</p> | <p>Called by the Editable instance after either writing or erasing state.</p><p>For more guidance, see the <NuxtLink to=\"#How-Editable-edits-state\">How Editable edits state</NuxtLink> section.</p> | The new state (can be any type) and the Editable instance (Object) | N/A |\n| `onWrite(newState, instance)` | Function | none | <p>Called by the Editable instance after writing state.</p><p>For more guidance, see the <NuxtLink to=\"#How-Editable-edits-state\">How Editable edits state</NuxtLink> section.</p> | The new state (can be any type) and the Editable instance (Object) | N/A |\n| `onErase(newState, instance)` | Function | none | <p>Called by the Editable instance after erasing state.</p><p>For more guidance, see the <NuxtLink to=\"#How-Editable-edits-state\">How Editable edits state</NuxtLink> section.</p> | The new state (can be any type) and the Editable instance (Object) | N/A |\n\n</ProseTable>\n\n<ProseHeading level=\"2\">\nAccess state and methods\n</ProseHeading>\n\nThe constructed Editable instance is an Object, and state and methods can be accessed via its properties:\n\n\n<ProseTable>\n\n| Property | Type | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- |\n| `state` | any | A shallow copy of the state passed to the Editable constructor | N/A | N/A |\n| `editableState` | any | A shallow copy of `state` that you can edit. | N/A | N/A |\n| `type` | Getter | See return value | N/A | The Editable instance's inferred data type (String) |\n| `setState(newState)` | Function | Sets the Editable instance's `state` | The new `state` (any) | The Editable instance (`this`) |\n| `setEditableState(newEditableState)` | Function | Sets the Editable instance's `editableState` | The new `editableState` (any) | The Editable instance (`this`) |\n| `cancel()` | Function | <p>Resets `editableState` to a shallow copy of `state`.</p><ProseAside type=\"info\">`cancel` does not trigger the Editable instance to call your `onEdit`, `onWrite`, or `onErase` functions.</ProseAside> | none | The Editable instance (`this`) |\n| `write(options)` | Function | <p>Writes `editableState` to `state`.</p><p>The exact write behavior depends on `type` and the `write` function's `options` parameter. See the <NuxtLink to=\"#How-Editable-writes-state\">How Editable writes state</NuxtLink> section for more guidance.</p> | <p>An `options` object.</p><p>See the <NuxtLink to=\"#How-Editable-writes-state\">How Editable writes state</NuxtLink> section for more guidance.</p> | The Editable instance (`this`) |\n| `erase(options)` | Function | <p>Erases `state`.</p><p>The exact erase behavior depends on `type` and the `erase` function's `options` parameter. See the <NuxtLink to=\"#How-Editable-erases-state\">How Editable erases state</NuxtLink> section for more guidance.</p> | <p>An `options` object.</p><p>See the <NuxtLink to=\"#How-Editable-erases-state\">How Editable erases state</NuxtLink> section for more guidance.</p> | The Editable instance (`this`) |\n\n</ProseTable>\n\n\n<ProseHeading level=\"3\">\nHow Editable edits state\n</ProseHeading>\n\nIn general, whenever the `write` or `erase` methods are called, the Editable instance creates an edited version of its original state, then calls your `onEdit` function, passing the edited state as the first argument and itself (i.e. `this`) as the second argument.\n\nThe default `onEdit` function, shown below, sets `state` to the edited state each time you call one of the editing methods:\n\n<ProseCodeblock>\n\n```js\n/*\n * Default onEdit function for Editable\n */\n(newState, instance) => instance.setState(newState)\n```\n\n</ProseCodeblock>\n\nImmediately afterward, the Editable instance will also call your `onWrite` or `onErase` functions, depending on which method you called. `onWrite` and `onErase` also receive the edited state as the first argument and the Editable instance (i.e. `this`) as the second argument.\n\nThe edited state is created differently depending on whether you call `write` or `erase`; keep reading for more guidance.\n\n\n<ProseHeading level=\"4\">\nHow Editable writes state\n</ProseHeading>\n\nThe way Editable writes state varies based on the instance's `type` property and the `options` object passed by you as the `write` method's first argument.\n\nFirst, here's a breakdown of what `options` can contain:\n\n<ProseTable>\n\n| Property | Type | Required | Description |\n| --- | --- | --- | --- |\n| `item` | any | nope | Passes an item that will be added to the end of an Array |\n| `key` | String | Only when `type` is `map` or `object` | Indicates which of the Map or Object's keys will have its value set |\n| `value` | any | nope | Passes the value that will be set as the new value for the Map or Object's key (specified by the `key` option) |\n| `rename` | String | nope | Indicates which of the Map or Object's keys will be renamed using the String passed to the `key` option |\n\n  </ProseTable>\n\nAnd here's a breakdown of how all those factors influence write behavior:\n\n<ProseTable>\n\n| When `type` is... | And `options` includes | New state is... |\n| --- | --- | --- |\n| `'array'` | `item` | `state`, with `options.item` appended as the last item in the array |\n| `'array'` | nothing | `editableState` |\n| `'map'` or `'object'` | `key`, `value`, and `rename` properties | `state` with the key specified by `rename` renamed to the key specified by `key`, and the value of `state[key]` set to `value` |\n| `'map'` or `'object'` | Only `key` and `rename` properties | `state` with the key specified by `rename` renamed to the key specified by `key` (value is unchanged) |\n| `'map'` or `'object'` | Only `key` and `value` properties | `state` with the value of `state[key]` set to `value` |\n| anything else | anything | `editableState` |\n\n</ProseTable>\n\n\n\n<ProseHeading level=\"4\">\nHow Editable erases state\n</ProseHeading>\n\nThe way Editable erases state varies based on the instance's `type` property and the `options` object passed by you as the `write` method's first argument.\n\nFirst, here's a breakdown of what `options` can contain:\n\n<ProseTable>\n\n| Property | Type | Required | Description |\n| --- | --- | --- | --- |\n| `key` | String | nope | Indicates which key of a Map or Object should be deleted. |\n| `item(currentItem)` | String, Function | nope | Indicates which item in an Array should be removed. See the <NuxtLink to=\"#How-to-erase-items-from-arrays\">How to erase items from Arrays</NuxtLink> section for more guidance. |\n| `last` | Boolean | nope | <p>Indicates whether or not the Editable instance should remove the last item from an Array or delete the last key of a Map or Object.</p><ProseAside type=\"warning\">The order of keys in JavaScript Objects is not consistent. Deleting the \"last\" key may not produce the same results across all environments. If the order of keys is important for your use case, consider using Maps instead.</ProseAside> |\n| `all` | Boolean | nope | Indicates whether or not Editable should remove all items from an Array or delete all key/value pairs from a Map or Object. |\n\n</ProseTable>\n\n\nAnd here's a breakdown of how all those factors influence erase behavior:\n\n<ProseTable>\n\n| When `type` is... | And `options` includes | New state is... |\n| --- | --- | --- |\n| `'array'` | `item` | See the <NuxtLink to=\"#How-to-erase-items-from-arrays\">How to erase items from Arrays</NuxtLink> section for more guidance. |\n| `'array'` | `last: true` | `state`, with the last item removed |\n| `'array'` | `all: true` | `[]` |\n| `'map'` or `'object'` | `key` | `state`, with the key matching `options.key` deleted |\n| `'map'` or `'object'` | `last: true` | <p>`state`, with the last key deleted.</p><ProseAside type=\"warning\">The order of keys in JavaScript Objects is not consistent. Deleting the \"last\" key may not produce the same results across all environments. If the order of keys is important for your use case, consider using Maps instead.</ProseAside> |\n| `'map'` | `all: true` | `new Map()` |\n| `'object'` | `all: true` | `{}` |\n| `'boolean'` | anything | `false` |\n| `'date'` | anything | `new Date()` |\n| `'number'` | anything | `0` |\n| `'string'` | anything | `''` |\n| anything else | anything | `undefined` |\n\n</ProseTable>\n\n<ProseAside type=\"info\">\n\nWhen erasing arrays, objects, and maps, you can set multiple options. For example, if you pass `{ last: true, item: 'myItem' }` while erasing an array, Syncable will remove `'myItem'` AND will remove the last value in the array.\n\nErase operations are performed in the following order (from most specific to least specific operation):\n1. Erase an item (Arrays only)\n2. Erase a key/value pair (Objects and Maps only)\n1. Erase the last item from an Array, or the last key/value pair from an Object or Map\n1. Erase all items from an Array, or all key/value pairs from an Object or Map\n\n</ProseAside>\n\n\n<ProseHeading level=\"5\">\nHow to erase items from Arrays\n</ProseHeading>\n\nWhen `type` is `'array'`, the `erase` method's `item` option indicates which item in `state` should be erased.\n\nIf `options.item` is a String, the Editable instance will find and remove all items in `state` that are strictly equal to `options.item`.\n\nIf `options.item` is a Function, the Editable instance will iterate through `state`, calling the `options.item` function on each item in the array, passing the item as the first argument. The Editable instance will remove all items for which the `options.item` function returns `true`.\n\nFor example, if you have an array of objects that have a unique ID in the `id` key, and you want the Editable instance to find and delete the item whose ID is `'abc'`, you can call `erase` like so:\n\n<ProseCodeblock>\n```js\neditable.erase({\n  item: currentItem => currentItem.id === 'abc'\n})\n```\n</ProseCodeblock>\n\n<ProseAside type=\"info\">\nIf `options.item(currentItem)` returns `false` for every item in `state`, the Editable instance will not remove any items.\n\nIf `options.item(currentItem)` returns `true` for more than one item in `state`, all of the matching items will be removed.\n</ProseAside>\n",
    "updatedAt": "2019-10-16T00:41:03.062Z",
    "path": "./assets/md/logic/classes/Editable.md",
    "fileName": "Editable",
    "href": "/docs/logic/classes/Editable"
  },
  {
    "title": "Fetchable",
    "framework": "agnostic",
    "publish": false,
    "body": "/*\n * Fetchable.js\n * (c) 2019 Alex Vipond\n * Released under the MIT license\n */\n\n/* Dependencies */\n\n/* Util */\n\nexport default class Fetchable {\n  /* Private properties */\n  #computedFetching\n  #computedResponse\n  #computedError\n  #fetchOptions\n\n  constructor (resource, options = {}) {\n    /* Options */\n\n    /* Public properties */\n    this.resource = resource\n\n    /* Private properties */\n    this.#computedFetching = false\n    this.#computedResponse = {}\n    this.#computedError = {}\n\n    /* Dependency */\n    this.#fetchOptions = options\n  }\n\n  /* Public getters */\n  get fetching () {\n    return this.#computedFetching\n  }\n  get response () {\n    return this.#computedResponse\n  }\n  get responseJson () {\n    try {\n      return this.response.json()\n    } catch {\n      return {}\n    }\n  }\n  get error () {\n    return this.#computedError\n  }\n  get errorJson () {\n    try {\n      return this.error.json()\n    } catch {\n      return {}\n    }\n  }\n\n  /* Public methods */\n  setResource (resource) {\n    this.resource = resource\n    return this\n  }\n  fetch () {\n    this.#computedFetching = true\n\n    return fetch(this.resource, this.#fetchOptions)\n      .then(response => {\n        this.#computedResponse = response\n        return this\n      })\n      .catch(error => {\n        this.#computedError = error\n        return this\n      })\n  }\n\n  /* Private methods */\n}\n",
    "updatedAt": "2019-09-22T06:14:07.917Z",
    "path": "./assets/md/logic/classes/Fetchable.md",
    "fileName": "Fetchable",
    "href": "/docs/logic/classes/Fetchable"
  },
  {
    "title": "Navigable",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Navigable is a library that enriches an array by:\n- Allowing it to store the index-based location of an item that has been navigated to\n- Allowing it to retrieve the item that has been navigated to\n- Giving it the methods necessary to navigate to a different item\n\nNavigable is written in vanilla JS with no dependencies.\n\n<ProseHeading level=\"2\">\nConstruct a Navigable instance\n</ProseHeading>\n\nTo construct a Navigable instance (Object), use the Navigable constructor, which takes two parameters:\n\n<ProseTable>\n\n| Parameter | Type | Required | Description |\n| --- | --- | --- | --- |\n| `array` | Array | yep | Passes the array that will be made navigable. |\n| `options` | Object | nope | Passes options for the Navigable instance. See the <NuxtLink to=\"#Navigable-constructor-options\">Navigable constructor options</NuxtLink> section for more guidance. |\n\n</ProseTable>\n\n\n<ProseCodeblock>\n```js\nconst instance = new Navigable(array[, options])\n```\n</ProseCodeblock>\n\n<ProseTable>\n| Option | Type | Default | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- | --- |\n| `initialLocation` | Number | `0` | The Navigable instance's initial index-based location | N/A | N/A |\n| `loops` | Boolean | `true` | <p>Indicates whether or not Navigable should loop around to the beginning or end of the array when navigating past those points.</p><p>See the <NuxtLink to=\"#How-Navigable-navigates\">How Navigable navigates</NuxtLink> section for more info.</p> | N/A | N/A |\n| `increment` | Number | `1` | The number of items that will be traversed when the navigable instance is stepping forward through the array | N/A | N/A |\n| `decrement` | Number | `1` | The number of items that will be traversed when the navigable instance is stepping backward through the array | N/A | N/A |\n| `onNavigate(newLocation, instance)` | Function | See the <NuxtLink to=\"#How-Navigable-navigates\">How Navigable navigates</NuxtLink> section for more info. | <p>Called by the Navigable instance after navigating.</p><p>See the <NuxtLink to=\"#How-Navigable-navigates\">How Navigable navigates</NuxtLink> section for more info.</p> | The new location (Number) and the Navigable instance (Object) | N/A |\n| `onGoTo(newLocation, instance)` | Function | none | <p>Called by the Navigable instance after navigating to a specific item.</p><p>See the <NuxtLink to=\"#How-Navigable-navigates\">How Navigable navigates</NuxtLink> section for more info.</p> | The new location (Number) and the Navigable instance (Object) | N/A |\n| `onNext(newLocation, instance)` | Function | none | <p>Called by the Navigable instance after navigating to the next item.</p><p>See the <NuxtLink to=\"#How-Navigable-navigates\">How Navigable navigates</NuxtLink> section for more info.</p> | The new location (Number) and the Navigable instance (Object) | N/A |\n| `onPrev(newLocation, instance)` | Function | none | <p>Called by the Navigable instance after navigating to the previous item.</p><p>See the <NuxtLink to=\"#How-Navigable-navigates\">How Navigable navigates</NuxtLink> section for more info.</p> | The new location (Number) and the Navigable instance (Object) | N/A |\n\n</ProseTable>\n\n<ProseHeading level=\"2\">\nAccess state and methods\n</ProseHeading>\n\nThe constructed Navigable instance is an Object, and state and methods can be accessed via its properties:\n\n\n<ProseTable>\n| Property | Type | Description | Parameters | Return value |\n| --- | --- | --- | --- | --- |\n| `array` | Array | A shallow copy of the array passed to the Navigable constructor | N/A | N/A |\n| `location` | Number | A shallow copy of the `initialLocation` option passed to the Navigable constructor. | N/A | N/A |\n| `item` | Getter | See return value | N/A | The item located at `location` in `array` (can be any type) |\n| `setArray(newArray)` | Function | Sets the Navigable instance's `array` | The new `array` (Array) | The Navigable instance (`this`) |\n| `setLocation(newLocation)` | Function | Sets the Navigable instance's `location` | The new `location` (Number) | The Navigable instance (`this`) |\n| `goTo(location)` | Function | Navigates to a specific item | The index-based location (Number) of the item that should be navigated to | The Navigable instance (`this`) |\n| `next()` | Function | Steps forward through the array, increasing `location` by `increment` | none | The Navigable instance (`this`) |\n| `prev()` | Function | Steps backward through the array, decreasing `location` by `decrement` | none | The Navigable instance (`this`) |\n</ProseTable>\n\n\n<ProseHeading level=\"2\">\nHow Navigable navigates\n</ProseHeading>\n\nIn general, whenever the `goTo`, `next`, or `prev` methods are called, the Navigable instance computes the new location, then calls your `onNavigate` function, passing the new location as the first argument and itself (i.e. `this`) as the second argument.\n\nThe default `onNavigate` function, shown below, sets the new location each time you call one of the navigation methods:\n\n<ProseCodeblock>\n\n```js\n/*\n * Default onNavigate function for Navigable\n */\n(newLocation, instance) => instance.setLocation(newLocation)\n```\n\n</ProseCodeblock>\n\nImmediately afterward, the Navigable instance will also call your `onGoTo`, `onNext`, or `onPrev` functions, depending on which method you called. `onGoTo`, `onNext`, or `onPrev` also receive the new location as the first argument and the Navigable instance (i.e. `this`) as the second argument.\n\nThe only other thing you need to know about how your Navigable instance navigates is how the `loops` option affects its behavior. Here's a breakdown:\n\n<ProseTable>\n\n| When `loops` is... | And the computed location is... | The new location is... |\n| --- | --- | --- |\n| `false` | `array.length` or greater | `array.length - 1` |\n| `false` | `-1` or less | `0` |\n| `true` | greater than `array.length - 1` | See explanation below |\n| `true` | less than `0` | See explanation below |\n\n</ProseTable>\n\nWhen `loops` is `true` and the computed location is greater than `array.length - 1` (the largest index-based location), your Navigable instance calculates how much greater the computed location is, then takes that number of steps forward through the array, looping back to the beginning any time it passes `array.length - 1`.\n\nSee the code below for specific examples:\n\n<ProseCodeblock>\n\n```js\n// The loops option is true by default\nconst instance = new Navigable(['Baleada', 'Logic', 'Navigable'])\n\ninstance.goTo(2) // The array is now located at its last item\ninstance.next() // The array navigated past the end of the array, so it will return to the beginning\ninstance.location // --> 0\n\ninstance.goTo(5) // The array's largest index is 2 (indices start at 0), so going to 5 will leave 3 steps left over.\n/*\n * The array starts at 0, where it left off.\n * Your instance navigates two steps forward and reaches the last location.\n * It steps forward once more, looping around to 0.\n * It then makes its final two steps, landing on 2.\n */\ninstance.location // --> 2\n\n```\n\n</ProseCodeblock>\n\nWhen `loops` is `true` and the computed location is less than `0`, your Navigable instance does the same thing, but in reverse: it calculates how much less the computed location is, then takes that number of steps backward through the array, looping around to the end any time it passes `0`.\n\nSee the code below for specific examples:\n\n<ProseCodeblock>\n\n```js\n// The loops option is true by default\nconst instance = new Navigable(['Baleada', 'Logic', 'Navigable'])\n\ninstance.goTo(0) // The array is now located at its last item\ninstance.prev() // The array navigated past the beginning of the array, so it will loops to the end\ninstance.location // --> 2\n\ninstance.goTo(-3) // The array's lowest index is 0 (indices start at 0), so going to -3 will leave 3 steps left over.\n/*\n * The array starts at 2, where it left off.\n * Your instance navigates two steps backward and reaches 0.\n * It steps backward once more, looping around to 2.\n * It then makes its final two steps, landing on 0.\n */\ninstance.location // --> 0\n\n```\n\n</ProseCodeblock>\n",
    "updatedAt": "2019-10-09T18:53:52.426Z",
    "path": "./assets/md/logic/classes/Navigable.md",
    "fileName": "Navigable",
    "href": "/docs/logic/classes/Navigable"
  },
  {
    "title": "Observable",
    "framework": "agnostic",
    "publish": false,
    "body": "/*\n * Observable.js\n * (c) 2019 Alex Vipond\n * Released under the MIT license\n */\n\n/* Dependencies */\n\n/* Util */\nimport is from '../util/is'\nimport toNodeList from '../util/toNodeList'\n\nexport default class Observable {\n  #supportedObserverTypes\n  #onIntersect\n  #onMutate\n  #onResize\n  #intersectionOptions\n  #computedIntersection\n  #computedMutation\n  #computedResize\n\n  constructor (elements, options = {}) {\n    /* Options */\n    this.#onIntersect = options.onIntersect\n    this.#onMutate = options.onMutate\n    this.#onResize = options.onResize\n\n    /* Public properties */\n    this.elements = toNodeList(elements)\n\n    /* Private properties */\n    this.#supportedObserverTypes = ['intersection', 'mutation', 'resize']\n\n    /* Dependency */\n    this.#intersectionOptions = this.#getIntersectionOptions(options)\n    this.#computedIntersection = is.function(this.#onIntersect)\n      ? this.#getIntersection(this.#intersectionOptions)\n      : null\n    this.#computedMutation = is.function(this.#onMutate)\n      ? this.#getMutation()\n      : null\n    this.#computedResize = is.function(this.#onResize)\n      ? this.#getResize()\n      : null\n  }\n\n  /* Public getters */\n  get intersection () {\n    return this.#computedIntersection\n  }\n  get mutation () {\n    return this.#computedMutation\n  }\n  get resize () {\n    return this.#computedResize\n  }\n\n  /* Public methods */\n  setElements (elements) {\n    this.elements = toNodeList(elements)\n    return this\n  }\n  observe (options = {}) {\n    this.elements.forEach(element => {\n      this.#supportedObserverTypes.forEach(observerType => {\n        if (!is.null(this[`${observerType}`])) {\n          this[`${observerType}`].observe(element, options)\n        }\n      })\n    })\n  }\n  disconnect () {\n    this.#supportedObserverTypes.forEach(observerType => {\n      if (!is.null(this[`${observerType}`])) {\n        this[`${observerType}`].disconnect()\n      }\n    })\n  }\n  takeRecords () {\n    this.#supportedObserverTypes.forEach(observerType => {\n      if (!is.null(this[`${observerType}`])) {\n        this[`${observerType}`].takeRecords()\n      }\n    })\n  }\n  unobserve (element) {\n    this.#supportedObserverTypes.forEach(observerType => {\n      if (!is.null(this[`${observerType}`])) {\n        this[`${observerType}`].unobserve(element)\n      }\n    })\n  }\n\n  /* Private methods */\n  #getIntersectionOptions = ({ onIntersect, onMutate, onResize, ...rest }) => rest\n  #getIntersection = function(options) {\n    return new IntersectionObserver(this.#onIntersect, options)\n  }\n  #getMutation = function() {\n    return new MutationObserver(this.#onMutate)\n  }\n  #getResize = function() {\n    return new ResizeObserver(this.#onResize)\n  }\n}\n",
    "updatedAt": "2019-09-22T06:14:07.917Z",
    "path": "./assets/md/logic/classes/Observable.md",
    "fileName": "Observable",
    "href": "/docs/logic/classes/Observable"
  },
  {
    "title": "Poppable",
    "framework": "agnostic",
    "publish": false,
    "body": "/*\n * Poppable.js\n * (c) 2019 Alex Vipond\n * Released under the MIT license\n */\n\n/* Dependencies */\nimport Dependency from '../wrappers/PoppablePopper'\n\n/* Util */\n\nexport default class Poppable {\n  #dependencyOptions\n  #dependency\n\n  constructor ({ reference, popper }, options = {}) {\n    /* Options */\n\n    /* Public properties */\n    this.reference = reference\n    this.popper = popper\n\n    /* Private properties */\n\n    /* Dependency */\n    this.#dependencyOptions = this.#getDependencyOptions(options)\n    this.#dependency = new Dependency({ reference: this.reference, popper: this.popper }, this.#dependencyOptions)\n  }\n\n  /* Public getters */\n  get manager () {\n    return this.#dependency.manager\n  }\n\n  /* Public methods */\n  setReference (reference) {\n    this.reference = reference\n    return this\n  }\n  setPopper (popper) {\n    this.popper = popper\n    return this\n  }\n  update () {\n    this.#dependency.update()\n  }\n  enableEventListeners () {\n    this.#dependency.enableEventListeners()\n  }\n  disableEventListeners () {\n    this.#dependency.disableEventListeners()\n  }\n  scheduleUpdate () {\n    this.#dependency.scheduleUpdate()\n  }\n  destroy () {\n    this.#dependency.destroy()\n  }\n\n  /* Private methods */\n  #getDependencyOptions = (options) => options\n}\n",
    "updatedAt": "2019-09-22T06:14:07.917Z",
    "path": "./assets/md/logic/classes/Poppable.md",
    "fileName": "Poppable",
    "href": "/docs/logic/classes/Poppable"
  },
  {
    "title": "Searchable",
    "framework": "agnostic",
    "publish": false,
    "body": "/*\n * Searchable.js\n * (c) 2019 Alex Vipond\n * Released under the MIT license\n */\n\n/* Dependencies */\nimport Dependency from '../wrappers/SearchableLunr.js'\n\n/* Util */\n\nexport default class Searchable {\n  #computedResults\n  #dependencyOptions\n  #dependency\n\n  constructor (array, options = {}) {\n    /* Options */\n    options = {\n      positionIsIncluded: false,\n      itemIsIncluded: true,\n      ...options\n    }\n\n    /* Public properties */\n    this.array = array\n\n    /* Private properties */\n    this.#computedResults = []\n\n    /* Dependency */\n    this.#dependencyOptions = options\n    this.#dependency = new Dependency(this.array, this.#dependencyOptions)\n  }\n\n  /* Public getters */\n  get results () {\n    return this.#computedResults\n  }\n  get index () {\n    return this.#dependency.index\n  }\n\n  /* Public methods */\n  setArray (array) {\n    this.array = array\n    this.#dependency = new Dependency(this.array, this.#dependencyOptions)\n    return this\n  }\n  search (query) {\n    this.#computedResults = this.#dependency.search(query)\n    return this\n  }\n\n  /* Private methods */\n}\n",
    "updatedAt": "2019-09-22T06:14:07.917Z",
    "path": "./assets/md/logic/classes/Searchable.md",
    "fileName": "Searchable",
    "href": "/docs/logic/classes/Searchable"
  },
  {
    "title": "Touchable",
    "framework": "agnostic",
    "publish": false,
    "body": "/*\n * Touchable.js\n * (c) 2019 Alex Vipond\n * Released under the MIT license\n */\n\n/* Dependencies */\nimport Dependency from '../wrappers/TouchableHammer'\n\n/* Util */\n\nexport default class Touchable {\n  #dependencyOptions\n  #dependency\n\n  constructor (element, options = {}) {\n    /* Options */\n\n    /* Public properties */\n    this.element = element\n\n    /* Private properties */\n\n    /* Dependency */\n    this.#dependencyOptions = options\n    this.#dependency = new Dependency(this.element, this.#dependencyOptions)\n  }\n\n  /* Public getters */\n  get manager () {\n    return this.#dependency.manager\n  }\n\n  /* Public methods */\n  setElement (element) {\n    this.element = element\n    return this\n  }\n  touch (touchType, data) {\n    this.#dependency.touch(touchType, data)\n  }\n  destroy () {\n    this.#dependency.destroy()\n  }\n\n  /* Private methods */\n}\n",
    "updatedAt": "2019-09-22T06:14:07.926Z",
    "path": "./assets/md/logic/classes/Touchable.md",
    "fileName": "Touchable",
    "href": "/docs/logic/classes/Touchable"
  },
  {
    "title": "Documentation style guide",
    "framework": "agnostic",
    "publish": false,
    "order": 0,
    "body": "In this guide, you'll find \n",
    "updatedAt": "2019-10-07T23:06:58.274Z",
    "path": "./assets/md/logic/documentation-style-guide.md",
    "fileName": "documentation-style-guide",
    "href": "/docs/logic/documentation-style-guide"
  },
  {
    "title": "What is Baleada Logic?",
    "framework": "agnostic",
    "publish": true,
    "order": 0,
    "body": "Baleada Logic is a collection of JavaScript [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) and [subclasses](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Sub_classing_with_extends) that implement **UI logic**.\n\n\n<ProseHeading level=\"2\">\nA note, before you dive in\n</ProseHeading>\n\nAlthough all of Baleada Logic's classes and subclasses are framework-agnostic, their main purpose is to add useful state and methods to websites and apps that are built on reactive frameworks like Vue, React, and Svelte. In almost all cases, it's recommended that you use <NuxtLink to=\"/docs/composition\">Baleada Composition</NuxtLink> instead of importing classes and subclasses directly from Baleada Logic.\n\nBaleada Composition has a dedicated composition function for each individual Baleada Logic class, plus composition functions that combine Baleada Logic classes to implement common UI patterns (think autocompletes, toasts, forms that auto-save, etc.).\n\nIf you're planning to use Baleada Composition, you won't need to know how to install and import classes and subclasses from Baleada Logic, but you'll still need to know how to use individual classes and subclasses. A great place to start is the <NuxtLink to=\"/docs/logic/api-design\">API design</NuxtLink> guide, which will teach you core concepts and patterns that will help you use any and all of Baleada Logic's classes and subclasses.\n\nIf instead you think you fall outside the normal use cases, feel free to keep reading!\n\n<ProseHeading level=\"2\">\nLanguage, compilation, browser support, and dependencies\n</ProseHeading>\n\nClasses and subclasses are written in modern JavaScript, with few or no dependencies of their own. They are compiled by [Babel](https://babeljs.io) to work in browsers that are used by more than 0.5% of global web visitors AND have had official support or updates in the past 24 months.\n\nTo allow for [tree-shaking](https://webpack.js.org/guides/tree-shaking/), Baleada Logic's compiled code uses [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) instead of [`require()`](https://nodejs.org/api/modules.html#modules_require_id) and [`module.exports`](https://nodejs.org/api/modules.html#modules_module_exports).\n\nAll dependencies were chosen with the following desirable characteristics in mind (in no particular order):\n- Framework agnostic\n- Few or no dependencies of their own\n- Small file size\n- Tree-shakeable\n- Small impact on apps' bundle size\n- Industry standard\n- Recommended/used by proficient, well-known, independent developers\n\nNot all dependencies meet each one of those requirements. However, lots of care was taken to ensure that, if a dependency needs to be replaced, doing so would be quick and easy, and with any luck, wouldn't result in breaking changes.\n\n\n\n<ProseHeading level=\"2\">\nInstall\n</ProseHeading>\n\n<ProseCodeblock>\n\n```bash\nnpm i @baleada/logic\n```\n\n</ProseCodeblock>\n\n\n<ProseHeading level=\"2\">\nImport a class or subclass (allows for tree-shaking)\n</ProseHeading>\n\nAll classes are named exports in Baleada Logic's entry file, so you can import one like so:\n\n\n<ProseCodeblock>\n\n```js\nimport { Delayable } from '@baleada/logic'\n```\n\n</ProseCodeblock>\n\nSubclasses are named exports in a `subclasses.js` file at the root of Baleada Logic, so you can import one like so:\n\n<ProseCodeblock>\n\n```js\nimport { Markupable } from '@baleada/logic/subclasses'\n```\n\n</ProseCodeblock>\n\n\n<ProseHeading level=\"2\">\nAvailable classes and subclasses\n</ProseHeading>\n\nAll available classes and subclasses are listed in this site's navigation under **LOGIC** and linked to their specific documentation.\n",
    "updatedAt": "2019-10-15T06:42:44.373Z",
    "path": "./assets/md/logic/index.md",
    "fileName": "index",
    "href": "/docs/logic"
  },
  {
    "title": "Renamable",
    "framework": "agnostic",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-22T06:14:07.926Z",
    "path": "./assets/md/logic/subclasses/Renamable.md",
    "fileName": "Renamable",
    "href": "/docs/logic/subclasses/Renamable"
  },
  {
    "title": "Reorderable",
    "framework": "agnostic",
    "publish": false,
    "body": "",
    "updatedAt": "2019-09-22T18:17:36.930Z",
    "path": "./assets/md/logic/subclasses/Reorderable.md",
    "fileName": "Reorderable",
    "href": "/docs/logic/subclasses/Reorderable"
  },
  {
    "title": "lastMatch",
    "framework": "agnostic",
    "publish": false,
    "order": 0,
    "body": "`lastMatch` is a utility function similar to [`lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf), except that it matches a regular expression instead of searching for a string.\n\n`lastMatch` takes three arguments:\n1. The string that will be searched\n1. The regular expression that will be used to find matches\n1. The index of the character from which `lastMatch` will start searching\n\n`lastMatch` returns the index of the last match, or `-1` if no matches are found.\n",
    "updatedAt": "2019-10-05T16:18:58.689Z",
    "path": "./assets/md/logic/util/lastMatch.md",
    "fileName": "lastMatch",
    "href": "/docs/logic/util/lastMatch"
  },
  {
    "body": "",
    "updatedAt": "2019-10-06T23:00:58.971Z",
    "path": "./assets/md/prose/index.md",
    "fileName": "index",
    "href": "/docs/prose"
  },
  {
    "title": "Roadmap",
    "framework": "agnostic",
    "publish": true,
    "order": 2,
    "body": "<ProseHeading level=\"2\">\nPre-1.0.0 to-do list\n</ProseHeading>\n\n- Baleada Logic\n  - Document all Baleada Logic libraries\n  - Pursue [other library ideas](https://www.notion.so/baleada/dea01fd9090a4bd5a8a96e84dfe6d004?v=aef7c1e8bc394535af81c8960678a13c)\n- Baleada Composition\n  - Publish 0.0.0\n  - Document installation, importing, and usage\n  - React and Svelte support\n- Baleada Icons\n  - Svelte support\n\n\n<ProseHeading level=\"2\">\nPost-1.0.0 to-do list\n</ProseHeading>\n\n- Build example to-do app using Baleada tools\n- Build example blog/static site using Baleada tools\n\n\n<ProseHeading level=\"2\">\nIdeas for other tool categories\n</ProseHeading>\n\n<ProseTable>\n| Name | Description |\n| --- | --- |\n| Baleada Style | Custom Tailwind config files, custom Tailwind plugins that register component classes and utility classes |\n| Baleada Prose | Components for use in prose. Each component will be WCAG compliant and will be able to render Markdown, HTML, and other components. |\n| Baleada Scaffold | CLI tool for scaffolding out Nuxt, Next, and Sapper projects with other Baleada tools pre-installed |\n| Baleada Baleadas | A gallery with photos of actual baleadas |\n</ProseTable>\n",
    "updatedAt": "2019-10-14T22:21:56.499Z",
    "path": "./assets/md/roadmap.md",
    "fileName": "roadmap",
    "href": "/docs/roadmap"
  },
  {
    "title": "Types of tools",
    "framework": "agnostic",
    "publish": true,
    "order": 1,
    "body": "Each tool in the Baleada app-building toolkit falls into one of the following categories:\n- <NuxtLink to=\"#ui-logic\">UI logic</NuxtLink>\n- <NuxtLink to=\"#composition-functions-a-k-a-hooks\">Composition functions (a.k.a. hooks)</NuxtLink>\n- <NuxtLink to=\"#icon-components\">Icon components</NuxtLink>\n\nEach category of tools has its own NPM package that you can install:\n\n<ProseTable ariaLabel=\"Table showing tool categories and the corresponding NPM package for each category\">\n| Tool category | NPM package |\n| --- | --- |\n| UI logic | `@baleada/logic` |\n| Composition functions | `@baleada/composition` |\n| Icon components | `@baleada/icons` |\n</ProseTable>\n\nIf you're itching to install those packages and get started with the tools they offer, you can check out the dedicated guides for <NuxtLink to=\"/docs/logic\">Baleada Logic</NuxtLink>, <NuxtLink to=\"/docs/composition\">Baleada Composition</NuxtLink>, and <NuxtLink to=\"/docs/icons\">Baleada Icons</NuxtLink>.\n\nIf you're not quite sure what all these terms mean, feel free to keep reading!\n\n<ProseHeading level=\"2\">\nUI logic\n</ProseHeading>\n\nUI logic is JavaScript that powers **user interface behaviors**. Baleada provides UI logic for specific behaviors that are commonly needed, but can be complex to implement in a reusable way.\n\nFor example:\n- Allowing the user to edit any and all kinds of state (strings, numbers, arrays, objects, etc.), save changes when they're ready, or cancel their changes and revert to the previous version.\n- Allowing the user to enter a search term, query an array of strings or objects, and receive a list of search results based on fuzzy matches\n- Autocompleting text, replacing all or part of the original text with a completed value\n\nTo get started with Baleada's logic, check out the <NuxtLink to=\"/docs/logic\">Baleada Logic</NuxtLink> package.\n\n<ProseHeading level=\"2\">\nComposition functions (a.k.a. hooks)\n</ProseHeading>\n\n\"Composition function\" is a term coined by the [Vue](https://vuejs.org) team to describe functions that **collocate code** related to the same logical concern. In [React](https://react.org), these functions are called \"hooks\", but the concept and motivations are virtually the same.\n\nBaleada's composition functions collocate **reactivity** code with **UI logic** code. More specifically, each Baleada composition function retrieves state and methods from one or more of the Baleada Logic tools, then makes all of the state reactive, using tools from the JavaScript framework of your choice.\n\nTo get started with Baleada's composition functions, check out the <NuxtLink to=\"/docs/composition\">Baleada Composition</NuxtLink> package.\n\n<ProseHeading level=\"2\">\nIcon components\n</ProseHeading>\n\nThere are [tons of reasons](http://www.fullstackradio.com/47) to use **true SVG icons** instead of icon fonts. But copy/pasting SVG markup all over your website or app is tedious, not readable, and not maintainable.\n\nIf you're using a component framework like Vue, React, or Svelte, the clear solution is to wrap up your SVG icons in reusable components, so that you get all the benefits of SVGs while writing efficient code.\n\nBaleada's icon components do just that! To get started with them, check out the <NuxtLink to=\"/docs/icons\">Baleada Icons</NuxtLink> package.\n",
    "updatedAt": "2019-10-09T18:53:52.424Z",
    "path": "./assets/md/types-of-tools.md",
    "fileName": "types-of-tools",
    "href": "/docs/types-of-tools"
  }
]